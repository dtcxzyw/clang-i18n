'\n********************\n\nPLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:\nPreprocessed source(s) and associated run script(s) are located at:'
'\nDirectory where processed files are stored.\nLinks to definition locations will only be\ngenerated if the file is in this dir.'
'\nThe directory for merging symbols.'
'\nThe output directory for saving the results.'
'\nTurn on time profiler. Generates clang-doc-tracing.json'
'\nURL of repository that hosts code.\nUsed for links to definition locations.'
'  Type "'
" '%0 %select{sink:|source:}1' must be with '%select{omp_cur_iteration - 1|omp_cur_iteration}1'"
" '%0' in a raw string literal delimiter is a C++2c extension"
" '%0' in a raw string literal delimiter is incompatible with standards before C++2c"
' (default: '
' <subcommand> --help" to get more help on a specific subcommand'
' BOLT Code Heatmap tool\n\n  Produces code heatmaps using sampled profile\n\n  Inputs:\n  - Binary (supports BOLT-optimized binaries),\n  - Sampled profile collected from the binary:\n    - perf data or pre-aggregated profile data (instrumentation profile not supported)\n    - perf data can have basic (IP) or branch-stack (LBR) samples\n\n  Outputs:\n  - Heatmaps: colored ASCII (requires a color-capable terminal or a conversion tool like `aha`)\n    Multiple heatmaps are produced by default with different granularities (set by `block-size` option)\n  - Section hotness: per-section samples% and utilization%\n  - Cumulative distribution: working set size corresponding to a given percentile of samples\n'
' BrainF compiler\n'
' [options]'
' [subcommand]'
' positional argument'
' positional arguments: See: '
'#else after #else'
'#else without #if'
'#embed is a %select{C23|Clang}0 extension'
'#embed is incompatible with C standards before C23'
'#endif without #if'
'#ident is a language extension'
'#import is a language extension'
'#import of type library is an unsupported Microsoft feature'
'#include nested too deeply'
"#include of '%0' not seen while attempting to %select{create|use}1 precompiled header"
'#include resolved using non-portable Microsoft search rules as: %0'
'#include_next in file found relative to primary source file or found by absolute path; will search from start of include path'
'#include_next in primary source file; will search from start of include path'
'#include_next is a language extension'
'#line directive requires a positive integer argument'
'#line directive with zero argument is a GNU extension'
'#line number greater than 32767 is incompatible with C++98'
'#pragma %0(".drectve") has undefined behavior, use #pragma comment(linker, ...) instead'
'#pragma %0(pop, ...) failed: %1'
'#pragma align(packed) may not be compatible with objects generated with AIX XL C/C++'
'#pragma entered here'
"#pragma execution_character_set expected '%0'"
"#pragma execution_character_set expected 'push' or 'pop'"
"#pragma execution_character_set invalid value '%0', only 'UTF-8' is supported"
'#pragma hdrstop filename not supported, /Fp can be used to specify precompiled header filename'
'#pragma hdrstop not seen while attempting to use precompiled header'
'#pragma once in main file'
'#pragma options align=reset failed: %0'
'#pragma redefine_extname is applicable to external C declarations only; not applied to %select{function|variable}0 %1'
'#pragma system_header ignored in main file'
'#pragma visibility pop with no matching #pragma visibility push'
'#pragma visibility push with no matching #pragma visibility pop'
"#pragma warning expected '%0'"
"#pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4"
'#pragma warning expected a warning number'
'#pragma warning(push, level) requires a level between 0 and 4'
'#warning is a %select{C23|C++23}0 extension'
'#warning is incompatible with C standards before C23'
'#warning is incompatible with C++ standards before C++23'
'%0 %select{parameter|return}1 type is unsupported; support for vector types for this target is introduced in %2'
"%0 '%1' is acquired exclusively and shared in the same scope"
"%0 '%1' is not held on every path through here%select{| with equal reentrancy depth}2"
"%0 '%1' is still held at the end of function"
"%0 '%1' must be acquired before '%2'"
"%0 '%2' not managed by '%1'"
"%0 (%1) exceeds limit (%2) in '%3'"
'%0 acquired here'
'%0 additional files entered using a total of %1B (%human1B) of space'
'%0 and %1%select{ attributes|}2 are not compatible'
'%0 appears multiple times in clauses on the same declare target directive'
'%0 applied to an expression is a GNU extension'
'%0 argument must be a constant unsigned integer expression'
'%0 argument of MTE builtin function must be a null or a pointer (%1 invalid)'
'%0 argument of MTE builtin function must be a pointer (%1 invalid)'
'%0 argument of MTE builtin function must be an integer type (%1 invalid)'
'%0 argument to %1 must be of vector type'
'%0 attribute %plural{0:takes no arguments|1:takes one argument|:requires exactly %1 arguments}1'
'%0 attribute applied to non-RVV type %1'
'%0 attribute applied to non-SVE type %1'
"%0 attribute applies to function parameters only if their type is a reference to a 'scoped_lockable'-annotated type"
"%0 attribute argument '%1' not supported on a global variable"
'%0 attribute argument is invalid: %select{max must be 0 since min is 0|min must not be greater than max}1'
'%0 attribute argument may only refer to a function parameter of integer type'
'%0 attribute argument must be a string literal specifying a Swift function name'
'%0 attribute argument not supported: %1'
"%0 attribute can only be applied in a context annotated with 'capability' attribute"
'%0 attribute can only be applied once per parameter'
'%0 attribute can only be applied to a %select{function|method}1 with an error parameter'
'%0 attribute can only be applied to a ARM, HLSL, SPIR-V or RISC-V builtin'
'%0 attribute can only be applied to instance variables or properties'
"%0 attribute cannot be applied to %select{a function parameter|a variable with 'register' storage class|a 'catch' variable|a bit-field|an enumeration}1"
'%0 attribute cannot be applied to %select{methods in protocols|dealloc}1'
'%0 attribute cannot be applied to a %select{function|method}1 with no parameters'
'%0 attribute cannot be applied to a module'
'%0 attribute cannot be applied to a module import'
'%0 attribute cannot be applied to non-static member functions'
'%0 attribute cannot be applied to sizeless type %1'
'%0 attribute cannot be applied to this declaration'
'%0 attribute cannot be repeated'
'%0 attribute cannot be used from %select{a block|an Objective-C function|this context}1'
'%0 attribute cannot be used with pointers to members'
"%0 attribute cannot specify more than one 'self:' parameter"
'%0 attribute does not appear on the first declaration'
'%0 attribute expression never produces a constant expression'
"%0 attribute for 'subscript' getter cannot have a 'newValue:' parameter"
"%0 attribute for 'subscript' must %select{be a getter or setter|have at least one parameter|have a 'self:' parameter}1"
"%0 attribute for 'subscript' setter cannot have multiple 'newValue:' parameters"
"%0 attribute for 'subscript' setter must have a 'newValue:' parameter"
"%0 attribute for getter must not have any parameters besides 'self:'"
'%0 attribute for setter must have one parameter for new value'
'%0 attribute has invalid identifier for the %select{base|context|parameter}1 name'
'%0 attribute has no effect on defaulted or deleted functions'
'%0 attribute ignored'
'%0 attribute ignored because Clang does not yet support this attribute signature'
'%0 attribute ignored for field of type %1'
'%0 attribute ignored on a non-definition declaration'
'%0 attribute ignored on inline function'
'%0 attribute ignored on local class%select{| member}1'
'%0 attribute ignored when parsing type'
'%0 attribute is deprecated and ignored in %1'
'%0 attribute is ignored because %1 is not a function pointer'
'%0 attribute is ignored because there exists no call expression inside the statement'
'%0 attribute is ignored in non-aggregate type %1'
'%0 attribute is invalid for the implicit this argument'
'%0 attribute is missing parameter label clause'
'%0 attribute is not supported in %select{C|C++|Objective-C}1'
"%0 attribute is not supported on '%1'"
'%0 attribute is not supported on targets missing %1; specify an appropriate -march= or -mcpu='
'%0 attribute is not yet supported on AIX'
'%0 attribute is only allowed on empty statements'
'%0 attribute is permitted on definitions only'
"%0 attribute isn't implemented by this Objective-C runtime"
'%0 attribute may not be used with no-return-attribute functions'
'%0 attribute may not be used with variadic functions'
'%0 attribute minimum and maximum arguments are equal'
"%0 attribute must be applied to a %select{function|method}1 annotated with non-'none' attribute 'swift_async'"
'%0 attribute must be greater than 0'
'%0 attribute on %1 must be preceded by %2 attribute'
'%0 attribute on entry function does not match the target profile'
'%0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer|pointer/reference-to-OSObject-pointer}1 parameters'
'%0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer}1 parameters'
'%0 attribute only applies to %select{functions|methods|properties}1 that return %select{an Objective-C object|a pointer|a non-retainable pointer}2'
'%0 attribute only applies to %select{pointer|integer}1 arguments'
'%0 attribute only applies to a pointer or reference (%1 is invalid)'
'%0 attribute only applies to return values that are pointers'
'%0 attribute only applies to return values that are pointers or references'
'%0 attribute only applies to%select{| constant}1 pointer arguments'
'%0 attribute parameter %1 is negative and will be ignored'
'%0 attribute parameter %1 is out of bounds'
'%0 attribute parameter %1 is out of bounds: %plural{0:no parameters to index into|1:can only be 1, since there is one parameter|:must be between 1 and %2}2'
'%0 attribute parameter types do not match: parameter %1 of function %2 has type %3, but parameter %4 of function %5 has type %6'
'%0 attribute parameters do not match the previous declaration'
'%0 attribute references function %1, which %plural{0:takes no arguments|1:takes one argument|:takes exactly %2 arguments}2'
'%0 attribute references parameter %1, but the function %2 has only %3 parameters'
'%0 attribute requires %select{int or bool|an integer constant|a string|an identifier}1'
'%0 attribute requires a %select{positive|non-negative}1 integral compile time constant expression'
'%0 attribute requires an integer argument which is a constant power of two between %1 and %2 inclusive; provided argument was %3'
"%0 attribute requires arguments whose type is annotated with 'capability' attribute; type here is %1"
'%0 attribute requires integer constant between %1 and %2 inclusive'
'%0 attribute requires parameter %1 to be %select{int or bool|an integer constant|a string|an identifier|a constant expression|a builtin function}2'
'%0 attribute requires that both caller and callee functions have a prototype'
'%0 attribute requires that the return value is the result of a function call'
'%0 attribute takes at least %1 argument%s1'
'%0 attribute takes no more than %1 argument%s1'
"%0 attribute with '%1' convention can only be applied to a %select{function|method}2 returning %select{an integral type|a pointer}3"
"%0 attribute with '%1' convention must have an integral-typed parameter in completion handler at index %2, type here is %3"
"%0 attribute with 'nonnull_error' convention can only be applied to a %select{function|method}1 with a completion handler with an error parameter"
'%0 attribute without capability arguments can only be applied to non-static methods of a class'
"%0 attribute without capability arguments refers to 'this', but %1 isn't annotated with 'capability' or 'scoped_lockable' attribute"
"%0 availability is ignored without a valid 'SDKSettings.json' in the SDK"
'%0 begins here'
'%0 bridges to %1, not %2'
"%0 byte order mark detected in '%1', but encoding is not supported"
'%0 calling convention is not supported %select{for this target|on variadic function|on constructor/destructor|on builtin function}1'
'%0 can appear only once in a capture list'
"%0 cannot appear before '::' because it is not a class%select{ or namespace|, namespace, or enumeration}1; did you mean ':'?"
'%0 cannot appear here'
'%0 cannot appear here, place it after "%select{class|struct|interface|union|enum}1" to apply it to the type declaration'
'%0 cannot be a template'
'%0 cannot be applied to a module'
'%0 cannot be applied to a module import'
'%0 cannot be captured because it does not have automatic storage duration'
"%0 cannot be declared 'weak_import' because its definition has been provided"
'%0 cannot be declared consteval'
'%0 cannot be declared inside a namespace'
'%0 cannot be declared static in global scope'
'%0 cannot be defined in a condition'
'%0 cannot be defined in a parameter type'
'%0 cannot be defined in a type alias template'
'%0 cannot be defined in a type specifier'
'%0 cannot be defined in an enumeration'
'%0 cannot be defined in the result type of a function'
'%0 cannot be specialized%select{|: %2}1'
'%0 cannot be the name of a parameter'
'%0 cannot be the name of a variable or data member'
'%0 cannot be used as the type of a kernel parameter'
'%0 cannot bridge to %1'
'%0 cannot have a dependent return type; use %1 instead'
"%0 cannot use 'super' because it is a root class"
'%0 causes a section type conflict with %1'
'%0 clause previously used here'
'%0 clause should not be followed by arguments; tokens will be ignored'
'%0 command failed due to signal (use -v to see invocation)'
'%0 command failed with exit code %1 (use -v to see invocation)'
'%0 currently has no effect on a using declaration'
'%0 declared as a reference to a reference'
'%0 declared here'
'%0 defined here'
"%0 differs in precompiled file '%1' vs. current file"
'%0 dimension is outside the allowed range [1, %1]'
'%0 does not have a member named %1'
'%0 does not have a member named %1; did you mean %2?'
'%0 does not identify a valid pointer authentication key for the current target'
'%0 does not name a template but is followed by template arguments'
'%0 does not name a template but is followed by template arguments; did you mean %1?'
'%0 does not point into a class'
'%0 does not refer to a type name in pseudo-destructor expression; expected the name of type %1'
'%0 does not refer to a value'
'%0 does not refer to the name of a parameter pack'
'%0 does not refer to the name of a parameter pack; did you mean %1?'
"%0 does not support input file format of file '%1': '%select{Source|ModuleMap|Precompiled|Unknown}2'"
"%0 does not support the '%1' %select{type qualifier|storage class specifier}2"
"%0 does not support the option '%1'"
'%0 evaluates to a null function pointer'
'%0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C'
'%0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C'
'%0 has a non-throwing exception specification but can still throw'
'%0 has been explicitly marked %select{unavailable|deleted|deprecated}1 here'
'%0 has been marked as being introduced in %1 %2 %select{|in %5 environment }4here, but the deployment target is %1 %3%select{| %6 environment }4'
"%0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%select{no super class|super class with type %5}4|instance variable '%4' access control is %select{|@private|@protected|@public|@package}5}3"
'%0 has lower precedence than %1; %1 will be evaluated first'
'%0 has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit'
'%0 has unknown return type; cast the call to its declared return type'
'%0 has unknown type, which is not supported for this kind of declaration'
'%0 has unknown type; cast it to its declared type to use it'
'%0 has virtual functions but non-virtual destructor'
'%0 in capture list does not name a variable'
'%0 is a %select{struct|interface|union|class|enum}1 here'
'%0 is a builtin with type %1'
'%0 is a core feature in %select{OpenCL C|C++ for OpenCL}1 version %2 but not supported on this target'
'%0 is a large (%1 bytes) pass-by-value argument; pass it by reference instead ?'
'%0 is a reserved attribute identifier'
'%0 is a reserved name for a module'
'%0 is an %select{unsafe pointer used for buffer access|unsafe buffer that does not perform bounds checks}1'
'%0 is an immediate %select{function|constructor}5 because %select{its body|the%select{| default}7 initializer of %8}6 %select{evaluates the address of %select{an immediate|a consteval}2 function %1|contains a call to %select{an immediate|a consteval}2 %select{function|constructor}4 %1 and that call is not a constant expression}3'
'%0 is an implicit parameter'
'%0 is an incomplete type'
'%0 is an invalid name for a module'
"%0 is currently enabled, but was not in the precompiled file '%1'"
'%0 is defined here; did you mean %1?'
'%0 is deprecated'
'%0 is deprecated: %1'
'%0 is expected to be a non-type template, but instantiated to a %select{class|type alias}1 template'
'%0 is incompatible with selectors that return a %select{struct|union|vector}1 type'
'%0 is incomplete'
"%0 is missing exception specification '%1'"
'%0 is no longer a pack expansion but a pack indexing type; add a name to specify a pack expansion'
'%0 is not %select{trivially relocatable|replaceable|trivially copyable|constructible with provided types}1'
'%0 is not a class type'
'%0 is not a class%select{ or namespace|, namespace, or enumeration}1'
'%0 is not a direct base of %1, cannot inherit constructors'
'%0 is not a global variable, static local variable or static data member'
'%0 is not a global variable, static local variable or static data member; did you mean %1'
'%0 is not a recognized builtin%select{|; consider including <intrin.h> to access non-builtin intrinsics}1'
'%0 is not a structural type because it has a %select{non-static data member|base class}1 of non-structural type %2'
'%0 is not a structural type because it has a %select{non-static data member|base class}1 that is not public'
'%0 is not a structural type because it has a mutable non-static data member'
'%0 is not a structural type because it has a non-static data member of rvalue reference type'
'%0 is not a valid SYCL kernel name type; a non-union class type is required'
'%0 is not a valid literal type for NSNumber'
'%0 is not a valid property name (accessing an object of type %1)'
"%0 is not an availability stage; use 'introduced', 'deprecated', or 'obsoleted'"
'%0 is not an enumerated type'
'%0 is not defined, but forward declared here; conversion would be valid if it was derived from %1'
'%0 is not defined, evaluates to 0'
'%0 is not literal because it has a non-trivial destructor'
'%0 is not literal because it has a user-provided destructor'
'%0 is not literal because it has base class %1 of non-literal type'
'%0 is not literal because it has data member %1 of %select{non-literal|volatile}3 type %2'
'%0 is not literal because it is not an aggregate and has no constexpr constructors other than copy or move constructors'
'%0 is not literal because its destructor is not constexpr'
'%0 is not polymorphic'
'%0 is not supported on HVX %1'
'%0 is not supported on this target'
'%0 is not supported with -fembed-bitcode'
'%0 is not virtual and cannot be declared pure'
'%0 is only available %select{|in %4 environment }3on %1 %2 or newer'
'%0 is only available for the SPIR-V target'
'%0 is only supported when \'-mrvv-vector-bits=<bits>\' is specified with a value of "zvl" or a power 2 in the range [64,65536]'
"%0 is only supported when '-msve-vector-bits=<bits>' is specified with a value of 128, 256, 512, 1024 or 2048"
"%0 is required to declare the member 'unhandled_exception()'"
"%0 is required to declare the member 'unhandled_exception()' when exceptions are enabled"
"%0 is required to have a non-throwing noexcept specification when the promise type declares 'get_return_object_on_allocation_failure()'"
'%0 is unavailable'
'%0 is unavailable in ARC'
'%0 is unavailable: %1'
'%0 is unsupported with LoongArch linker relaxation (-mrelax)'
'%0 is unsupported with RISC-V linker relaxation (-mrelax)'
'%0 is used as a header guard here, followed by #define of a different macro'
"%0 layout not recognized. Must be a non-polymorphic class type with no bases and two fields: a 'const E *' and either another 'const E *' or a 'std::size_t'"
'%0 macro redefined'
"%0 managed by '%1' is '%3' instead of '%2'"
"%0 marked 'override' but does not override any member functions"
'%0 may be deprecated because the receiver type is unknown'
'%0 may be duplicated when built into a shared library: it is mutable, has hidden visibility, and external linkage'
'%0 may be unavailable because the receiver type is unknown'
'%0 may not be nested in a struct due to flexible array member'
'%0 may not be used as an array element due to flexible array member'
'%0 may not intend to support class template argument deduction'
'%0 may not respond to %1'
'%0 must be explicitly converted to %1; use %select{%objcclass2|%objcinstance2}3 method for this conversion'
'%0 must be name of an Objective-C class to be able to convert %1 to %2'
'%0 must be specified on definition if it is specified on any declaration'
'%0 must be used within a preprocessing directive'
"%0 must not appear in both clauses 'to' and 'link'"
'%0 must return type %1'
'%0 needs target feature %1'
'%0 needs to be instantiated from a class template with proper template arguments'
'%0 needs to have exactly %1 template parameters'
'%0 only allowed in __except block or filter expression'
'%0 only allowed in __except filter expression'
'%0 only allowed in __finally block'
'%0 only applies to pointer types; type here is %1'
"%0 overrides a destructor but is not marked 'override'"
"%0 overrides a member function but is not marked 'override'"
"%0 parameter marked 'called_once' is called twice"
"%0 parameter marked 'called_once' is never %select{used|called}1 when %select{taking true branch|taking false branch|handling this case|none of the cases applies|entering the loop|skipping the loop|taking one of the branches}2"
"%0 redeclared with '%1' access"
'%0 released here'
"%0 requires %1 type support, but ABI '%2' does not support it"
"%0 requires %select{|%2 bit size}1 %3 %select{|return }4type support, but target '%5' does not support it"
'%0 requires HVX, use -mhvx/-mhvx= to enable it'
"%0 requires debug info. Use %1 or debug options that enable debugger's stepping function; option ignored"
'%0 requires more than 1 template argument; provide the remaining arguments explicitly to use it here'
'%0 returns a reference'
'%0 should be declared prior to the call site%select{| or in %2| or in an associated namespace of one of its arguments}1'
"%0 should not return a null pointer unless it is declared 'throw()'%select{| or 'noexcept'}1"
'%0 size too large'
'%0 specified here'
'%0 template must have at least two parameters'
'%0 type %1 not found; include the base header with -finclude-default-header'
'%0 type was not found; include <coroutine> before defining a coroutine'
'%0 used as the name of the previous parameter rather than as part of the selector'
'%0 used in array declarator outside of function prototype'
'%0 used in declare target directive is not a variable or a function name'
'%0 used in non-outermost array type derivation'
'%0 variable cannot be %1'
"%0 variable cannot be in a %1 clause in '#pragma omp %2' directive"
'%0 variable must be %1'
"%0 was %select{disabled|enabled}1 in precompiled file '%3' but is currently %select{disabled|enabled}2"
'%0 was deserialized'
'%0 was marked unused but was used'
'%0 will return the size of the pointer, not the array itself'
'%0%select{ attribute|}1 cannot be applied to a base specifier'
'%0%select{ attribute|}1 cannot be applied to a declaration'
'%0%select{ attribute|}1 cannot be applied to a statement'
'%0%select{ attribute|}1 cannot be applied to types'
'%0%select{ attribute|}1 only applies to %2'
'%0%select{ attribute|}1 only applies to %select{functions|unions|variables and functions|functions and methods|functions, methods and blocks|functions, methods, and parameters|variables|variables and fields|variables, data members and tag types|types and namespaces|variables, functions and classes|kernel functions|non-K&R-style functions|for loop statements|virtual functions|parameters and implicit object parameters|non-member functions|functions, classes, or enumerations|classes|typedefs}2'
'%0%select{ attribute|}1 only applies to fields or variables of character array type; type is %2'
"%0%select{| following the 'template' keyword}1 cannot refer to a dependent template"
"%0%select{| following the 'template' keyword}1 does not refer to a template"
"%0: '%1' input unused in cpp mode"
"%0: '%1' input unused%select{ when '%3' is present|}2"
"%0: 'get_return_object_on_allocation_failure()' must be a static member function"
"%0: previously preprocessed input%select{ unused when '%2' is present|}1"
"%0; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop or by providing the compiler option '-ffast-math'"
"%0; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop; if the arrays will always be independent, specify '#pragma clang loop vectorize(assume_safety)' before the loop or provide the '__restrict__' qualifier with the independent array arguments -- erroneous results will occur if these options are incorrectly applied"
'%0B (%human0B) in local locations, %1B (%human1B) in locations loaded from AST files, for a total of %2B (%human2B) (%3%% of available space)'
'%0{storage class} argument for SPIR-V builtin is not a 32-bits integer'
'%1 %0 is hidden by a non-type declaration of %0 here'
'%1 is a %select{private|protected}0 member of %3'
'%2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI'
'%diff{$ and $ are not pointers to compatible types|pointers to incompatible types}0,1'
'%diff{promoted type $ of K&R function parameter is not compatible with the parameter type $|promoted type of K&R function parameter is not compatible with parameter type}0,1 declared in a previous prototype'
'%diff{return type $ must match previous return type $|return type must match previous return type}0,1 when %select{block literal|lambda expression}2 has unspecified explicit return type'
"%ordinal0 argument must be a %select{|scalar|vector|matrix|vector of|scalar or vector of}1%plural{[2,3]:%plural{0:|:%plural{0:|:,}2}3|:}1%plural{0:|: }1%select{|integer|signed integer|unsigned integer|'int'|pointer to a valid matrix element}2%plural{0:|: }2%plural{0:|:%plural{0:|:or }2}3%select{|floating-point|16 or 32 bit floating-point}3%plural{0:|: }3%plural{[0,3]:type|:types}1 (was %4)"
'%ordinal0 argument must be a WebAssembly table'
'%ordinal0 argument must be an externref'
'%ordinal0 argument must be an integer'
'%ordinal0 argument must match the element type of the WebAssembly table in the %ordinal1 argument'
'%ordinal3 parameter of%select{| type aware}0%select{| destroying}1 %2 must have type %4'
'%plural{1:enumeration value %1 not explicitly handled in switch|2:enumeration values %1 and %2 not explicitly handled in switch|3:enumeration values %1, %2, and %3 not explicitly handled in switch|:%0 enumeration values not explicitly handled in switch: %1, %2, %3...}0'
'%plural{1:enumeration value %1 not handled in switch|2:enumeration values %1 and %2 not handled in switch|3:enumeration values %1, %2, and %3 not handled in switch|:%0 enumeration values not handled in switch: %1, %2, %3...}0'
"%plural{2:'delete' used to delete pointer to object allocated with 'std::allocator<...>::allocate'|:%select{non-array delete|array delete|'std::allocator<...>::deallocate'}0 used to delete pointer to %select{array object of type %2|non-array object of type %2|object allocated with 'new'}0}1"
'%plural{[0,2]:must use a qualified name when declaring|3:cannot declare}0 a %select{constructor|destructor|conversion operator|deduction guide}0 as a friend'
"%q0 %select{with definition in module '%2'|defined here}1 has different definitions in different modules; first difference is this %select{||||static assert|field|method|type alias|typedef|data member|friend declaration|function template|method|instance variable|property|unexpected decl}3"
'%q0 cannot be thread local when declared %q1'
"%q0 from module '%1' is not present in definition of %q2%select{ in module '%4'| provided earlier}3"
"%q0 has different definitions in different modules; %select{definition in module '%2' is here|defined here}1"
"%q0 has different definitions in different modules; %select{definition in module '%2'|defined here}1 first difference is %select{enum that is %select{not scoped|scoped}4|enum scoped with keyword %select{struct|class}4|enum %select{without|with}4 specified type|enum with specified type %4|enum with %4 element%s4|%ordinal4 element has name %5|%ordinal4 element %5 %select{has|does not have}6 an initializer|%ordinal4 element %5 has an initializer|}3"
"%q0 has different definitions in different modules; %select{definition in module '%2'|defined here}1 first difference is %select{return type is %4|%ordinal4 parameter with name %5|%ordinal4 parameter with type %5%select{| decayed from %7}6|%ordinal4 parameter with%select{out|}5 a default argument|%ordinal4 parameter with a default argument|function body}3"
"%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%4 base %plural{1:class|:classes}4|%4 virtual base %plural{1:class|:classes}4|%ordinal4 base class with type %5|%ordinal4 %select{non-virtual|virtual}5 base class %6|%ordinal4 base class %5 with %select{public|protected|private|no}6 access specifier}3"
"%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%4 referenced %plural{1:protocol|:protocols}4|%ordinal4 referenced protocol with name %5}3"
"%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%select{method %5|constructor|destructor}4 that has %6 parameter%s6|%select{method %5|constructor|destructor}4 with %ordinal6 parameter of type %7%select{| decayed from %9}8|%select{method %5|constructor|destructor}4 with %ordinal6 parameter named %7}3"
"%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{%select{typedef|type alias}4 name %5|%select{typedef|type alias}4 %5 with underlying type %6}3"
"%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{data member with name %4|data member %4 with type %5|data member %4 with%select{out|}5 an initializer|data member %4 with an initializer|data member %4 %select{is constexpr|is not constexpr}5}3"
"%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{end of class|public access specifier|private access specifier|protected access specifier|static assert|field|method|type alias|typedef|data member|friend declaration|function template|method|instance variable|property}3"
"%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{field %4|field %4 with type %5|%select{non-|}5bit-field %4|bit-field %4 with one width expression|%select{non-|}5mutable field %4|field %4 with %select{no|an}5 initializer|field %4 with an initializer}3"
"%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{method %4 with return type %5|%select{class|instance}5 method %4|%select{no|'required'|'optional'}4 method control|method %4 with %select{no designated initializer|designated initializer}5|%select{regular|direct}5 method %4|method %4}3"
"%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{property %4|property %4 with type %5|%select{no|'required'|'optional'}4 property control|property %4 with %select{default |}6'%select{none|readonly|getter|assign|readwrite|retain|copy|nonatomic|setter|atomic|weak|strong|unsafe_unretained|nullability|null_resettable|class|direct}5' attribute}3"
"%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{static assert with condition|static assert with message|static assert with %select{|no }4message|%select{method %5|constructor|destructor}4|%select{method %5|constructor|destructor}4 is %select{not deleted|deleted}6|%select{method %5|constructor|destructor}4 is %select{not defaulted|defaulted}6|%select{method %5|constructor|destructor}4 is %select{|pure }6%select{not virtual|virtual}7|%select{method %5|constructor|destructor}4 is %select{not static|static}6|%select{method %5|constructor|destructor}4 is %select{not volatile|volatile}6|%select{method %5|constructor|destructor}4 is %select{not const|const}6|%select{method %5|constructor|destructor}4 is %select{not inline|inline}6|%select{method %5|constructor|destructor}4 with %ordinal6 parameter with%select{out|}7 a default argument|%select{method %5|constructor|destructor}4 with %ordinal6 parameter with a default argument|%select{method %5|constructor|destructor}4 with %select{no |}6template arguments|%select{method %5|constructor|destructor}4 with %6 template argument%s6|%select{method %5|constructor|destructor}4 with %6 for %ordinal7 template argument|%select{method %5|constructor|destructor}4 with %select{no body|body}6|%select{method %5|constructor|destructor}4 with body|friend %select{class|function}4|friend %4|friend function %4|function template %4 with %5 template parameter%s5|function template %4 with %ordinal5 template parameter being a %select{type|non-type|template}6 template parameter|function template %4 with %ordinal5 template parameter %select{with no name|named %7}6|function template %4 with %ordinal5 template parameter with %select{no |}6default argument|function template %4 with %ordinal5 template parameter with default argument %6|function template %4 with %ordinal5 template parameter with one type|function template %4 with %ordinal5 template parameter %select{not |}6being a template parameter pack|}3"
"%q0 has different definitions in different modules; first difference is %select{definition in module '%2'|defined here}1 found %select{unnamed template parameter|template parameter %5|template parameter with %select{no |}4default argument|template parameter with default argument}3"
'%q0 hides overloaded virtual %select{function|functions}1'
'%q0 is not a member of class %1'
'%q0 must have external linkage when declared %q1'
'%q0 redeclared inline; %1 attribute ignored'
'%q0 redeclared without %1 attribute: previous %1 ignored'
"%q0 redeclared without 'dllimport' attribute: 'dllexport' attribute added"
'%select{#elif|#elifdef|#elifndef}0 after #else'
'%select{#elif|#elifdef|#elifndef}0 without #if'
'%select{#line|GNU line marker}0 directive interprets number as decimal, not octal'
'%select{#line|GNU line marker}0 directive requires a simple digit sequence'
'%select{%1 and |}0%2 tokens %select{introducing statement expression|terminating statement expression|introducing attribute|terminating attribute|forming pointer to member type}3 appear in different macro expansion contexts'
'%select{%1 and |}0%2 tokens %select{introducing statement expression|terminating statement expression|introducing attribute|terminating attribute|forming pointer to member type}3 are separated by whitespace'
'%select{%1 is a virtual base class of base class %2 declared here|virtual base class %1 declared here}0'
'%select{%2 has subobjects that are|%3 has type %2 that is}0 non-trivial to %select{default-initialize|destruct|copy}1'
'%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes address space of nested pointer'
'%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes address space of pointer'
'%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes pointer authentication of pointee type'
'%select{%diff{assigning $ to $|assigning to different types}1,0|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 changes retain/release properties of pointer'
"%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between pointers to integer types %select{with different sign|where one is of the unique plain 'char' type and the other is not}3"
'%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between void pointer and function pointer'
'%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers'
'%select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers in nested pointer types'
'%select{%diff{assigning to $ from incompatible type $|assigning to type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1}2'
'%select{%diff{assigning to $ from incompatible type $|assigning to type from incompatible type}0,1|%diff{passing $ to parameter of incompatible type $|passing type to parameter of incompatible type}0,1|%diff{returning $ from a function with incompatible result type $|returning type from a function with incompatible result type}0,1|%diff{converting $ to incompatible type $|converting type to incompatible type}0,1|%diff{initializing $ with an expression of incompatible type $|initializing type with an expression of incompatible type}0,1|%diff{sending $ to parameter of incompatible type $|sending type to parameter of incompatible type}0,1|%diff{casting $ to incompatible type $|casting type to incompatible type}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3%select{|: different classes%diff{ ($ vs $)|}5,6|: different number of parameters (%5 vs %6)|: type mismatch at %ordinal5 parameter%diff{ ($ vs $)|}6,7|: different return type%diff{ ($ vs $)|}5,6|: different qualifiers (%5 vs %6)|: different exception specifications}4'
'%select{%select{increment|decrement}1 of readonly property|no setter method %2 for %select{increment|decrement}1 of property}0'
"%select{%select{reference|'std::initializer_list'}0 member|member with %select{reference|'std::initializer_list'}0 subobject}1 declared here"
"%select{'#pragma clang fp eval_method'|option 'ffp-eval-method'}0 cannot be used with %select{option 'fapprox-func'|option 'mreassociate'|option 'freciprocal'|option 'ffp-eval-method'|'#pragma clang fp reassociate'|'#pragma clang fp reciprocal'}1"
"%select{'auto'|'decltype(auto)'|'__auto_type'|template arguments}0 deduced as %1 in declaration of %2 and deduced as %3 in declaration of %4"
"%select{'auto'|'decltype(auto)'|'__auto_type'|use of %select{class template|function template|variable template|alias template|template template parameter|concept|template}2 %3 requires template arguments; argument deduction}0 not allowed %select{in function prototype|in non-static struct member|in struct member|in non-static union member|in union member|in non-static class member|in interface member|in exception declaration|in template parameter until C++17|in block literal|in template argument|in typedef|in type alias|in function return type|in conversion function type|here|in lambda parameter|in type allocated by 'new'|in K&R-style function parameter|in template parameter|in friend declaration|in function prototype that is not a function declaration|in requires expression parameter|in array declaration|in declaration of conversion function template|in lambda parameter before C++14}1"
"%select{'mutable'|'static'|'constexpr'|'consteval'}0 cannot appear multiple times in a lambda declarator"
"%select{'size' argument to memset is '0'|setting buffer to a 'sizeof' expression}0; did you mean to transpose the last two arguments?"
'%select{<ERROR>|constexpr|consteval|constinit}0 can only be used in %select{|variable and function|function|variable}0 declarations'
'%select{<ERROR>|equality|three-way|equality|relational}0 comparison operator is not a friend of %select{|incomplete class }1%2'
'%select{<error>|function template|variable template|alias template|template template parameter|concept|template}0 %1 requires template arguments; argument deduction only allowed for class templates or alias templates'
'%select{@available|__builtin_available}0 does not guard availability here; use if (%select{@available|__builtin_available}0) instead'
"%select{MIPS|MSP430|RISC-V|AVR}0 '%select{interrupt|signal}1' attribute only applies to functions that have %select{no parameters|a 'void' return type}2"
"%select{OpenACC '%3' construct|while loop|do loop}0 cannot appear in intervening code of a '%1' with a '%2' clause"
"%select{OpenACC 'gang' clause with a 'dim' value greater than 1|OpenACC 'reduction' clause}0 cannot appear on the same '%1' construct as a %select{'reduction' clause|'gang' clause with a 'dim' value greater than 1}0"
'%select{OpenACC sub-array|OpenMP array section}0 is not allowed here'
'%select{PCH|current translation unit}0 has no VFS overlays'
'%select{PCH|current translation unit}0 has the following VFS overlays:\n%1'
"%select{PCH|module|precompiled }0 file '%1' uses a newer format that cannot be read"
"%select{PCH|module|precompiled}0 file '%1' built from a different branch (%2) than the compiler (%3)"
"%select{PCH|module|precompiled}0 file '%1' contains compiler errors"
"%select{PCH|module|precompiled}0 file '%1' is out of date and needs to be rebuilt%select{|: %3}2"
"%select{PCH|module|precompiled}0 file '%1' not found%select{|: %3}2"
"%select{PCH|module|precompiled}0 file '%1' uses an older format that is no longer supported"
'%select{__block variables|global variables|fields|instance variables}0 cannot have __autoreleasing ownership'
'%select{__device__|__global__|__host__|__host__ __device__}0 function %1 cannot overload %select{__device__|__global__|__host__|__host__ __device__}2 function %3'
'%select{a reference type|an array type|a non-vector or non-vectorizable scalar type}0 is an invalid argument to attribute %1'
"%select{a variable|a parameter|'this'}0 cannot appear in more than one %1 clause"
"%select{active|which applies to}0 '%1' clause here"
'%select{address of|reference to}0 stack memory associated with %select{local variable|parameter|compound literal}2 %1 %select{returned|passed to musttail function}3'
'%select{alias|ifunc}0 definition is part of a cycle'
'%select{alias|ifunc}0 must point to a defined %select{variable or |}1function'
"%select{alias|ifunc}1 will not be in section '%0' but in the same section as the %select{aliasee|resolver}2"
'%select{alias|ifunc}2 will always resolve to %0 even if weak definition of %1 is overridden'
'%select{aligning a value|the result of checking whether a value is aligned}0 to 1 byte is %select{a no-op|always true}0'
'%select{alignment of|offset of the aligned pointer from}0 the base pointee object (%1 %plural{1:byte|:bytes}1) is %select{less than|not a multiple of}0 the asserted %2 %plural{1:byte|:bytes}2'
'%select{alignment|size}0 of field %1 (%2 bits) does not match the %select{alignment|size}0 of the first field in transparent union; transparent_union attribute ignored'
'%select{alignment|size}0 of first field is %1 bits'
'%select{all|second and third}0 arguments to %1 must be of scalar or vector type with matching scalar element type%diff{: $ vs $|}2,3'
'%select{an attribute specifier sequence|%0}1 in this position is a C++23 extension'
'%select{an attribute specifier sequence|%1}0 in this position is incompatible with C++ standards before C++23'
'%select{and|because}0 %1 (%2 %3 %4) evaluated to false'
'%select{and|because}0 %1 does not satisfy %2'
'%select{and|because}0 %1 does not satisfy %2:'
'%select{and|because}0 %1 evaluated to false'
'%select{and|because}0 %1 may throw an exception'
"%select{and|because}0 '%1' would be invalid"
"%select{and|because}0 '%1' would be invalid%2"
"%select{and|because}0 '%1' would be invalid: %2"
'%select{and|because}0 type constraint %1 was not satisfied:'
'%select{anonymous struct|union}0 member %1 has a non-trivial %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2'
'%select{anonymous struct|union}0 member %1 with a non-trivial %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2 is incompatible with C++98'
'%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3'
'%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3 is deprecated'
'%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different Unicode character types %1 and %2'
'%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2'
'%select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2 is deprecated'
'%select{assignment to readonly property|no setter method %1 for assignment to property}0'
'%select{base class|inherited virtual base class}0 %1 has %select{private|protected}3 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR*|}2constructor'
'%select{bit-field %1|anonymous bit-field}0 is too wide (%2 bits)'
"%select{block pointer|pointer|reference}0 to function type %select{%2 |}1cannot have '%3' qualifier"
'%select{call to non-static member function|use of non-static data member}0 %2 of %1 from nested type %3'
'%select{cannot assign to return value because function %1 returns a const value|cannot assign to variable %1 with const-qualified type %2|cannot assign to %select{non-|}1static data member %2 with const-qualified type %3|cannot assign to non-static data member within const member function %1|cannot assign to %select{variable %2|non-static data member %2|lvalue}1 with %select{|nested }3const-qualified data member %4|read-only variable is not assignable}0'
"%select{case value|enumerator value|non-type template argument|non-type parameter of template template parameter|array size|explicit specifier argument|noexcept specifier argument|call to 'size()'|call to 'data()'}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1"
"%select{case value|enumerator value|non-type template argument|non-type parameter of template template parameter|array size|explicit specifier argument|noexcept specifier argument|call to 'size()'|call to 'data()'}0 is not a constant expression"
'%select{cast|implicit conversion}0 of %select{Objective-C|block|C}1 pointer type %2 to %select{Objective-C|block|C}3 pointer type %4 requires a bridged cast'
'%select{category %1|class extension}0 cannot conform to protocol %2 because of direct members declared in interface %3'
'%select{category|class extension}0 conforms to protocol %1 which defines method %2'
'%select{character|integer}0 literal with user-defined suffix cannot be used in preprocessor constant expression'
'%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 must occur at global scope'
'%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3'
'%select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3 is a Microsoft extension'
'%select{class|instance}0 method %1 also declared here'
'%select{class|instance}0 method %1 has a different number of parameters in different translation units (%2 vs. %3)'
'%select{class|instance}0 method %1 has a parameter with a different types in different translation units (%2 vs. %3)'
'%select{class|instance}0 method %1 has incompatible result types in different translation units (%2 vs. %3)'
'%select{class|instance}0 method %1 is assumed to return an instance of its receiver type (%2)'
'%select{class|instance}0 method %1 is variadic in one translation unit and not variadic in another'
'%select{class|protocol|category|class extension|implementation|category implementation}0 started here'
'%select{class|struct|interface|union|enum|enum class|enum struct}0 cannot be marked %select{<ERROR>|constexpr|consteval|constinit}1'
'%select{class|type alias}0 template declared here'
'%select{class|variable}0 template partial specialization contains %select{a template parameter|template parameters}1 that cannot be deduced; this partial specialization will never be used'
'%select{class|variable}0 template partial specialization does not specialize any template argument; to %select{declare|define}1 the primary template, remove the template argument list'
'%select{class|variable}0 template partial specialization is not more specialized than the primary template'
'%select{codeseg|section}0 does not match previous declaration'
"%select{command line contains|precompiled file '%1' was built with}0 '-detailed-preprocessing-record' but %select{precompiled file '%1' was not built with it|it is not present on the command line}0"
"%select{command line contains|precompiled file '%1' was built with}0 '-undef' but %select{precompiled file '%1' was not built with it|it is not present on the command line}0"
'%select{comparison between %diff{ ($ and $)|}0,1|arithmetic operation with operands of type %diff{ ($ and $)|}0,1|conditional operator with the second and third operands of type %diff{ ($ and $)|}0,1}2 which are pointers to non-overlapping address spaces'
'%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from %1 to %2 converts between mismatching address spaces'
'%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from %1 to %2 is not allowed'
'%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|addrspace_cast}0 from rvalue to reference type %2'
'%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 casts away qualifiers'
'%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2, which are not related by inheritance, is not allowed'
'%select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from bit-field lvalue to reference type %2'
'%select{const_cast||||C-style cast|functional-style cast|}0 to %2, which is not a reference, pointer-to-object, or pointer-to-data-member'
"%select{constexpr|consteval}0 function's return type %1 is not a literal type"
'%select{constexpr|consteval}1 %select{function|constructor}0 never produces a constant expression'
"%select{constexpr|consteval}2 %select{function|constructor}1's %ordinal0 parameter type %3 is not a literal type"
'%select{constructor for %1 must explicitly initialize the|implicit default constructor for %1 must explicitly initialize the|cannot use constructor inherited from base class %4;}0 %select{base class|member}2 %3 %select{which|which|of %1}0 does not have a default constructor'
'%select{constructor for %1|implicit default constructor for %1|cannot use constructor inherited from %1:}0 must explicitly initialize the %select{reference|const}2 member %3'
'%select{constructor|destructor}1 %0 must not return void expression'
'%select{const|reference}0 member %1 will never be initialized'
'%select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1 invokes deleted constructor'
'%select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}1 of type %2 when binding a reference to a temporary would %select{invoke an inaccessible constructor|find no viable constructor|find ambiguous constructors|invoke a deleted constructor}0 in C++98'
'%select{copy|move}0 assignment operator of %1 is implicitly deleted because field %2 is of %select{reference|const-qualified}4 type %3'
'%select{data member %1|base class %2}0 declared here'
'%select{data member |non-public member function |static member function |user-declared constructor|user-declared destructor|operator |nested class }0%1 is not permitted within an interface type'
'%select{declaration|definition|default argument declared|explicit specialization declared|partial specialization declared}0 here is not %select{visible|reachable|reachable|reachable|reachable|reachable}0'
"%select{declaration|definition|default argument|explicit specialization|partial specialization}0 of %1 must be imported from module '%2' before it is required"
'%select{declaration|definition|default argument|explicit specialization|partial specialization}0 of %1 must be imported from one of the following modules before it is required:%2'
'%select{declaration|definition}0 of %select{struct|interface|union|class|enum}1 in a dependent scope'
'%select{decremented|incremented}0 here'
'%select{decrement|increment}0 of object of volatile-qualified type %1 is deprecated'
'%select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++20'
'%select{default constructor of|constructor inherited by}0 %1 is implicitly deleted because all %select{data members|data members of an anonymous union member}2 are const-qualified'
'%select{default constructor of|constructor inherited by}0 %1 is implicitly deleted because field %2 of %select{reference|const-qualified}4 type %3 would not be initialized'
"%select{default constructor of|copy constructor of|move constructor of|copy assignment operator of|move assignment operator of|destructor of|constructor inherited by}0 %1 is implicitly deleted because %select{base class %3|%select{||||variant }4field %3}2 %select{has %select{no|a deleted|multiple|an inaccessible|a non-trivial}4 %select{%select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|%select{default|corresponding|default|default|default}4 constructor}0|destructor}5%select{||s||}4|is an ObjC pointer|has an address-discriminated '__ptrauth' qualifier}6"
"%select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 cannot be 'constexpr' in a class with virtual base class"
'%select{defaulted|deleted}0 function definitions are a C++11 extension'
'%select{defaulted|deleted}0 function definitions are incompatible with C++98'
"%select{definition|#undef}0 of configuration macro '%1' has no effect on the import of '%2'; pass '%select{-D%1=...|-U%1}0' on the command line to configure the module"
'%select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor'
'%select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor'
'%select{delimited|named}0 escape sequences are a %select{C++23|C2y|Clang}1 extension'
'%select{delimited|named}0 escape sequences are incompatible with C++ standards before C++23'
'%select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to %select{|class containing a }2dynamic class %3; vtable pointer will be %select{overwritten|copied|moved|compared}4'
'%select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to record %2 that is not trivial to %select{primitive-default-initialize|primitive-copy}3'
'%select{destination for|source of}0 this %1 call is a pointer to ownership-qualified type %2'
'%select{destructor|deallocator}0 has a %select{non-throwing|implicit non-throwing}1 exception specification'
'%select{dictionary|array}1 subscript base type %0 is not an Objective-C object'
'%select{equality|inequality|relational|three-way}0 comparison result unused'
'%select{expected an expression statement|expected built-in assignment operator|expected expression of scalar type|expected lvalue expression}0'
"%select{expected an expression statement|expected built-in binary or unary operator|expected unary decrement/increment operation|expected expression of scalar type|expected assignment expression|expected built-in binary operator|expected one of '+', '*', '-', '/', '&', '^', '%|', '<<', or '>>' built-in operations|expected in right hand side of expression}0"
'%select{expected assignment expression|expected compound statement|expected exactly two expression statements|expected in right hand side of the first expression}0'
"%select{expected compound statement|expected exactly one expression statement|expected assignment statement|expected conditional operator|expect result value to be at false expression|expect binary operator in conditional expression|expect '<', '>' or '==' as order operator|expect comparison in a form of 'x == e', 'e == x', 'x ordop expr', or 'expr ordop x'|expect lvalue for result value|expect scalar value|expect integer value|unexpected 'else' statement|expect '==' operator|expect an assignment statement 'v = x'|expect a 'if' statement|expect no more than two statements|expect a compound statement|expect 'else' statement|expect a form 'r = x == e; if (r) ...'}0"
'%select{explicit|friend}0 specialization cannot have a trailing requires clause unless it declares a function template'
'%select{expression|base type|declaration type|data member type|bit-field size|static assertion|fixed underlying type|enumerator value|using declaration|friend declaration|qualifier|initializer|default argument|non-type template parameter type|exception type|explicit specialization|partial specialization|__if_exists name|__if_not_exists name|lambda|block|type constraint|requirement|requires clause}0 contains%plural{0: an|:}1 unexpanded parameter pack%plural{0:|1: %2|2:s %2 and %3|:s %2, %3, ...}1'
'%select{extension|category}0 of non-parameterized class %1 cannot have type parameters'
'%select{fewer|more}0 specifiers in format string than expected'
"%select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior"
'%select{field|base class}0 %1 will be initialized after %select{field|base}2 %3'
'%select{first two|all}1 arguments to %0 must be vectors'
'%select{first two|all}1 arguments to %0 must have the same type'
"%select{first|second|third|fourth}0 parameter of 'main' (%select{argument count|argument array|environment|platform-specific data}0) must be of type %1"
'%select{first|second|third}0 parameter has unexpected type %1 (should be %2)'
'%select{first|second}0 operand was implicitly converted to type %1'
'%select{forward class declaration|class definition|category|extension}0 has too %select{few|many}1 type parameters (expected %2, have %3)'
'%select{function %1 which returns const-qualified type %2 declared here|variable %1 declared const here|%select{non-|}1static data member %2 declared const here|member function %q1 is declared const here|%select{|nested }1data member %2 declared const here}0'
'%select{function parameter|typedef}0 cannot be %select{<ERROR>|constexpr|consteval|constinit}1'
'%select{function template|class template|variable template|type alias template|template template parameter}0 %1 declared here'
'%select{function with deduced return type|declaration with trailing return type}0 must be the only declaration in its group'
"%select{function|block|lambda|coroutine}0 declared 'noreturn' should not return"
"%select{function|class|variable}0 cannot be defined in an explicit instantiation; if this declaration is meant to be a %select{function|class|variable}0 definition, remove the 'template' keyword"
"%select{function|constructor|destructor|lambda|block|member initializer of constructor}0 with '%1' attribute must not %select{allocate or deallocate memory|throw or catch exceptions|have static local variables|use thread-local variables|access ObjC methods or properties}2"
"%select{function|constructor|destructor|lambda|block|member initializer of constructor}0 with '%1' attribute must not call non-'%1' %select{function|constructor|destructor|lambda|block}2 '%3'"
"%select{function|constructor|destructor|lambda|block|member initializer of constructor}0 with '%1' attribute must not call non-'%1' expression"
"%select{function|constructor|destructor|lambda|block|member initializer}0 cannot be inferred '%1' because it %select{allocates or deallocates memory|throws or catches exceptions|has a static local variable|uses a thread-local variable|accesses an ObjC method or property}2"
"%select{function|constructor|destructor|lambda|block|member initializer}0 cannot be inferred '%1' because it calls non-'%1' %select{function|constructor|destructor|lambda|block}2 '%3'"
"%select{function|constructor|destructor|lambda|block}0 does not permit inference of '%1' because it is declared '%2'"
"%select{function|constructor|destructor|lambda|block}0 with '%1' attribute should be declared noexcept"
"%select{function|kernel}0 cannot be called 'main'"
'%select{function|method|block}0 has been explicitly marked sentinel here'
"%select{function|method}0 %1 could be declared with attribute 'noreturn'"
"%select{function|parameter}0 declared '[[carries_dependency]]' after its first declaration"
'%select{function|variable}0 %1 is not needed and will not be emitted'
'%select{function|variable}0 %q1 has internal linkage but is not defined'
'%select{function|variable}0 %q1 is used but not defined in this translation unit, and cannot be defined in any other translation unit because its type does not have linkage'
'%select{global|private}0 module fragment cannot be exported'
'%select{hex|octal}0 escape sequence out of range'
'%select{if|switch}0 initialization statements are incompatible with C++ standards before C++17'
'%select{implicit conversion|cast}0 of %select{%2|a non-Objective-C pointer type %2|a block pointer|an Objective-C pointer|an indirect pointer to an Objective-C pointer}1 to %3 is disallowed with ARC'
'%select{implicit conversion|cast}0 of weak-unavailable object of type %1 to a __weak object of type %2'
'%select{implicitly |}2captured%select{| by reference}3%select{%select{ due to use|}2 here| via initialization of lambda capture %0}1'
'%select{implicit|explicit}0 instantiation first required here'
'%select{implicit|explicit}0 instantiation of template %1 within its own definition'
'%select{implicit|explicit}0 instantiation of undefined template %1'
"%select{incompatible|duplicate}0 directives '%1' and '%2'"
'%select{instance variable|property}2 with %0 attribute must be an object type (invalid %1)'
'%select{instance|class}1 method %0 not found ; did you mean %2?'
'%select{integer|float}0 literal is too large to be represented as a %select{32-bit %select{signed|}1 integer|float}0 type'
'%select{integer|integral}1 constant expression must have %select{integer|integral or unscoped enumeration}1 type, not %0'
"%select{interrupt service routine|function with attribute 'no_caller_saved_registers'}0 should only call a function with attribute 'no_caller_saved_registers' or be compiled with '-mgeneral-regs-only'"
"%select{invalid use of|unknown}2 attribute subject matcher sub-rule '%0'; '%1' matcher %select{does not support sub-rules|supports the following sub-rules: %3}2"
"%select{invalid value '%0'; must be positive|value '%0' is too large}1"
"%select{invalid|missing}0 option%select{ %1|}0; expected 'contract', 'reassociate', 'reciprocal', or 'exceptions'"
'%select{invalid|missing}0 option%select{ %1|}0; expected vectorize, vectorize_width, interleave, interleave_count, unroll, unroll_count, pipeline, pipeline_initiation_interval, vectorize_predicate, or distribute'
'%select{in|co|contra}0variant type parameter %1 conflicts with previous %select{in|co|contra}2variant type parameter %3'
'%select{left |right |}0operand to %select{assignment|compound assignment|increment|decrement}1 expression must be %select{an l-value|of scalar type (was %3)}2'
'%select{left|right}0 side of operator converted from negative value to unsigned: %1'
'%select{left|right}1 operand to ? is void, but %select{right|left}1 operand is of type %0'
'%select{loading directly from|assigning directly to}0 pointer to type %1 requires cl_khr_fp16. Use vector data %select{load|store}0 builtin functions instead'
'%select{local variable|parameter|typedef}0 %1 cannot be declared __module_private__'
"%select{map type '%1' is not allowed|map type must be specified}0 for '#pragma omp %2'"
"%select{missing '#include'|missing '#include %3'}2; %select{||default argument of |explicit specialization of |partial specialization of }0%1 must be %select{declared|defined|defined|declared|declared}0 before it is used"
'%select{no_destroy|always_destroy}0 attribute can only be applied to a variable with static or thread storage duration'
'%select{non-constexpr|constexpr|consteval}1 declaration of %0 follows %select{non-constexpr|constexpr|consteval}2 declaration'
'%select{non-constexpr|undefined}0 %select{function|constructor}1 %2 cannot be used in a constant expression'
'%select{non-const|volatile}0 lvalue reference %diff{to type $ cannot bind to a temporary of type $|cannot bind to incompatible temporary}1,2'
'%select{non-const|volatile}0 lvalue reference %diff{to type $ cannot bind to a value of unrelated type $|cannot bind to a value of unrelated type}1,2'
'%select{non-const|volatile}0 lvalue reference to type %1 cannot bind to an initializer list temporary'
'%select{non-const|volatile}0 reference cannot bind to bit-field%select{| %1}2'
'%select{non-const|volatile}0 reference cannot bind to matrix element'
'%select{non-const|volatile}0 reference cannot bind to vector element'
'%select{non-integral type %0|%0}1 is an invalid underlying type'
'%select{non-kernel function|function scope}0 variable cannot be declared in %1 address space'
"%select{non-member function|static member function|explicit object member function|deduction guide}0 %select{of type %2 |}1cannot have '%3' qualifier"
'%select{non-member|member}0 %select{<ERROR>|equality|three-way|equality|relational}1 comparison operator must have %select{2|1}0 parameters'
'%select{non-member|static member|non-static member}0 function cannot perform a tail call to %select{non-member|static member|non-static member|pointer-to-member}1 function%select{| %3}2'
"%select{non-pointer|function pointer|void pointer}0 argument to '__builtin_launder' is not allowed"
"%select{non-struct type|non-class type|non-union type|non-enum type|typedef|type alias|template|alias template|template template argument}1 %0 cannot be referenced with the '%select{struct|interface|union|class|enum}2' specifier"
'%select{non-virtual|virtual}0 derivation here'
"%select{non-|function }0pointer argument to '__builtin_is_within_lifetime' is not allowed"
'%select{non-|}0overlapping comparisons always evaluate to %select{false|true}0'
'%select{non-|}0type aware %1 declared here in %2'
"%select{no|too many}0 integer expression arguments provided to OpenACC 'num_gangs' %select{|clause: '%1' directive expects maximum of %2, %3 were provided}0"
"%select{orphaned 'omp section' directives are prohibited, it|'omp section' directive}0 must be closely nested to a sections region%select{|, not a %1 region}0"
"%select{overridden|current}0 method is explicitly declared 'instancetype'%select{| and is expected to return an instance of its class type}0"
"%select{overridden|current}0 method is part of the '%select{|alloc|copy|init|mutableCopy|new|autorelease|dealloc|finalize|release|retain|retainCount|self}1' method family%select{| and is expected to return an instance of its class type}0"
'%select{parameters|function return value}0 cannot have __fp16 type; did you forget * ?'
'%select{parameter|non-static data member}3 %0 %select{|of %1 }3shadows member inherited from type %2'
'%select{parameter|parameter pack}0 declared here'
"%select{parenthesize the third argument|cast the second argument to 'int'}0 to silence"
'%select{partial specialization|explicit specialization|explicit instantiation}0 of alias templates is not permitted'
'%select{pointers|references}0 are unsupported in HLSL'
'%select{pointers|references}0 to functions are not allowed'
'%select{pointer|block pointer|member pointer}0 is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)'
'%select{pointer|reference}0 to %select{|subobject of }1%select{temporary|%3}2 is not a constant expression'
"%select{pointer|reference}0 to %select{|subobject of }1%select{type_info object|string literal|temporary object|predefined '%3' variable}2 is not allowed in a template argument"
'%select{pointer|reference}0 to %select{|subobject of }1heap-allocated object is not a constant expression'
'%select{pointer|reference}0 to WebAssembly reference type is not allowed'
'%select{pointer|reference}0 to a consteval declaration is not a constant expression'
'%select{pointer|reference}1 to non-const type %0 with no explicit ownership'
"%select{precompiled file '%1' was|current translation unit is}0 compiled with the target feature '%2' but the %select{current translation unit is|precompiled file '%1' was}0 not"
'%select{precompiled header|module}0 uses __DATE__ or __TIME__'
'%select{program scope|static local|extern}0 variable must reside in %1 address space'
'%select{property|instance variable}0 access cannot be qualified with %1'
"%select{public|private|project}1 umbrella header file not found in input: '%0'"
"%select{qualifier in |static |}0array size %select{||'[*] '}0is a C99 feature"
"%select{qualifier in |static |}0array size %select{||'[*] '}0is a C99 feature, not permitted in C++"
'%select{read of|read of|assignment to|increment of|decrement of|<ERROR>|<ERROR>|<ERROR>|<ERROR>|<ERROR>|<ERROR>}0 volatile %select{temporary|object %2|member %2}1 is not allowed in a constant expression'
'%select{read of|read of|assignment to|increment of|decrement of|<ERROR>|<ERROR>|<ERROR>|<ERROR>|<ERROR>|<ERROR>}0 volatile-qualified type %1 is not allowed in a constant expression'
'%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of subobject of|destruction of|read of}0 %select{object outside its lifetime|uninitialized object}1 is not allowed in a constant expression'
'%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of subobject of|destruction of|read of}0 member %1 of union with %select{active member %3|no active member}2 is not allowed in a constant expression'
'%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of|read of}0 %select{temporary|variable}1 whose %plural{8:storage duration|:lifetime}0 has ended'
'%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of|read of}0 dereferenced null pointer is not allowed in a constant expression'
'%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of|read of}0 dereferenced one-past-the-end pointer is not allowed in a constant expression'
'%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of|read of}0 element of array without known bound is not allowed in a constant expression'
'%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of|read of}0 heap allocated object that has been deleted'
'%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of|read of}0 mutable member %1 is not allowed in a constant expression'
"%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of|read of}0 object '%1' whose value is not known"
'%select{read of|read of|assignment to|increment of|decrement of|member call on|dynamic_cast of|typeid applied to|construction of|destruction of|read of}0 temporary is not allowed in a constant expression outside the expression that created the temporary'
'%select{reading|writing}1 the value pointed to by %0 requires holding %select{any mutex|any mutex exclusively}1'
'%select{reading|writing}1 variable %0 requires holding %select{any mutex|any mutex exclusively}1'
"%select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3"
"%select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3"
"%select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime is shorter than the lifetime of the constructed object"
"%select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime would be shorter than the lifetime of the constructed object"
'%select{reference|pointer}0 member declared here'
'%select{reinterpret_cast|C-style cast}0 from %1 to %2 changes address space of nested pointers'
'%select{reinterpret_cast|dynamic_cast|%select{this conversion|cast that performs the conversions of a reinterpret_cast}1|cast from %1}0 is not allowed in a constant expression%select{| in C++ standards before C++20||}0'
'%select{remainder|division}0 by zero is undefined'
"%select{return type|parameter type|property}1 may not be qualified with '__ptrauth'; type is %0"
'%select{returning|passing}0 a VL-dependent argument %select{from|to}0 a function with a different streaming-mode is undefined behaviour when the streaming and non-streaming vector lengths are different at runtime'
'%select{returning|passing}0 a VL-dependent argument %select{from|to}0 a locally streaming function is undefined behaviour when the streaming and non-streaming vector lengths are different at runtime'
'%select{return|parameter|variable|field|instance variable|synthesized instance variable}0 type %1 is an abstract class'
"%select{self-|array |pointer }0comparison always evaluates to %select{a constant|true|false|'std::strong_ordering::equal'}1"
"%select{shader model|Vulkan environment|shader stage}0 '%1' in target '%2' is invalid for HLSL code generation"
"%select{shader model|Vulkan environment|shader stage}0 is required as %select{OS|environment}1 in target '%2' for HLSL code generation"
'%select{signed value|extra discriminator|blended pointer|blended integer}0 must have %select{pointer|integer|pointer or integer}1 type; type here is %2'
"%select{signed |}0'size_t' literal is out of range of possible %select{signed |}0'size_t' values"
'%select{signed|unsigned}0 _BitInt must have a bit size of at least %select{2|1}0'
'%select{signed|unsigned}0 _BitInt of bit sizes greater than %1 not supported'
"%select{source|destination}2 of '%select{%select{memcpy|wmemcpy}1|%select{memmove|wmemmove}1}0' is %3"
"%select{statement after '#pragma omp %1' must be a for loop|expected %2 for loops after '#pragma omp %1'%select{|, but found only %4}3}0"
'%select{statement|directive}0 outside teams construct here'
"%select{static data member is predetermined as shared|variable with static storage duration is predetermined as shared|loop iteration variable is predetermined as private|loop iteration variable is predetermined as linear|loop iteration variable is predetermined as lastprivate|constant variable is predetermined as shared|global variable is predetermined as shared|non-shared variable in a task construct is predetermined as firstprivate|variable with automatic storage duration is predetermined as private}0%select{|; perhaps you forget to enclose 'omp %2' directive into a parallel or another task region?}1"
"%select{string|character|boolean|numeric}0 literal must be prefixed by '@' in a collection"
"%select{string|numeric}0 literal must be prefixed by '@'"
'%select{struct|interface|class}0 with virtual base %plural{1:class|:classes}1 is not a literal type'
'%select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI'
'%select{struct|interface|union|class|enum}0 %1 does not declare any constructor to initialize its non-modifiable members'
'%select{struct|union|enum}0 defined within a struct or union is not visible in C++'
'%select{struct|union}0 kernel parameters may not contain pointers'
'%select{struct|union}0 without named members is a GNU extension'
'%select{subtraction|addition}0 of address-of-label expressions is not supported with ptrauth indirect gotos'
'%select{template type|non-type template|template template}0 parameter%select{| pack}1 conflicts with previous %select{template type|non-type template|template template}0 parameter%select{ pack|}1'
'%select{template type|non-type template|template template}0 parameter%select{| pack}1 does not match %select{template type|non-type template|template template}0 parameter%select{ pack|}1 in template argument'
'%select{template|partial|member}0 specialization cannot be declared __module_private__'
'%select{temporary %select{whose address is used as value of|%select{|implicitly }2bound to}4 %select{%select{|reference }4member of local variable|local %select{variable|reference}4}1|array backing %select{initializer list subobject of local variable|local initializer list}1}0 %select{%3 |}2will be destroyed at the end of the full-expression'
"%select{the message|the expression}0 in %select{a static assertion|this asm operand}0 must be a string literal or an object with 'data()' and 'size()' member functions"
'%select{the message|the expression}0 in %select{a static assertion|this asm operand}0 must be produced by a constant expression'
"%select{the message|the expression}0 in %select{a static assertion|this asm operand}0 must have a '%select{size|data}1()' member function returning an object convertible to '%select{std::size_t|const char *}1'"
'%select{the message|the expression}0 in %select{this static assertion|this asm operand}0 is not a constant expression'
'%select{too few|too many}0 template arguments for %select{class template|function template|variable template|alias template|template template parameter|concept|template}1 %2'
'%select{too few|too many}0 template parameters in template %select{|template parameter }1redeclaration'
'%select{too few|too many}0 template parameters in template template argument'
'%select{too many|too few}0 elements in vector %select{initialization|operand}3 (expected %1 elements, have %2)'
'%select{type tag|argument}0 index %1 is greater than the number of arguments specified'
'%select{typedef|type alias|type alias template}0 redefinition with different types%diff{ ($ vs $)|}1,2'
'%select{uninitialized use occurs|variable is captured by block}0 here'
"%select{unknown|duplicate}0 modifier %1 in OpenACC modifier-list on '%2' clause"
'%select{unknown|unsupported}0 machine mode %1'
'%select{unsafe pointer operation|unsafe pointer arithmetic|unsafe buffer access|function introduces unsafe buffer manipulation|unsafe invocation of %1|field %1 prone to unsafe buffer manipulation}0'
"%select{unsupported|duplicate|unknown}0%select{| CPU| tune CPU}1 '%2' in the '%select{target|target_clones|target_version}3' attribute string;"
"%select{unsupported|duplicate|unknown}0%select{| CPU| tune CPU}1 '%2' in the '%select{target|target_clones|target_version}3' attribute string; '%select{target|target_clones|target_version}3' attribute ignored"
'%select{using this character in an identifier|starting an identifier with this character}0 is incompatible with C99'
"%select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead"
'%select{value|type}0-dependent expression passed as an argument to debug command'
'%select{variable|static data member}0 instantiated with function type %1'
'%select{variable|variable template|variable template partial specialization|variable template explicit specialization}0 %1 declared with deduced type %2 cannot appear in its own initializer'
'%select{via initialization of|binding reference}0 variable %select{%2 |}1here'
"%select{virtual method|function pointer}0 cannot be inferred '%1'"
'%select{void function|void method|constructor|destructor}1 %0 must not return a value'
'%select{void function|void method|constructor|destructor}1 %0 should not return a value'
'%select{wide|Unicode}0 character literals may not contain multiple characters'
"%select{x86|x86-64}0 'interrupt' attribute only applies to functions that have %select{a 'void' return type|only a pointer parameter optionally followed by an integer parameter|a pointer as the first parameter|a %2 type as the second parameter}1"
"%select{|'%1-%2' }0diagnostics %select{with '%2' severity |}0%select{expected|seen}3 but not %select{seen|expected}3: %4"
'%select{|a template declaration|an explicit template specialization|an explicit template instantiation}0 can only %select{|declare|declare|instantiate}0 a single entity'
"%select{|captured }1%0 parameter marked 'called_once' is never called"
'%select{|captured }1completion handler is never called'
"%select{|change to 'snprintf' for explicit bounds checking | buffer pointer and size may not match|string argument is not guaranteed to be null-terminated|'va_list' is unsafe}0"
'%select{|direct }0%select{method|property}1 declaration conflicts with previous %select{|direct }2declaration of %select{method|property}1 %3'
'%select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++'
"%select{|implicit }0use of 'this' pointer is only allowed within the evaluation of a call to a 'constexpr' member function"
'%select{|implicitly }1declared %select{private|protected}0 here'
"%select{|incremented }0enumerator value which exceeds the range of 'int' is a C23 extension (%1 is too %select{small|large}2)"
"%select{|incremented }0enumerator value which exceeds the range of 'int' is incompatible with C standards before C23 (%1 is too %select{small|large}2)"
'%select{|member|base class}0 %1 declared here'
'%select{|member}0 using declaration %1 instantiates to an empty pack'
'%select{|non-aggregate }0type %1 cannot be initialized with an initializer list'
'%select{|overriding }1method cannot be unavailable on %0 when %select{the protocol method it implements|its overridden method}1 is available'
'%select{|overriding }4method %select{introduced after|deprecated before|obsoleted before}0 %select{the protocol method it implements|overridden method}4 on %1 (%2 vs. %3)'
'%select{|pointer to |reference to }0incomplete type %1 is not allowed in exception specification'
"%select{|previous }0'hint' clause with value '%1'"
"%select{|previous }0directive with no 'hint' clause specified"
'%select{|previous }0using declaration'
'%select{|previous }0using-enum declaration'
'%select{|reference to }0sizeless type %1 is not allowed in exception specification'
'%select{|second }0%1 token is here'
'%select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 uses deleted function%select{|: %4}3'
'%select{|success |failure }0memory order argument to atomic operation is invalid'
'%select{|type aware }0%select{|destroying }1%2 cannot take a dependent type as its %ordinal3 parameter; use %4 instead'
'%select{|type aware }0%select{|destroying }1%2 cannot take a dependent type as its %ordinal3 parameter; use %5 (%4) instead'
'%select{|type aware }0%select{|destroying }1%2 must have at least %select{|one|two|three|four|five}3 parameter%s3'
'%select{|type aware }0%select{|destroying }1%2 takes type %5 (%4) as %ordinal3 parameter'
"%select{|umbrella }0header '%1' not found"
'%select{|unsafe_unretained|strong|weak}1 property %0 may not also be declared %select{|__unsafe_unretained|__strong|__weak|__autoreleasing}2'
'%select{||reinterpret_cast||C-style cast||}0 from scalar %1 to vector %2 of different size'
'%select{||reinterpret_cast||C-style cast||}0 from vector %1 to scalar %2 of different size'
'%select{||reinterpret_cast||C-style cast||}0 from vector %1 to vector %2 of different size'
"%select{|||||virtual function called on|dynamic_cast applied to|typeid applied to|construction of|destruction of}0 object '%1' whose dynamic type is not constant"
"'##' cannot appear at end of __VA_OPT__ argument"
"'##' cannot appear at end of macro expansion"
"'##' cannot appear at start of __VA_OPT__ argument"
"'##' cannot appear at start of macro expansion"
"'#include <filename>' attaches the declarations to the named module '%0', which is not usually intended; consider moving that directive before the module declaration"
"'#pragma %0' can only appear at file scope"
"'#pragma %0' can only appear at file scope or at the start of a compound statement"
"'#pragma %0' is not supported on this target - ignored"
"'#pragma STDC FENV_ACCESS ON' is illegal when precise is disabled"
"'#pragma alloc_text' is applicable only to functions"
"'#pragma alloc_text' is applicable only to functions with C linkage"
"'#pragma clang arc_cf_code_audited' was not ended within this file"
"'#pragma clang assume_nonnull' was not ended within this file"
"'#pragma clang attribute %select{%1.|}0pop' with no matching '#pragma clang attribute %select{%1.|}0push'"
"'#pragma clang attribute push' regions ends here"
"'#pragma clang attribute' attribute with no matching '#pragma clang attribute push'"
"'#pragma comment %0' ignored"
"'#pragma float_control push/pop' can only appear at file or namespace scope or within a language linkage specification"
"'#pragma float_control(except, on)' is illegal when precise is disabled"
"'#pragma float_control(precise, off)' is illegal when except is enabled"
"'#pragma float_control(precise, off)' is illegal when fenv_access is enabled"
"'#pragma init_seg' is only supported when targeting a Microsoft environment"
"'#pragma omp %0' %select{|with '%2' clause }1cannot be an immediate substatement"
"'#pragma omp %0' directive must appear only in file scope"
"'#pragma omp %0' must appear in the scope of the %q1 variable declaration"
"'#pragma omp %0' must precede all references to variable %q1"
"'#pragma omp declare %select{simd|variant}0' can only be applied to functions"
"'#pragma omp declare variant' cannot be applied for function after first usage; the original function might be used"
"'#pragma omp declare variant' cannot be applied to the function that was defined already; the original function might be used"
"'#pragma omp declare variant' does not support %select{function templates|virtual functions|deduced return types|constructors|destructors|deleted functions|defaulted functions|constexpr functions|consteval function}0"
"'#pragma omp declare variant' is not compatible with any target-specific attributes"
"'#pragma omp end assumes' with no matching '#pragma omp begin assumes'"
"'#pragma omp end declare variant' with no matching '#pragma omp begin declare variant'"
"'#pragma unsafe_buffer_usage' was not ended"
"'$' in identifier"
"'%%n' specifier not supported on this platform"
"'%0' %select{length modifier|conversion specifier}1 is not supported by ISO C"
"'%0' ABI is not supported with FPU"
"'%0' action ignored; '%1' action specified previously"
"'%0' and '%1' clause are mutually exclusive and may not appear on the same directive"
"'%0' argument on '%1' clause is not permitted on a%select{|n orphaned}2 '%3' construct%select{| associated with a '%5' compute construct}4"
"'%0' argument to '%1' clause not allowed on a '%2' construct%select{| associated with a '%4' construct}3 that has a '%5' clause"
"'%0' as a module map name is deprecated, rename it to %select{module.modulemap|module.private.modulemap}1%select{| in the 'Modules' directory of the framework}2"
"'%0' attribute cannot be specified on a definition"
"'%0' call operates on objects of type %1 while the size is based on a different type %2"
"'%0' can only be used if the target supports the mfhc1 and mthc1 instructions"
"'%0' can only be used with the '%1' ABI"
"'%0' cannot be a part of nested name specifier; did you mean ':'?"
"'%0' cannot be called with %select{a null pointer|a one-past-the-end pointer|a pointer to an object whose lifetime has not yet begun}1"
"'%0' cannot be signed or unsigned"
"'%0' cannot be used in an unevaluated context"
"'%0' cannot be used in the handler of a try block"
"'%0' cannot be used outside a function"
"'%0' casts have no effect when not using ARC"
"'%0' clause is specified here"
"'%0' clause not allowed on a 'kernels loop' construct that has a '%1' clause with a%select{n| 'num'}2 argument"
"'%0' clause requires 'dispatch' context selector"
"'%0' clause specifies a loop count greater than the number of available loops"
"'%0' clause used here"
"'%0' clause with '%1' modifier cannot be specified if an 'ordered' clause is specified"
"'%0' clauses cannot be mixed with '%1' clause"
"'%0' construct is here"
"'%0' declared as a member pointer to a reference of type %1"
"'%0' declared as a member pointer to void"
"'%0' declared as a pointer to a reference of type %1"
"'%0' declared as an array with a negative size"
"'%0' declared as array of functions of type %1"
"'%0' declared as array of references of type %1"
"'%0' directive cannot follow %select{'%2' directive|other expected directives}1"
"'%0' directive found here"
"'%0' does not contain a GCC installation"
"'%0' does not support '-%1'; flag ignored"
"'%0' does not support '-moutline'; flag ignored"
"'%0' file not found"
'\'%0\' file not found with <angled> %select{include|import}1; use "quotes" instead'
"'%0' file not found, did you mean '%1'?"
"'%0' function must have a prototype"
"'%0' ignored on this declaration"
"'%0' included multiple times, additional include site here"
"'%0' included multiple times, additional include site in header from module '%1'"
"'%0' invalid for input of type %1"
"'%0' is a C11 extension"
"'%0' is a C2y extension"
"'%0' is a C99 extension"
"'%0' is a context %select{set|selector|property}1 not a context %select{set|selector|property}2"
"'%0' is a keyword in C++11"
"'%0' is a keyword in C++20"
"'%0' is a keyword in C23"
"'%0' is a keyword in C99"
"'%0' is bound to current loop, GCC binds it to the enclosing loop"
"'%0' is ignored since it is only supported for HIP"
"'%0' is incompatible with C standards before C11"
"'%0' is incompatible with C standards before C23"
"'%0' is incompatible with C standards before C2y"
"'%0' is invalid in friend declarations"
"'%0' is not a valid Unicode character name"
"'%0' is not a valid builtin name for %1"
"'%0' is not a valid context property for the context selector '%1' and the context set '%2'; property ignored"
"'%0' is not a valid context selector for the context set '%1'; selector ignored"
"'%0' is not a valid context set in a `declare variant`; set ignored"
"'%0' is not a valid object format flag"
"'%0' is not permitted on a declaration of a type"
"'%0' is not supported in C++ for OpenCL"
"'%0' is only allowed on variable declarations"
"'%0' is only available in %1"
"'%0' is used without '-mstack-protector-guard-offset', and there is no default"
"'%0' keyword is a C++11 extension"
"'%0' keyword is incompatible with C++98"
"'%0' keyword not permitted with interface types"
"'%0' may overflow; destination buffer in argument %1 has size %2, but the corresponding specifier may require size %3"
"'%0' not supported, please use -iquote instead"
"'%0' only applies to %select{function|pointer|Objective-C object or block pointer}1 types; type here is %2"
"'%0' only applies to medium and large code models"
"'%0' option requires target HLSL Version >= 2018%select{| and shader model >= 6.2}1, but HLSL Version is '%2'%select{| and shader model is '%3'}1"
"'%0' parameter can only be used with swiftcall%select{ or swiftasynccall|}1 calling convention%select{|s}1"
"'%0' parameter must have pointer%select{| to unqualified pointer}1 type; type here is %2"
"'%0' previously encountered here"
"'%0' qualifier is not allowed on a constructor"
"'%0' qualifier is not allowed on a destructor"
"'%0' qualifier may not appear after the virtual specifier '%1'"
"'%0' qualifier may not be applied to a reference"
"'%0' qualifier on function type %1 has no effect"
"'%0' qualifier on function type %1 has no effect and is a Clang extension"
"'%0' qualifier on omitted return type %1 has no effect"
"'%0' qualifier on reference type %1 has no effect"
"'%0' qualifier%s1 on base class type %2 %plural{1:has|:have}1 no effect"
"'%0' region encountered before requires directive with '%1' clause"
"'%0' required by '%1'"
"'%0' required for precompiled header not found"
"'%0' size argument is too large; destination buffer has size %1, but size argument is %2"
"'%0' specifier is not allowed outside a class definition"
"'%0' statement cannot be used in OpenMP for loop"
"'%0' statement cannot be used in OpenMP simd region"
"'%0' type not found; include <omp.h>"
"'%0' type qualifier%s1 on return type %plural{1:has|:have}1 no effect"
"'%0' type specifier is incompatible with C++98"
"'%0' variables must have global storage"
"'%0' will always be truncated; specified size is %1, but format string expands to at least %2"
"'%0' will always evaluate to 'true' in a manifestly constant-evaluated expression"
"'%0' will always overflow; destination buffer has size %1, but format string expands to at least %2"
"'%0' will always overflow; destination buffer has size %1, but size argument is %2"
"'%0' will always overflow; destination buffer has size %1, but the source string has length %2 (including NUL byte)"
"'%0' within '%1'"
"'%0': selected processor lacks floating point registers"
"'%0': unable to pass LLVM bit-code files to linker"
"'%0': unable to use AST files with this tool"
"'%0': unable to use module files with this tool"
"'%0(%select{source|sink:vec}1)' clause%select{|s}1 cannot be mixed with '%0(%select{sink:vec|source}1)' clause%select{s|}1"
"'%1' attribute on property %0 does not match the property inherited from %2"
"'%1' cannot be used in %select{a constructor|a destructor|the 'main' function|a constexpr function|a function with a deduced return type|a varargs function|a consteval function}0"
"'%select{#|#@}0' is not followed by a macro parameter"
"'%select{%select{memcpy|wmemcpy}1|%select{memmove|wmemmove}1}0' not supported: %select{size to copy (%4) is not a multiple of size of element type %3 (%5)|source is not a contiguous array of at least %4 elements of type %3|destination is not a contiguous array of at least %4 elements of type %3}2"
"'%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument"
"'%select{--|++}0' on an object of complex type is a C2y extension"
"'%select{--|++}0' on an object of complex type is incompatible with C standards before C2y"
"'%select{\\|@}0%1' command does not terminate a verbatim text block"
"'%select{\\|@}0%1' command has %plural{0:no|:%2}2 word argument%s2, expected %3"
"'%select{\\|@}0%1' command used in a comment that is attached to a %select{function returning void|constructor|destructor|method returning void}2"
"'%select{\\|@}0%1' command used in a comment that is not attached to a function or method declaration"
"'%select{\\|@}0%select{classdesign|coclass|dependency|helper|helperclass|helps|instancesize|ownership|performance|security|superclass}1' command should not be used in a comment attached to a non-container declaration"
"'%select{\\|@}0%select{class|interface|protocol|struct|union}1' command should not be used in a comment attached to a non-%select{class|interface|protocol|struct|union}2 declaration"
"'%select{\\|@}0%select{function|functiongroup|method|methodgroup|callback}1' command should be used in a comment attached to %select{a function|a function|an Objective-C method|an Objective-C method|a pointer to function}2 declaration"
"'%select{\\|@}0param' command used in a comment that is not attached to a function declaration"
"'%select{\\|@}0tparam' command used in a comment that is not attached to a template declaration"
"'%select{auto|decltype(auto)}0' in return type deduced as %1 here but deduced as %2 in earlier return statement"
"'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}0' argument cannot refer to a union member"
"'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}0' argument must be a simple declaration reference"
"'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}0' cannot be applied to a union member"
"'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}0' only applies to pointers%select{ or C99 flexible array members|||}0%select{|; did you mean to use 'counted_by'?}1"
"'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}0' requires a non-boolean integer type argument"
"'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}1' field %0 isn't within the same struct as the annotated %select{pointer|flexible array}2"
"'%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}4' %select{cannot|should not}3 be applied to %select{a pointer with pointee|an array with element}0 of unknown size because %1 is %select{an incomplete type|a sizeless type|a function type|a struct type with a flexible array member%select{|. This will be an error in a future compiler version}3}2"
"'%select{if|switch}0' initialization statements are a C++17 extension"
"'%select{make_unsigned|make_signed}0' is only compatible with non-%select{bool|_BitInt(1)}1 integers and enum types, but was given %2%select{| whose underlying type is %4}3"
"'%select{memcpy|wmemcpy}0' between overlapping memory regions"
"'%select{pure|const}0' attribute on function returning 'void'; attribute ignored"
"'%select{trivially_relocatable_if_eligible|replaceable_if_eligible}0' keyword is a C++2c extension"
"'%select{trivially_relocatable|replaceable}0_if_eligible' keyword is incompatible with standards before C++2c"
"'%select{|short|long|long long}0 %1' is invalid"
"'&&' of a value and its negation always evaluates to false"
"'&&' within '||'"
"'&' cannot precede a capture when the capture default is '&'"
"'&' must precede a capture when the capture default is '='"
"'*' query has already been specified"
"'--hip-path' must be specified when offloading to SPIR-V unless '-nogpuinc' is given"
"'->' applied to return value of the operator->() declared here"
"'-fopenmp-targets' must be used in conjunction with a '-fopenmp' option compatible with offloading; e.g., '-fopenmp=libomp' or '-fopenmp=libiomp5'"
"'-fsanitize=memtag-stack' requires hardware support (+memtag). For Armv8 or Armv9, try compiling with -march=armv8a+memtag or -march=armv9a+memtag"
"'-ftrivial-auto-var-init-max-size=*' is used without '-ftrivial-auto-var-init=zero' or '-ftrivial-auto-var-init=pattern'"
"'-ftrivial-auto-var-init-max-size=*' only accepts positive integers (in bytes)"
"'-ftrivial-auto-var-init-stop-after=*' is used without '-ftrivial-auto-var-init=zero' or '-ftrivial-auto-var-init=pattern'"
"'-ftrivial-auto-var-init-stop-after=*' only accepts positive integers"
"'-fuse-ld=' taking a path is deprecated; use '--ld-path=' instead"
"'-mbranch-protection=' option is incompatible with the '%0' architecture"
"'-mindirect-jump=%0' is unsupported with the '%1' architecture"
"'-x %0' after last input file has no effect"
"'.  Try: '"
"'...' as the only parameter of a function is incompatible with C standards before C23"
"'...' in this location creates a C-style varargs function%select{, not a function parameter pack|}0"
"'...' must %select{immediately precede declared identifier|be innermost component of anonymous pack declaration}0"
"'/*' within block comment"
"'/U%0' treated as the '/U' option"
"':' without preceding '?'"
"'<::' is treated as digraph '<:' (aka '[') followed by ':' in C++98"
"'<=>' is a single token in C++20; add a space to avoid a change in behavior"
"'<=>' operator is incompatible with C++ standards before C++20"
"'= %select{default|delete}0' is a function definition and must occur in a standalone declaration"
"'= delete' with a message is a C++2c extension"
"'= delete' with a message is incompatible with C++ standards before C++2c"
"'@encode' of incomplete type %0"
"'@end' appears where closing brace '}' is expected"
"'@end' must appear in an Objective-C context"
"'NSObject' attribute is for pointer types only"
"'NSObject' attribute may be put on a typedef only; attribute is ignored"
"'[[%select{nodiscard|gnu::warn_unused_result}0]]' attribute ignored when applied to a typedef; consider using '__attribute__((warn_unused_result))' or '[[clang::warn_unused_result]]' instead"
"'[[carries_dependency]]' attribute only allowed on parameter in a function declaration or lambda"
"'[]' after delete interpreted as 'delete[]'; add parentheses to treat this as a lambda-expression"
"'_BitInt' %select{vector|matrix}0 element width must be a power of 2"
"'_BitInt' in %select{C17 and earlier|C++}0 is a Clang extension"
"'_BitInt' suffix for literals is a C23 extension"
"'_BitInt' suffix for literals is a Clang extension"
"'_BitInt' suffix for literals is incompatible with C standards before C23"
"'_Complex %0' is invalid"
"'_Countof' requires an argument of array type; %0 invalid"
"'_ExtInt' is deprecated; use '_BitInt' instead"
"'_Noreturn' can only appear on functions"
"'_Noreturn' keyword must precede function declarator"
"'_Sat' specifier is only valid on '_Fract' or '_Accum', not '%0'"
"'_Static_assert' with no message is a C23 extension"
"'_Static_assert' with no message is incompatible with C standards before C23"
"'__FLT_EVAL_METHOD__' cannot be expanded inside a scope containing '#pragma clang fp eval_method'"
"'__auto_type' is a GNU extension"
"'__builtin_bit_cast' %select{source|destination}0 type must be trivially copyable"
"'__builtin_choose_expr' requires a constant expression"
"'__builtin_counted_by_ref' argument cannot have side-effects"
"'__builtin_counted_by_ref' argument must reference a flexible array member"
"'__builtin_ms_va_start' used in System V ABI function"
"'__clang__' is a predefined macro name, not an attribute scope specifier; did you mean '_Clang' instead?"
"'__clang_arm_builtin_alias' attribute can only be applied to an ARM builtin"
"'__clang_arm_mve_strict_polymorphism' attribute can only be applied to an MVE/NEON vector type"
"'__declspec' attributes are not enabled; use '-fdeclspec' or '-fms-extensions' to enable support for __declspec attributes"
"'__declspec(dllexport)' cannot be applied to more than one default constructor in %0"
"'__declspec(thread)' applied to variable that already has a thread-local storage specifier"
"'__funcref' attribute can only be applied to a function pointer type"
"'__kindof' specifier cannot be applied to non-object type %0"
"'__kindof' type specifier must precede the declarator"
"'__leave' statement not in __try block"
"'__local' variable cannot have an initializer"
"'__pixel' must be preceded by '__vector'.  '%0' declaration specifier not allowed here"
"'__ptrauth' qualification mismatch%diff{ ($ and $)|}0,1"
"'__ptrauth' qualifier must take between 1 and 3 arguments"
"'__ptrauth' qualifier only applies to pointer or pointer sized integer types; %0 is invalid"
"'__super' cannot be used with a using declaration"
"'__thread' before '%0'"
"'abi_tag' %0 missing in original declaration"
"'abi_tag' attribute on %select{non-inline|anonymous}0 namespace ignored"
"'abstract' keyword is a Microsoft extension"
"'adjust_arg' argument %0 used in multiple clauses"
"'align_value' attribute requires integer constant"
"'alignas' is incompatible with C++98"
"'aligned' attribute requires integer constant"
"'alignof' on an incomplete array type is a C2y extension"
"'alignof' on an incomplete array type is incompatible with C standards before C2y"
"'append_args' is not allowed with varargs functions"
"'assign' property of object type may become a dangling reference; consider using 'unsafe_unretained'"
"'atomic capture' with a compound statement only supports two statements"
"'auto' as a functional-style cast is incompatible with C++ standards before C++23"
"'auto' deduced as 'id' in declaration of %0"
"'auto' return without trailing return type; deduced return types are a C++14 extension"
"'auto' storage class specifier is not permitted in C++11, and will not be supported in future releases"
"'auto' storage class specifier is redundant and incompatible with C++11"
"'auto' type specifier is a %select{C++11|HLSL 202y}0 extension"
"'auto' type specifier is incompatible with C++98"
"'auto' variable template instantiation is not allowed"
"'begin' and 'end' returning different types (%0 and %1) is a C++17 extension"
"'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17"
"'break' is bound to loop, GCC binds it to switch"
"'break' statement not in loop or switch statement"
"'break' will never be executed"
"'callback' argument at position %0 references unavailable implicit 'this'"
"'callback' attribute argument %0 is not a known function parameter"
"'callback' attribute callee does not have function type"
"'callback' attribute callee may not be variadic"
"'callback' attribute references function of type %0 which expects %1 %plural{1:argument|:arguments}1 but attribute specifies %2 parameter index %plural{1:argument|:arguments}2"
"'callback' attribute specifies invalid callback callee"
"'callback' attribute specifies no callback callee"
"'called_once' attribute only applies to function-like parameters"
"'case' statement not in switch statement"
"'char8_t' type specifier is incompatible with C++ standards before C++20"
"'cleanup' argument %select{|%1 |%1 }0is not a %select{||single }0function"
"'cleanup' function %0 must take 1 parameter"
"'cleanup' function %0 parameter has %diff{type $ which is incompatible with type $|incompatible type}1,2"
"'cmse_nonsecure_entry' cannot be applied to functions with internal linkage"
"'co_await' modifier can only be applied to range-based for loop"
"'const' attribute imposes more restrictions; 'pure' attribute ignored"
"'consteval' specifier is incompatible with C++ standards before C++20"
"'constexpr' can only be used in variable declarations"
"'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior"
"'constexpr' on lambda expressions is a C++17 extension"
"'constexpr' specifier is incompatible with C++98"
"'constinit' specifier added after initialization of variable"
"'constinit' specifier is incompatible with C++ standards before C++20"
"'constinit' specifier missing on initializing declaration of %0"
"'continue' statement not in loop statement"
"'copy' attribute must be specified for the block property when -fobjc-gc-only is specified"
"'counted_by' cannot refer to the flexible array member %0"
"'counted_by' on arrays only applies to C99 flexible array members"
"'cpu_dispatch' function redeclared with different CPUs"
"'decltype' type specifier is incompatible with C++98"
"'decltype(auto)' can only be used as a return type in a function declaration"
"'decltype(auto)' cannot be combined with other type specifiers"
"'decltype(auto)' not allowed here"
"'decltype(auto)' type specifier is a C++14 extension"
"'decltype(auto)' type specifier is incompatible with C++ standards before C++14"
"'default' clause for 'metadirective' is deprecated; use 'otherwise' instead"
"'default' statement not in switch statement"
"'defined' cannot appear within this context"
"'defined' cannot be used as a macro name"
"'delete%select{|[]}0' applied to a pointer that was allocated with 'new%select{[]|}0'; did you mean 'delete%select{[]|}0'?"
"'delete' applied to a pointer-to-array type %0 treated as 'delete[]'"
"'delete' cannot delete objects of type %0 in address space '%1'"
"'depend' clause for 'ordered' is deprecated; use 'doacross' instead"
"'depend' clause requires the 'targetsync' interop type"
"'deprecated' attribute on anonymous namespace ignored"
"'device_type(%0)' does not match previously specified 'device_type(%1)' for the same declaration"
"'diagnose_if' is a clang extension"
"'dllexport' attribute ignored on explicit instantiation definition"
"'enable_if' is a clang extension"
"'explicit' can only appear on non-static member functions"
"'explicit' can only be applied to a constructor or conversion function"
"'explicit' can only be specified inside the class definition"
"'explicit' is not permitted on top-level modules"
"'extern' variable has an initializer"
"'extern' variable may not be referenced by '%0' clause on an OpenACC 'declare' directive"
"'flush' directive with memory order clause '%0' cannot have the list"
"'for co_await' belongs to CoroutineTS instead of C++20, which is deprecated"
"'friend' must appear first in a non-function declaration"
"'friend' used outside of class"
"'gnu_inline' attribute requires function to be marked 'inline', attribute ignored"
"'gnu_inline' attribute without 'extern' in C++ treated as externally available, this changed in Clang 10"
"'hybrid_patchable' is ignored on functions without external linkage"
"'inline' can only appear on functions%select{| and non-local variables}0"
"'inscan' modifier can be used only in 'omp for', 'omp simd', 'omp for simd', 'omp parallel for', or 'omp parallel for simd' directive"
"'internal_linkage' attribute on a non-static local variable is ignored"
"'lifetime_capture_by' argument references itself"
"'lifetime_capture_by' argument references unavailable implicit 'this'"
"'lifetime_capture_by' attribute argument %0 is not a known function parameter; must be a function parameter, 'this', 'global' or 'unknown'"
"'lifetime_capture_by' attribute specifies no capturing entity"
"'lifetimebound' attribute cannot be applied to a %select{constructor|destructor}0"
"'lifetimebound' attribute cannot be applied to a parameter of a function that returns void; did you mean 'lifetime_capture_by(X)'"
"'lifetimebound' attribute cannot be applied to an implicit object parameter of a function that returns void; did you mean 'lifetime_capture_by(X)'"
"'lifetimebound' attribute cannot be applied; %select{non-|static |explicit object }0member function has no implicit object parameter"
"'linear' clause cannot be specified along with 'ordered' clause with a parameter"
"'long long' is a C++11 extension"
"'long long' is an extension when C99 mode is not enabled"
"'long long' is incompatible with C++98"
"'main' cannot be a multiversioned function"
"'main' is not allowed to be declared %select{constexpr|consteval}0"
"'main' is not allowed to be declared _Noreturn"
"'main' is not allowed to be declared inline"
"'main' is not allowed to be declared static"
"'main' is not allowed to be declared variadic"
"'main' is not allowed to be deleted"
"'main' must return 'int'"
'\'main\' should not be \'extern "%select{C|C++}0"\''
"'main' should not be declared static"
"'malloc' argument %0 must take a pointer type as its first argument"
"'malloc' argument %select{for deallocator |%1 |%1 }0is not a %select{||single }0function"
"'malloc' argument '%0' refers to non-pointer type %1 of %2"
"'mig_server_routine' attribute only applies to routines that return a kern_return_t"
"'module' declaration found while building header unit"
"'module' declaration found while building module from module map"
"'module;' introducing a global module fragment can appear only at the start of the translation unit"
"'musttail' attribute for this call is impossible because %select{long calls cannot be tail called on PPC|indirect calls cannot be tail called on PPC|external calls cannot be tail called on PPC}0"
"'musttail' attribute is not supported on AIX"
"'mutable' and 'const' cannot be mixed"
"'mutable' can only be applied to member variables"
"'mutable' cannot be applied to functions"
"'mutable' cannot be applied to references"
"'mutable' on a reference type is a Microsoft extension"
"'mutexinoutset' modifier not allowed in 'depend' clause on 'taskwait' directive"
"'new' cannot allocate an array of %0 with no explicit ownership"
"'new' cannot allocate object of variably modified type %0"
"'new' cannot allocate objects of type %0 in address space '%1'"
"'new' expression with placement arguments refers to non-placement 'operator delete'"
"'nocf_check' attribute ignored; use -fcf-protection to enable the attribute"
"'noderef' can only be used on an array or pointer type"
"'noexcept' can only be used in a compound requirement (with '{' '}' around the expression)"
"'nonmonotonic' modifier can only be specified with 'dynamic' or 'guided' schedule kind"
"'nonnull' attribute applied to function with no pointer arguments"
"'nonnull' attribute when used on parameters takes no arguments"
"'not_tail_called' attribute prevents being called as a tail call"
"'nothrow' attribute conflicts with exception specification; attribute ignored"
"'nowait' clause is here"
"'nullptr' is a C23 extension"
"'nullptr' is incompatible with C++98"
"'objc_bridge(id)' is only allowed on structs and typedefs of void pointers"
"'objc_class_stub' attribute cannot be specified on a class that does not have the 'objc_subclassing_restricted' attribute"
"'objc_designated_initializer' attribute only applies to init methods of interface or class extension declarations"
"'objc_direct' attribute cannot be applied to %select{methods|properties}0 declared in an Objective-C protocol"
"'objc_externally_retained' can only be applied to local variables %select{of retainable type|with strong ownership}0"
"'objc_independent_class' attribute may be put on Objective-C object pointer type only; attribute is ignored"
"'objc_independent_class' attribute may be put on a typedef only; attribute is ignored"
"'offsetof' on non-POD type %0"
"'offsetof' on non-standard-layout type %0"
"'omp_interop_t' must be defined when 'append_args' clause is used; include <omp.h>"
"'ompx_attribute' clause only allows 'amdgpu_flat_work_group_size', 'amdgpu_waves_per_eu', and 'launch_bounds'; %0 is ignored"
"'ompx_bare' clauses requires explicit grid size via 'num_teams' and 'thread_limit' clauses"
"'operator new' provided by %0 is not usable with the function signature of %1"
"'operator->' declared here produces an object of type %0"
"'ordered' clause with a parameter cannot be specified in '#pragma omp %0' directive"
"'ordered' clause%select{| with specified parameter}0"
"'ordered' directive %select{without any clauses|with 'threads' clause}0 cannot be closely nested inside ordered region with specified parameter"
"'ordered' directive with '%0' clause cannot be closely nested inside ordered region without specified parameter"
"'overloadable' function %0 must have a prototype"
"'ownership_returns' attribute index does not match; here it is %0"
"'ownership_returns' attribute only applies to functions that return a pointer"
"'ownership_takes' attribute class does not match; here it is '%0'"
"'packed' attribute was ignored on bit-fields with single-byte alignment in older versions of GCC and Clang"
"'reduction' clause cannot be used with 'nogroup' clause"
"'reduction' clause not allowed with '#pragma omp loop bind(teams)'"
"'reduction' clause with 'inscan' modifier is used here"
"'reduction' clause with 'task' modifier allowed only on non-simd parallel or worksharing constructs"
"'register' storage class specifier is deprecated and incompatible with C++17"
"'register' storage specifier on @catch parameter will be ignored"
"'regparm' is not valid on this platform"
"'regparm' parameter must be between 0 and %0 inclusive"
"'reinterpret_cast' %select{from|to}3 class %0 %select{to|from}3 its %select{virtual base|base at non-zero offset}2 %1 behaves differently from 'static_cast'"
"'require_constant_initialization' attribute added after initialization of variable"
"'restrict' qualifier on an array of pointers is a C23 extension"
"'restrict' qualifier on an array of pointers is incompatible with C standards before C23"
"'return' will never be executed"
"'sealed' keyword is a Microsoft extension"
"'selectany' can only be applied to data items with external linkage"
"'sentinel' attribute only supported for variadic %select{functions|blocks}0"
"'sentinel' attribute requires named arguments"
"'sentinel' parameter 1 less than zero"
"'sentinel' parameter 2 not 0 or 1"
"'size' argument to bzero is '0'"
"'size_t' suffix for literals is a C++23 extension"
"'size_t' suffix for literals is a C++23 feature"
"'size_t' suffix for literals is incompatible with C++ standards before C++23"
"'static' can only be specified inside the class definition"
"'static' function %0 declared in header file should be declared 'static inline'"
"'static' may not be used with an unspecified variable length array size"
"'static' may not be used without an array size"
"'static' member function %0 overrides a virtual function in a base class"
"'static_assert' declarations are incompatible with C++98"
"'static_assert' with a user-generated message is a C++26 extension"
"'static_assert' with a user-generated message is incompatible with C++ standards before C++26"
"'static_assert' with no message is a C++17 extension"
"'static_assert' with no message is incompatible with C++ standards before C++17"
"'std::allocator<...>::deallocate' used to delete a null pointer"
"'std::source_location::__impl' must be standard-layout and have only two 'const char *' fields '_M_file_name' and '_M_function_name', and two integral fields '_M_line' and '_M_column'"
"'std::source_location::__impl' was not found; it must be defined before '__builtin_source_location' is called"
"'super' is only valid in a method body"
"'swift_async' completion handler parameter must have block type returning 'void', type here is %0"
"'swift_error_result' parameter must follow 'swift_context' parameter"
"'swift_indirect_result' parameters must be first parameters of function"
"'switch' missing 'default' label"
"'sycl_kernel' attribute only applies to a function template with at least two template parameters"
"'sycl_kernel_entry_point' attribute cannot be added to a function after the function is defined"
"'sycl_kernel_entry_point' attribute cannot be applied to a %select{non-static member function|variadic function|deleted function|defaulted function|constexpr function|consteval function|function declared with the 'noreturn' attribute|coroutine|function defined with a function try block}0"
"'sycl_kernel_entry_point' attribute only applies to functions with a 'void' return type"
"'sycl_kernel_entry_point' attribute only applies to functions with a non-deduced 'void' return type"
"'sycl_kernel_entry_point' kernel name argument conflicts with a previous declaration"
"'sycl_kernel_entry_point' kernel name argument does not match prior declaration%diff{: $ vs $|}0,1"
"'target_clones' attribute does not match previous declaration"
"'target_clones' multiversioning requires a default target"
"'template' cannot be used after a declarative nested name specifier"
"'template' keyword not permitted after 'using' keyword"
"'template' keyword not permitted here"
"'template' keyword not permitted in destructor name"
"'template' keyword outside of a template"
"'template<>' header not required for explicitly-specialized class %0 declared here"
"'this' argument to member function %0 has type %1, but function is not marked %select{const|restrict|const or restrict|volatile|const or volatile|volatile or restrict|const, volatile, or restrict}2"
"'this' argument to member function %0 is an %select{lvalue|rvalue}1, but function has %select{non-const lvalue|rvalue}2 ref-qualifier"
"'this' cannot be %select{implicitly |}0captured in this context"
"'this' cannot be captured by reference"
"'this' cannot be%select{| implicitly}0 used in a static member function declaration"
"'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0"
"'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true"
"'this' pointer references not allowed in naked functions"
"'trivial_abi' cannot be applied to %0"
"'trivial_abi' is disallowed on %0 because %select{its copy constructors and move constructors are all deleted|it is polymorphic|it has a base of a non-trivial class type|it has a virtual base|it has a __weak field|it has a field of a non-trivial class type|it has an address-discriminated '__ptrauth' field}1"
"'true' is not defined, evaluates to 0"
"'type_tag_for_datatype' attribute requires the initializer to be an %select{integer|integral}0 constant expression"
"'type_tag_for_datatype' attribute requires the initializer to be an %select{integer|integral}0 constant expression that can be represented by a 64 bit integer"
"'typeid' of incomplete type %0"
"'typeid' of variably modified type %0"
"'typename' is redundant; base classes are implicitly types"
"'typename' keyword used on a non-type"
"'typename' outside of a template is a C++11 extension"
"'typename' outside of a template is incompatible with C++98"
"'unavailable' availability overrides all other availability information"
"'using namespace' is not allowed in classes"
"'using_if_exists' attribute cannot be applied to an inheriting constructor"
"'va_start' cannot be used in a captured statement"
"'va_start' cannot be used outside a function"
"'va_start' used in %select{System V|Win64}0 ABI function"
"'va_start' used in function with fixed args"
"'vec_step' requires built-in scalar or vector type, %0 invalid"
"'virtual' can only appear on non-static member functions"
"'virtual' can only be specified inside the class definition"
"'virtual' cannot be specified on member function templates"
"'void' as parameter must not have type qualifiers"
"'void' must be the first and only parameter if specified"
"'||' of a value and its negation always evaluates to true"
"'~' in destructor name should be after nested name specifier"
"(Deprecated) Controls whether '-Winvalid-gnu-asm-cast' defaults to an error or a warning"
"(For new pass manager) 'per-pass': one report for each pass; 'per-pass-run': one report for each pass invocation"
'(integrated-as) Emit an object file which can be used with an incremental linker'
'(integrated-as) Emit an object file which cannot be used with an incremental linker'
'(integrated-as) Relax all machine instructions'
"(skipping %0 'operator->'%s0 in backtrace)"
'(skipping %0 call%s0 in backtrace; use -fconstexpr-backtrace-limit=0 to see all)'
'(skipping %0 context%s0 in backtrace; use -ftemplate-backtrace-limit=0 to see all)'
'*no default*'
'--rtlib=libgcc requires --unwindlib=libgcc'
'-E or -x required when input is from standard input'
'-O4 is equivalent to -O3'
'-Wa,--allow-experimental-crel must be specified to use -Wa,--crel. CREL is experimental and uses a non-standard section type code'
'-code-completion-at=<file>:<line>:<column> requires <line> and <column> to be integers greater than zero'
'-dealloc is being overridden in a category'
'-dependency-file requires at least one -MT or -MQ option'
'-emit-llvm cannot be used when linking'
'-fdelayed-template-parsing is deprecated after C++20'
'-fembed-bitcode is not supported on versions of iOS prior to 6.0'
'-fexperimental-omit-vtable-rtti call only be used with -fno-rtti'
"-fglobal-isel support for the '%0' architecture is incomplete"
'-fglobal-isel support is incomplete for this architecture at the current optimization level'
'-fjmc works only for ELF; option ignored'
'-fobjc-arc is not supported on platforms using the legacy runtime'
'-fobjc-arc is not supported on versions of OS X prior to 10.6'
'-fobjc-weak is not supported in Objective-C garbage collection'
'-fobjc-weak is not supported on the current deployment target'
'-fsanitize-address-field-padding applied to %0'
'-fsanitize-address-field-padding ignored for %0 because it %select{is not C++|is packed|is a union|is trivially copyable|has trivial destructor|is standard layout|is in a ignorelisted file|is ignorelisted}1'
"-ftest-module-file-extension argument '%0' is not of the required form 'blockname:major:minor:hashed:user info'"
'-ftrivial-auto-var-init-stop-after=%0 has been enabled to limit the number of times ftrivial-auto-var-init=%1 gets applied.'
'-header-include-filtering=%0 requires a compatible value for -header-include-format'
'-header-include-format=%0 requires a compatible value for -header-include-filtering'
'-mcmse is not supported for %0'
'-mharden-sls is only supported on armv7-a or later'
'-mtocdata option is ignored for %0 because %1'
'-mxcoff-roptr is not supported with -shared'
'-mxcoff-roptr is supported only with -fdata-sections'
'-verify prefixes must start with a letter and contain only alphanumeric characters, hyphens, and underscores'
'.dwo output filename'
'// comments are not allowed in this language'
'/arm64EC has been overridden by specified target: %0; option ignored'
'32-bit targets are not supported when building for Mac Catalyst'
'90th percentile durations'
'99th percentile durations'
": Did you mean '"
': Not enough positional command line arguments specified!\n'
': See: '
': Too many positional arguments specified!\n'
': Unknown '
'<INDEX FILE>'
'<Line Number>'
'<Line Number>.<Discriminator>'
'<Line Number>:<Column Number>'
'<Line Number>:<Column Number>.<Discriminator> (default)'
'<PROJECT ROOT>'
'<Search Root Directory>'
'<Source file>'
'<Source files>'
'<arguments to be passed to front end>...'
'<base profile file>'
'<check-file>'
'<data file>'
'<demangler-path>|<demangler-option>'
'<destination>'
'<diagnostic-name>'
'<executable>'
'<fdata1> [<fdata2>]...'
'<filename...>'
'<filename>'
'<first file>'
'<from>,<to> Map coverage data paths to local source file paths'
'<gcc-tool arguments>...'
'<globals to compare>'
'<gpu executable>'
'<high>,<low> value indicate thresholds for high and lowcoverage watermark'
'<input .ll file>'
'<input IR file>'
'<input PDB file>'
'<input PDB files>'
'<input YAML file>'
'<input bitcode file>'
'<input bitcode files>'
'<input bitcode>'
'<input brainf>'
'<input file #1>'
'<input file #2>'
'<input file>'
'<input files>'
'<input kernel json file>'
'<input llvm ll/bc file>'
'<input llvm ll/bc files>'
'<input object files or .dSYM bundles>'
'<input object files>'
'<input symbols>'
'<input toy file>'
'<input>'
'<list of one or more header list files>'
'<maxsize>'
'<module summary index>'
'<opt arguments>...'
'<output file>'
'<path to index file | remote:server.address>'
'<profdata-file>'
'<program arguments>...'
'<program to run>'
'<safe-tool arguments>...'
'<second file>'
'<source0> [... <sourceN>]'
'<source>'
"<start line>:<end line> - format a range of\nlines (both 1-based).\nMultiple ranges can be formatted by specifying\nseveral -lines arguments.\nCan't be used with -offset and -length.\nCan only be used with one input file."
'<symbol-file>'
'<test profile file>'
'<tool arguments>...'
'<topdown|bottomup>'
'<weight>,<filename>'
'<xray fdr mode log>'
'<xray log file 1>'
'<xray log file 2>'
'<xray log file>'
'<xray trace>'
'= *cannot print option value*\n'
'= *unknown option value*\n'
'?: operator with omitted middle operand cannot be mangled'
'@%0 must be followed by a number to form an NSNumber object'
"@catch parameter cannot have storage specifier '%0'"
'@catch parameter declarator cannot be qualified'
'@catch parameter is not a pointer to an interface type'
'@defs is not supported in Objective-C++'
'@implementation cannot have type parameters'
'@implementation declaration cannot be protocol qualified'
"@import of module '%0' in implementation of '%1'; use #import"
'@protocol is using a forward protocol declaration of %0'
'@selector expression formed with direct selector %0'
'@selector expression formed with potentially direct selector %0'
'@synchronized requires an Objective-C object type (%0 invalid)'
"@synthesize not allowed in a category's implementation"
'@synthesize not allowed on a class property %0'
'@throw (rethrow) used outside of a @catch block'
'@throw requires an Objective-C object type (%0 invalid)'
'@try statement without a @catch and @finally clause'
'A CSV file containing (JITDylib, Function) pairs tospeculatively look up'
'A No-Op Barrier Pass'
'A boolean option to show CFG dag or text with block profile counts and branch probabilities right after PGO profile annotation step. The profile counts are computed using branch probabilities from the runtime profile data and block frequency propagation algorithm. To view the raw counts from the profile, use option -pgo-view-raw-counts instead. To limit graph display to only one function, use filtering option -view-bfi-func-name.'
'A boolean option to show CFG dag or text with raw profile counts from profile data. See also option -pgo-view-counts. To limit graph display to only one function, use filtering option -view-bfi-func-name.'
'A comma-separated list of regexes to match against suffix of a header, and disable analysis if matched.'
'A comma-separated list of regexes to match against suffix of a header. Only headers that match will be analyzed.'
'A count is cold if it is below the minimum count to reach this percentile of total counts.'
'A count is hot if it exceeds the minimum count to reach this percentile of total counts.'
'A debug option to add additional penalty to the computed one.'
'A file containing a list of files to process, one per line.'
'A file containing list of basic blocks to extract'
'A file containing list of symbol names to preserve'
'A file containing regexes of symbol names that are not expected to be updated when changing namespaces around them.'
'A file in which to write minimized bitcode for the thin link only'
'A fixed cold count that overrides the count derived from profile-summary-cutoff-cold'
'A fixed hot count that overrides the count derived from profile-summary-cutoff-hot'
"A flag that overrides the target's expected cost for an instruction to a single constant value. Mostly useful for getting consistent testing."
"A flag that overrides the target's max interleave factor for scalar loops."
"A flag that overrides the target's max interleave factor for vectorized loops."
"A flag that overrides the target's number of scalar registers."
"A flag that overrides the target's number of vector registers."
"A flag that overrides the target's preferred addressing mode."
'A function is considered hot for staleness error check if its total sample count is above the specified percentile'
'A function name, assumed to be global, which will be treated as the root of an interesting graph, which will be profiled independently from other similar graphs.'
'A huge scheduling region will have maps reduced by this many nodes at a time. Defaults to HugeRegion / 2.'
'A key=value pair. Replace __nvvm_reflect(name) with value.'
'A lexical block (Function, Class, etc.).'
"A list of mangled vtable type info names. Classes specified by the type info names and their derived ones will not be vtable-ICP'ed. Useful when the profiled types and actual types in the optimized binary could be different due to profiling limitations. Type info names are those string literals used in LLVM type metadata"
'A list of symbol names to preserve'
"A multiplier on top of cycle savings to decide whether the savings won't justify the cost"
"A string that'll be prepended to all log statements. Useful when running multiple instances on same host."
'A textual (comma separated) description of the pass pipeline e.g.,-passes="foo,bar", to have analysis passes available before a pass, add "require<foo-analysis>". See https://llvm.org/docs/NewPassManager.html#invoking-opt for more details on the pass pipeline syntax. '
'A textual description of the alias analysis pipeline for handling managed aliasing queries'
'A textual description of the cgscc pass pipeline inserted at the CGSCCOptimizerLate extension point into default pipelines'
'A textual description of the function pass pipeline inserted at the Peephole extension points into default pipelines'
'A textual description of the function pass pipeline inserted at the ScalarOptimizerLate extension point into default pipelines'
'A textual description of the function pass pipeline inserted at the VectorizerEnd extension point into default pipelines'
'A textual description of the function pass pipeline inserted at the VectorizerStart extension point into default pipelines'
'A textual description of the loop pass pipeline inserted at the LateLoopOptimizations extension point into default pipelines'
'A textual description of the loop pass pipeline inserted at the LoopOptimizerEnd extension point into default pipelines'
'A textual description of the module pass pipeline inserted at the EarlySimplification extension point into default pipelines'
'A textual description of the module pass pipeline inserted at the FullLinkTimeOptimizationEarly extension point into default pipelines'
'A textual description of the module pass pipeline inserted at the FullLinkTimeOptimizationLast extension point into default pipelines'
'A textual description of the module pass pipeline inserted at the OptimizerEarly extension point into default pipelines'
'A textual description of the module pass pipeline inserted at the OptimizerLast extension point into default pipelines'
'A textual description of the module pass pipeline inserted at the PipelineStart extension point into default pipelines'
'A textual description of the pass pipeline for testing'
"A textual description of the pass pipeline, same as what's passed to `opt -passes`."
"A textual description of the pass pipeline. To have analysis passes available before a certain pass, add 'require<foo-analysis>'."
"A textual description of the pass pipeline. To have analysis passes available before a certain pass, add 'require<foo-analysis>'. '-passes' overrides the pass pipeline (but not all effects) from specifying '--opt-level=O?' (O2 is the default) to clang-linker-wrapper.  Be sure to include the corresponding 'default<O?>' in '-passes'."
'A threshold controls whether an indirect call will be specialized'
'A threshold of live range size which may cause high compile time cost in global splitting.'
'A throughput of the processor floating-point arithmetic units expressed in the number of vector fused multiply-add instructions per clock cycle.'
'A tile size for each loop dimension, filled with --polly-default-tile-size'
'A tile size for each loop dimension, filled with --polly-register-tile-size'
'A tool to bundle several input files of the specified type <type> \nreferring to the same source file but different targets into a single \none. The resulting file can also be unbundled into different files by \nthis tool if -unbundle is provided.\n'
'A tool to detect the presence of offloading devices on the system. \n\nThe tool will output each detected GPU architecture separated by a\nnewline character. If multiple GPUs of the same architecture are found\na string will be printed for each\n'
'A tool to format C/C++/Java/JavaScript/JSON/Objective-C/Protobuf/C# code.\n\nIf no arguments are specified, it formats the code from standard input\nand writes the result to the standard output.\nIf <file>s are given, it reformats the files. If -i is specified\ntogether with <file>s, the files are edited in-place. Otherwise, the\nresult is written to the standard output.\n'
'A tool to generate an optimization report from YAML optimization record files.\n'
'A utility for bundling several object files into a single binary.\nThe output binary can then be embedded into the host section table\nto create a fatbinary containing offloading code.\n'
'A utility used to launch unit tests built for a GPU target. This is\nintended to provide an intrface simular to cross-compiling emulators\n'
'AArch64 A57 FP Load-Balancing'
'AArch64 Assembly Printer'
'AArch64 Branch Targets'
'AArch64 CCMP Pass'
'AArch64 CondOpt Pass'
'AArch64 Conditional Branch Tuning'
'AArch64 Dead register definitions'
'AArch64 Instruction Selection'
'AArch64 Local Dynamic TLS Access Clean-up'
'AArch64 MI Peephole Optimization'
'AArch64 Pointer Authentication'
'AArch64 Post Coalescer Pass'
'AArch64 Promote Constant Pass'
'AArch64 SIMD instructions optimization pass'
'AArch64 Stack Tagging'
'AArch64 Stack Tagging PreRA Pass'
'AArch64 Store Pair Suppression'
'AArch64 compress jump tables pass'
'AArch64 fix for A53 erratum 835769'
'AArch64 homogeneous prolog/epilog lowering pass'
'AArch64 load / store optimization pass'
'AArch64 pseudo instruction expansion pass'
'AArch64 redundant copy elimination pass'
'AArch64 sls hardening pass'
'AArch64 speculation hardening pass'
'AArch64Arm64ECCallLowering'
"ABI '%0' is not supported for '%1'"
"ABI '%0' is not supported on CPU '%1'"
'AIX PPC Assembly Printer'
'AMD vector math library'
'AMDGPU Address space based Alias Analysis'
'AMDGPU Address space based Alias Analysis Wrapper'
'AMDGPU Assembly Printer'
'AMDGPU Attributor'
'AMDGPU CFG Structurizer'
'AMDGPU DAG->DAG Pattern Instruction Selection'
'AMDGPU GlobalISel divergence lowering'
'AMDGPU IR late optimizations'
'AMDGPU IR optimizations'
'AMDGPU Image Intrinsic Optimizer'
'AMDGPU Inline All Functions'
'AMDGPU Insert Delay ALU'
'AMDGPU Insert waits for SGPR read hazards'
'AMDGPU Kernel Attributes'
'AMDGPU Lower Kernel Arguments'
'AMDGPU Mark last scratch load'
'AMDGPU Pre-RA Long Branch Reg'
'AMDGPU Pre-RA optimizations'
'AMDGPU Preload Kernel Arguments'
'AMDGPU Preload Kernel Arguments Prolog'
'AMDGPU Printf lowering'
'AMDGPU Promote Kernel Arguments'
'AMDGPU Register Bank Legalize'
'AMDGPU Register Bank Select'
'AMDGPU Remove Incompatible Functions'
'AMDGPU Reserve WWM Registers'
'AMDGPU Rewrite Out Arguments'
'AMDGPU Software lowering of LDS'
'AMDGPU atomic optimizations'
'AMDGPU promote alloca to vector'
'AMDGPU promote alloca to vector or LDS'
'ANALYSIS'
'ANALYSIS_ALIASING'
'ANALYSIS_FP_COMMUTE'
'API notes replacement type %0 has a different size from original type %1'
'ARC %select{unused|__unsafe_unretained|__strong|__weak|__autoreleasing}0 lifetime qualifier on return type is ignored'
'ARC Assmebly Printer'
'ARC DAG->DAG Pattern Instruction Selection'
'ARC finalize branches'
'ARC forbids %select{implementation|synthesis}0 of %1'
'ARC forbids explicit message send of %0'
'ARC forbids flexible array members with retainable object type'
'ARC forbids synthesizing a property of an Objective-C object with unspecified ownership or storage attribute'
'ARC forbids use of %0 in a @selector'
'ARM Assembly Printer'
'ARM Branch Targets'
'ARM EHABI exceptions'
'ARM Execution Domain Fix'
'ARM Instruction Selection'
'ARM Low Overhead Loops pass'
'ARM MVE TailPred and VPT Optimisations pass'
'ARM MVE VPT block pass'
'ARM block placement'
'ARM constant island placement and branch shortening pass'
'ARM fix for Cortex-A57 AES Erratum 1742098'
'ARM load / store optimization pass'
'ARM pre- register allocation load / store optimization pass'
'ARM pseudo instruction expansion pass'
'ARM sls hardening pass'
'AST and IR generation'
'AVR Assembly Printer'
'AVR DAG->DAG Instruction Selection'
'AVR Shift Expansion'
'AVR pseudo instruction expansion pass'
"AVX vector %select{return|argument}0 of type %1 without '%2' enabled changes the ABI"
'Abbreviation for -input-style=delimited -pretty -log=verbose. Intended to simplify lit tests'
'Abort if an isl error is encountered'
'Abort if any reduction results in invalid IR'
'Abort when the max iterations for devirtualization CGSCC repeat pass is reached'
'Absolute error tolerated'
'Abstract subprograms'
'Accelerate framework'
'Accept a PCH file that was created with a different modules cache path'
'Accept a PCH file that was created with compiler errors'
'Accept a PCM file that was created with compiler errors'
'Accept in ARM, reject in Thumb'
'Accept in both ISAs, emit implicit ITs in Thumb'
'Accept non-standard constructs supported by the Borland compiler'
'Accept some non-standard constructs supported by the Microsoft compiler'
'Accept some non-standard constructs supported by the z/OS compiler'
'Access dynamic shadow through an ifunc global on platforms that support this'
'Act like old LiveDebugValues did'
'Action to perform on deprecated def'
'Action to perform:'
'Add !range metadata to NVVM intrinsics.'
'Add -rpath with architecture-specific resource directory to the linker flags. When --hip-link is specified, also add -rpath with HIP runtime library directory to the linker flags'
'Add .note.gnu.property with BTI to assembly files'
'Add .note.gnu.property with BTI to assembly files (AArch64 only)'
'Add <dir> to system include search path, as if in %INCLUDE%'
'Add AMDGPU uniform metadata'
'Add C++ implicit destructors to CFGs for all analyses'
'Add Contextual/Debug comments to all C++ predicates'
'Add DW_AT_linkage_name to function declaration DIEs referenced by DW_AT_call_origin attributes. Enabled by default for -gsce debugger tuning.'
'Add MIR Flow Sensitive Discriminators'
'Add OpenCL builtin function declarations (experimental)'
'Add TBAA tags to direct variables'
'Add TBAA tags to dummy arguments'
'Add TBAA tags to global variables'
'Add TBAA tags to local allocations.'
'Add __emutls_[vt]. variables for emultated TLS model'
'Add a call to __hwasan_add_frame_record for storing into the stack ring buffer'
'Add a note for each bug report to denote their analysis entry points'
"Add a preheader to a hardware loop if one doesn't exist"
"Add an attribute to a function. This can be a pair of 'function-name:attribute-name', to apply an attribute to a specific function. For example -force-attribute=foo:noinline. Specifying only an attribute will apply the attribute to every function in the module. This option can be specified multiple times."
'Add an implicit negative check with this pattern to every\npositive check. This can be used to ensure that no instances of\nthis pattern occur which are not matched by a positive pattern'
'Add block information to the output of -streams'
'Add comments to directives.'
'Add cs prefix to call and jmp to indirect thunk'
'Add debug loc information when generating tables for '
'Add dependent library'
'Add dir to the list of library search paths'
'Add directory to AFTER include search path'
'Add directory to QUOTE include search path'
'Add directory to SYSTEM framework search path'
'Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot'
'Add directory to SYSTEM include search path'
'Add directory to SYSTEM include search path, absolute paths are relative to -isysroot'
'Add directory to embed search path'
'Add directory to end of the SYSTEM include search path'
'Add directory to framework include search path'
'Add directory to include search path'
'Add directory to include search path with warnings suppressed'
'Add directory to library search path'
'Add directory to the API notes search path referenced by module name'
'Add directory to the C SYSTEM include search path'
'Add directory to the C++ SYSTEM include search path'
'Add directory to the ObjC SYSTEM include search path'
'Add directory to the ObjC++ SYSTEM include search path'
'Add directory to the end of the list of include search paths'
"Add directory to the internal system framework search path; these are assumed to not be user-provided and are used to model system and standard frameworks' paths."
'Add directory to the internal system include search path with implicit extern "C" semantics; these are assumed to not be user-provided and are used to model system and standard headers\' paths.'
"Add directory to the internal system include search path; these are assumed to not be user-provided and are used to model system and standard headers' paths."
'Add dirs in env var <var> to include search path with warnings suppressed'
'Add extra TOC register dependencies'
'Add informational comments to the .ll file'
'Add instruction count to a LSR cost model'
'Add library.'
'Add lifetime markers to generated constant size allocas'
'Add linker option'
'Add missing headers to depfile'
'Add no-alias annotation for instructions that are disambiguated by memchecks'
'Add printf calls that print the statement being executed'
'Add printf calls that print the values of all scalar values used in a statement. Requires -polly-codegen-trace-stmts.'
'Add printf calls that show the values loaded/stored.'
'Add prototypes to prototypes-less functions'
'Add relocations to function pointers to the current function'
'Add run-time performance monitoring'
'Add system library paths to library search paths'
'Add the view as compare context.'
'Additional IR scalar types (always includes i1, i8, i16, i32, i64, float and double)'
'Additional argument to append to the compiler command line'
'Additional argument to prepend to the compiler command line'
"Additional arguments to forward to LLVM's option processing"
"Additional arguments to forward to MLIR's option processing"
'Additional arguments to pass to the linker'
'Additional shared objects to load into executing programs'
'Address of the invoked server.'
'Address of the invoked server. Defaults to 0.0.0.0:50051'
'Address sinking in CGP using GEPs.'
"AddressSanitizer doesn't support linking with debug runtime libraries yet"
'Adjust basic block layout to better use TB[BH]'
'Adjust wave priority'
'AdvSIMD Scalar Operation Optimization'
'Advanced attributes alias.'
'Aggregate arguments to code-extracted functions'
'Aggregate stack times across threads'
'Aggressive extension optimization'
'Aggressively try to fuse everything'
'Algorithm to use for splitting basic blocks into multiple statements'
'Alias Analysis Pipeline'
'Alias for --'
'Alias for --blocks-x'
'Alias for --demangled-names'
'Alias for --dry-run'
'Alias for --help'
'Alias for --indirect-call-promotion'
'Alias for --input-files'
'Alias for --intermediate-format'
'Alias for --no-warn'
'Alias for --num-threads'
'Alias for --output'
'Alias for --output-dir'
'Alias for --perfdata'
'Alias for --perfscript'
'Alias for --remapping-file'
'Alias for --save-temps=cwd'
'Alias for --threads-x'
'Alias for --unsymbolized-profile'
'Alias for -Xclang'
'Alias for -Xclangas'
'Alias for -all-stacks'
'Alias for -check-prefix permitting multiple comma separated values'
'Alias for -color-edges'
'Alias for -deduce-sibling-calls'
'Alias for -deduce-sibling-calls-1'
'Alias for -deduce-sibling-calls-2'
'Alias for -deduce_sibling_calls'
'Alias for -edge-color'
'Alias for -edge-label'
'Alias for -fextend-variable-liveness=all.'
'Alias for -fsanitize-ignorelist='
'Alias for -help'
'Alias for -instr-map'
'Alias for -instr-map-1'
'Alias for -instr-map-2'
'Alias for -instr_map'
'Alias for -keep-going'
'Alias for -keep-going-1'
'Alias for -keep-going-2'
'Alias for -keep_going'
'Alias for -mllvm'
'Alias for -output'
'Alias for -output-format'
'Alias for -passes'
'Alias for -sort'
'Alias for -sortorder'
'Alias for -symbolize'
'Alias for -top'
'Alias for -version'
'Alias for -vertex-color'
'Alias for -vertex-label'
'Alias for -vertex-label-trun'
'Alias of -format'
'Align ARM NEON spills in prolog and epilog'
'Align branches within 32-byte boundaries to mitigate the performance impact of the Intel JCC erratum.'
'Align constant islands in code'
'Align doubles to two words in structs (x86 only)'
'Align selected branches (fused, jcc, jmp) within 32-byte boundary'
"Align selected instructions to mitigate negative performance impact of Intel's micro code update for errata skx102.  May break assumptions about labels corresponding to particular instructions, and should be used with caution."
'Aligned allocation/deallocation functions are unavailable'
'Alignment of bundle for binary files'
'All Pointer Authentication scanners'
"All compile commands come from LSP and 'compile_commands.json' files are ignored"
"All compile commands come from the 'compile_commands.json' files"
'All decisions not in replay are inlined'
'All decisions not in replay are not inlined'
'All decisions not in replay send to original advisor (default)'
'All edges.'
'All elements.'
'All implemented scanners'
'All input lines'
'All known subsections'
'All non-critical edges.'
'All of the above and take the minimum of measurements'
'All outputs.'
'All possible int comparisons in GPRs.'
'All suitable variables will have the TOC data transformation applied'
'All vtables have type infos'
'All warnings.'
'Allocate -frepack-arrays temporaries on the heap (default)'
'Allocate array temporaries on the heap (default)'
'Allocate from a slab of the given size (allowable suffixes: Kb, Mb, Gb. default = Kb)'
'Allocate memory upfront rather than on-demand'
'Allocate temporary arrays for -frepack-arrays in stack memory'
'Allocate to an enum type only as many bytes as it needs for the declared range of possible values'
"Allow '$' in identifiers"
'Allow (may be subject to certain conditions) conversion of memcpy to TP loop.'
'Allow AArch64 Local Dynamic TLS code generation'
'Allow DSE to optimize memory accesses.'
'Allow GNU-extension keywords regardless of language standard'
'Allow G_INSERT to be considered an artifact. Hack around AMDGPU test infinite loops.'
'Allow JumpThreading to thread across loop headers, for testing'
'Allow Objective-C array and dictionary subscripting in legacy runtime'
'Allow SimplifyCFG to merge invokes together when appropriate'
'Allow __declspec as a keyword'
'Allow aggressive, lossy floating-point optimizations'
'Allow atomic operations to ignore denormal mode'
'Allow calls to the specified functions in SCoPs even if their side-effects are unknown. This can be used to do debug output in Polly-transformed code.'
'Allow certain math function calls to be replaced with an approximately equivalent calculation'
'Allow cloning of callsites involved in recursive cycles'
'Allow cloning of contexts having recursive cycles'
'Allow cloning of contexts through recursive cycles'
'Allow combining of BaseGV field in Address sinking.'
'Allow combining of BaseOffs field in Address sinking.'
'Allow combining of BaseReg field in Address sinking.'
'Allow combining of ScaledReg field in Address sinking.'
'Allow compiler to annotate sanitizer instrumentation with extra debug info for all sanitizers, where supported'
'Allow compiler to merge handlers for all sanitizers'
'Allow compiler to merge handlers for specified sanitizers'
'Allow conditional instructions outside of an IT block'
'Allow counter promotion across the whole loop nest.'
'Allow creation of Phis in Address sinking.'
'Allow creation of selects in Address sinking.'
'Allow device side init function in HIP (experimental)'
'Allow different element types for array accesses'
'Allow division operations to be reassociated'
'Allow enabling loop hints to reorder FP operations during vectorization.'
'Allow exactly one expensive instruction to be speculatively executed'
'Allow floating-point optimizations that assume arguments and results are not NaNs or +-inf. This defines the \\_\\_FINITE\\_MATH\\_ONLY\\_\\_ preprocessor macro.'
'Allow for a mixture of Mips16 and Mips32 code in a single output file'
'Allow functions with known modref behavior'
'Allow generation of a loop remainder (extra iterations) when unrolling a loop.'
'Allow generation of complex IT blocks.'
'Allow generation of data access to code sections (AArch64/ARM only)'
'Allow header insertions (deprecated. Use -disable-insert instead)'
'Allow header removals (deprecated. Use -disable-remove instead)'
'Allow incomplete IR on a best effort basis (references to unknown metadata will be dropped)'
"Allow inlining when caller has a superset of callee's nobuiltin attributes."
'Allow loop rotation multiple times in order to reach a better latch exit'
'Allow mapping symbol at section beginning to be implicit, lowering number of mapping symbols at the expense of some portability. Recommended for projects that can build all their object files using this option'
'Allow memory accesses to be unaligned (AArch32/MIPSr6 only)'
'Allow memory accesses to be unaligned (AArch64/LoongArch/RISC-V only)'
'Allow mergefunc to create aliases'
'Allow merging of constants'
'Allow non affine access functions in arrays'
'Allow non affine conditions for branches'
'Allow non affine conditions for loops'
'Allow non-power-of-2 vectorization.'
'Allow non-solo packetization of volatile memory references'
'Allow operation with no registered dialects'
'Allow operation with no registered dialects (discouraged: testing only!)'
'Allow operations coming from an unregistered dialect'
'Allow optimization to assume there are no NaNs.'
'Allow optimization to assume there are no infinities.'
'Allow optimizations that ignore the sign of floating point zeros'
'Allow partial writes'
'Allow passing GC Pointer arguments in callee saved registers'
'Allow placing main program variables on the stack (default)'
'Allow prefixes to be specified but not appear in the test.'
'Allow reassociation transformations for floating-point instructions'
'Allow relaxed uniform region checks'
'Allow reordering across at most this many instructions when hoisting'
'Allow runtime unroll for AMDGPU if local memory used in a loop'
'Allow runtime unrolled loops to be unrolled with epilog instead of prolog.'
'Allow runtime unrolling for loops with multiple exits, when epilog is generated'
'Allow sample loader inliner to inline recursive calls.'
'Allow scalar memory accesses to be unaligned (RISC-V only)'
'Allow slot1 store and slot0 load'
'Allow speculation of preheader instructions'
'Allow spill in spill slot of greater size than register size'
'Allow static variables in .sdata'
'Allow the Attributor to create shallow wrappers for non-exact definitions.'
'Allow the Attributor to do call site specific analysis'
'Allow the Attributor to use IP information derived from non-exact functions via cloning'
'Allow the compiler to assume that each translation unit has a unique source file identifier (see -funique-source-file-identifier) at link time'
'Allow the detection of full functions'
'Allow the formation of VW_W operations (e.g., VWADD_W) with splat constants'
'Allow the input file to be empty. This is useful when making\nchecks that some error message does not occur, for example.'
'Allow the loop remainder to be unrolled.'
'Allow the use of FMAs if available and profitable. This may result in different results, due to less rounding error.'
'Allow to search for module maps in subdirectories of search paths'
"Allow to speculate on the execution of 'error blocks'."
'Allow unsafe floating-point math optimizations which may decrease precision'
'Allow unsigned operations such as comparisons or zero-extends.'
'Allow use of CMSE (Armv8-M Security Extensions)'
'Allow use of CRC instructions (ARM/Mips only)'
'Allow using blocks with parameters of more specific type than the type system guarantees when a parameter is qualified id'
'Allow using registers for gc pointer in landing pad'
'Allow using registers for non pointer deopt args'
'Allow variadic functions in CUDA device code.'
'Allow vector memory accesses to be unaligned (RISC-V only)'
'Allow widening of indvars to eliminate s/zext'
'Allowed symbol scopes (comma-separated list)'
'Allows assuming by-value parameters do not alias any other value. Has no effect on non-trivially-copyable classes in C++.'
'Allows control over excess precision on targets where native support for BFloat16 precision types is not available. By default, excess precision is used to calculate intermediate results following the rules specified in ISO C99.'
'Allows control over excess precision on targets where native support for Float16 precision types is not available. By default, excess precision is used to calculate intermediate results following the rules specified in ISO C99.'
'Allows control over excess precision on targets where native support for the precision types is not available. By default, excess precision is used to calculate intermediate results following the rules specified in ISO C99.'
'Allows loop nests to be peeled.'
'Allows loops to be partially unrolled until -unroll-threshold loop size is reached.'
'Allows loops to be peeled when the dynamic trip count is known to be low.'
'Allows loops to be unroll-and-jammed.'
'Allows to add additional results to private functions to return ownership of returned memrefs to callers. This can avoid spurious buffer clones in the callee.'
'Allows using features specific to Hugo'
'Also show functions without any scops'
'Also write profiles with all-zero counters. Intended for testing/debugging.'
'Always Step Into.'
'Always convert memcpy to TP loop.'
'Always detect stack use after return.'
'Always dump input'
'Always emit EH frame entries'
'Always emit __xray_customevent(...) calls even if the containing function is not always instrumented'
'Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented'
'Always emit a debug frame section'
'Always emit a debug frame section.'
'Always exclude wrong side overloads in overloading resolution for CUDA/HIP'
'Always generate function calls for address sanitizer instrumentation'
'Always modify dest registers regardless of color'
'Always set the bit'
'Always track the overflow bit.'
'Always use $gp as the global base register.'
'Always use DW_AT_ranges in DWARFv5 whenever it could allow more address pool entry sharing to reduce relocations/object size'
'Always use compact branches if possible.'
'Always use descriptors for POINTER and ALLOCATABLE'
'Always used text-based completion'
'Always write temporary files as bitcode instead of textual IR'
'An ID for compilation unit, which should be the same for the same compilation unit but different for different compilation units. It is used to externalize device-side static variables for single source offloading languages CUDA and HIP so that they can be accessed by the host code of the same compilation unit.'
'An additional cost threshold that must be exceeded for merging to be considered beneficial.'
'An allocatable left-hand side of an intrinsic assignment is assumed to be allocated and match the shape/type of the right-hand side'
'An integer in percent used to specify the hot blocks/edges to be displayed in red: a block or edge whose frequency is no less than the max frequency of the function multiplied by this percent.'
'Analysis'
'Analysis containing CSE Info'
'Analysis for ComputingKnownBits'
'Analysis if a function is memory bound'
'Analyze Machine Code For Garbage Collection'
'Analyze and emit instructions for Win64 Unwind v2'
'Analyze array contents for load forwarding'
'Annotate LTO phase (prelink / postlink), or main (no LTO) for sample-profile inline pass name.'
'Annotate SI Control Flow'
'Annotate call sites of function declarations.'
'Annotate sanitizer instrumentation with extra debug info for the specified sanitizers, if supported'
'Annotate table jump instruction to correlate it with the jump table.'
'Any subsection not covered by another option'
'Append function hash to the name of COMDAT function to avoid function hash mismatch due to the preinliner'
"Append the exit code to the output so it gets diff'd too"
'Append vectorize enable/disable metadata from polly'
'Appends one trailing underscore to external names'
'Apple'
'Applies path clonings for the -basic-block-sections=list option'
'Apply CHR for all functions'
'Apply an iterative post-processing to infer correct BFI counts'
'Apply edits to analyzed source files'
'Apply first slot optimization for stack tagging (eliminate ADDG Rt, Rn, 0, 0).'
'Apply fix-it advice creating a file with the given suffix'
'Apply fix-it advice even in the presence of unfixable errors'
'Apply fix-it advice only for warnings, not errors'
'Apply fix-it advice to the input source'
'Apply fix-it changes and recompile'
'Apply fix-it changes to temporary files'
'Apply given attribute to all functions'
'Apply global symbol visibility to external declarations without an explicit visibility'
'Apply no_sanitize to the whole file'
'Apply post-rescheduling optimizations such as tiling (requires -polly-reschedule)'
'Apply the profile guided size optimizations only if the working set size is large (except for cold code.)'
'Apply the profile guided size optimizations only to cold code under instrumentation PGO.'
'Apply the profile guided size optimizations only to cold code under partial-profile sample PGO.'
'Apply the profile guided size optimizations only to cold code under sample PGO.'
'Apply the profile guided size optimizations only to cold code.'
'Apply the terminal rule'
'Apply user-directed transformation from metadata'
'Approximately limit number of return registers for replacing out arguments'
'Architecture to generate code for (see --version)'
'Argument Register Usage Information Storage'
'Argument Stack Rebase'
'Argument to pass to the CompilerInvocation'
'Arguments passed onto the interesting-ness test'
'Arguments to pass to the DTLTO distributor process.'
'Arguments to pass to the remote compiler for backend compilations.'
'Arm Performance Libraries'
'Array subrange.'
'Array.'
'As secure log file name'
'As we import functions called from hot callsite, multiply the `import-instr-limit` threshold by this factor before processing newly imported functions'
'As we import functions, multiply the `import-instr-limit` threshold by this factor before processing newly imported functions'
'Asm comments indentation'
'Assemble a .s file (default)'
'Assembler instructions.'
'Assembler line.'
'Assert no nested parallel regions in the GPU'
'Assert no thread in a parallel region modifies an ICV'
'Assert that the compilation takes place in a freestanding environment'
'Assign reference type allocas to local address space'
'Assign register bank of generic virtual registers'
'Assign valid PTX names to globals'
'Assignment Tracking Analysis'
'Assigns WebAssembly register numbers for virtual registers'
'Assume SVE vector registers are at least this big, with zero meaning no minimum size is assumed.'
'Assume SVE vector registers are at most this big, with zero meaning no maximum size is assumed.'
'Assume V extension vector registers are at least this big, with zero meaning no minimum size is assumed. A value of -1 means use Zvl*b extension. This is primarily used to enable autovectorization with fixed width vectors.'
'Assume V extension vector registers are at most this big, with zero meaning no maximum size is assumed.'
'Assume all functions may be convergent.'
'Assume all functions with C linkage do not unwind'
'Assume all non-trivial loops are finite.'
'Assume data segments are relative to text segment'
'Assume distributed loops do not have more iterations than participating teams.'
'Assume no atomic operations on fine-grained memory'
'Assume no atomic operations on remote memory'
'Assume that UAVs/SRVs may alias'
"Assume that exception objects' destructors are non-throwing"
'Assume that execution stops at trap instruction'
'Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)'
'Assume that kernels are launched with uniform block sizes (default true for CUDA/HIP and false otherwise)'
'Assume that no thread in a parallel region will encounter a parallel region.'
'Assume that no thread in a parallel region will modify an ICV.'
'Assume that overflowing float-to-int casts are undefined (default)'
'Assume that the precompiled header is a precompiled preamble covering the first N bytes of the main file'
'Assume that the product of the two iteration trip counts will never overflow'
'Assume that top byte of an address is ignored'
'Assume the input has already undergone ThinLTO function importing and the other pre-optimization pipeline changes.'
'Assume the module is loaded at the specified address'
'Assume the non latch exit block to be predictable'
'Assume thread-local variables are defined in the executable'
'Assume work-shared loops do not have more iterations than participating threads.'
'Assumed aligned memory accesses.'
'Assumed extra stack use if there are any variable sized objects (in bytes)'
'Assumed stack use of any external call (in bytes)'
'Assumption Cache Tracker'
'At top of block or after label'
'Attach calleeguids as value profile metadata for indirect calls.'
'Attach debug info to a function'
'Attach debug info to everything'
'Attempt coalescing during PBQP register allocation.'
'Attempt to allocate array temporaries created under -frepack-arrays on the stack'
'Attempt to allocate array temporaries on the stack, no matter their size'
'Attempt to drop solution if it is less profitable'
'Attempt to match the ABI of Clang <version>'
'Attempt to vectorize for this register size in bits'
'Attempt to vectorize horizontal reductions'
'Attempt to vectorize horizontal reductions feeding into a store'
'Attribute Options'
"Attribute all functions' range with zero count even it's not hit by any samples."
'Auto-generates preprocessed source files and a reproduction script'
'Automatically put hot code on 2MB page(s) (hugify) at runtime. No manual call to hugify is needed in the binary (which is what --hot-text relies on).'
'Auxiliary target triple.'
'Average inst/cycle when no target itinerary exists.'
'Avoid FPU mode dependent operations when used with the O32 ABI'
'Avoid logging potentially-sensitive request details'
'Avoid optimizing x86 call frames for size'
'Avoid translating the elements of DICompositeTypes during the LLVM IR import (discouraged: testing only!)'
'Avoid using scaled registers with vscale-relative addressing'
'BAT dump options'
'BC Analyzer Options'
'BOLT - Binary Optimization and Layout Tool\n'
'BOLT generic options'
'BOLT instrumentation options'
'BOLT optimization options'
'BOLT options in relocation mode'
'BOLTDIFF generic options'
'BPF Assembly Printer'
'BPF Check And Adjust IR'
'BPF DAG->DAG Pattern Instruction Selection'
'BPF MachineSSA Peephole Optimization For ZEXT Eliminate'
'BPF PreEmit Checking'
'BPF PreEmit Peephole Optimization'
'BPF PreEmit SimplifyPatchable'
'BPF: Disable Avoiding Speculative Code Motion.'
'BPF: Disable Serializing ICMP insns.'
'Bail out on unprofitable SCoPs before rescheduling'
'Base Directory for generated documentation.\nURLs will be rooted at this directory for HTML links.'
'Base Type (int, bool, etc.).'
'Base cost of vector insert/extract element'
'Base file path for the interactive mode. The incoming filename should have the name <inliner-interactive-channel-base>.in, while the outgoing name should be <inliner-interactive-channel-base>.out'
'Base file path for the interactive mode. The incoming filename should have the name <regalloc-evict-interactive-channel-base>.in, while the outgoing name should be <regalloc-evict-interactive-channel-base>.out'
'Base file path for the interactive mode. The incoming filename should have the name <regalloc-priority-interactive-channel-base>.in, while the outgoing name should be <regalloc-priority-interactive-channel-base>.out'
'Base penalty for splitting cold code (as a multiple of TCC_Basic)'
'Base types (int, bool, etc.).'
'Basic Alias Analysis (stateless AA impl)'
'Basic Block Frequency'
'Basic Block Placement Stats'
'Basic Register Allocator'
'Basic algebraic expansions of complex arithmetic operations involving are disabled.'
'Basic algebraic expansions of complex arithmetic operations involving are enabled.'
'Basic attributes alias.'
'Basic block limit for a function for RDF optimizations'
'Basic block.'
'Basic register allocator'
'Be more conservative in ARM load/store opt'
'Before everything'
'Best scheduler for the target'
'Binary encoding'
'Binary encoding (default)'
'BinaryAnalysis\n'
'BinaryAnalysis options'
'Bit simplification'
'Bit size of immediate TLS offsets'
'Bitstream'
'Bitwidth of the index type for the host (warning this should be 64 until the GPU layering is fixed)'
'Block Frequency Analysis'
'Block frequency percentage a loop exit block needs over the original exit to be considered the new exit.'
'Block until the parser can be used'
'Bottom-up register pressure aware list scheduling which tries to balance ILP and register pressure'
'Bottom-up register pressure aware list scheduling which tries to balance latency and register pressure'
'Bottom-up register reduction list scheduling'
'Bound on stack depth while inlining (4 by default)'
'Bound the dependence analysis by a maximal amount of computational steps (0 means no bound)'
'Bound the scheduler by maximal amountof computational steps. '
'Bound the scop analysis by a maximal amount of computational steps (0 means no bound)'
'Branch Coalescing'
'Branch Probability'
'Branch Probability Analysis'
'Branch Probability Basic Block Placement'
'Branch relaxation pass'
'Break backedge through symbolic execution of 1st iteration attempting to prove that the backedge is never taken'
'Break critical edges in CFG'
'Break large PHI nodes for DAGISel'
'Break post-RA scheduling anti-dependencies: "critical", "all", or "none"'
'BreakFalseDeps'
'Breakdown the count by function name taking into consideration the filepath info from the DebugLoc of the remark.'
'Breakdown the count by function name.'
'Bucket number per loop for PPC loop chain common'
'Buffer the last N characters of debug output until program termination. [default 0 -- immediate print-out]'
"BugPoint Test Pass - Intentionally 'misoptimize' CallInsts"
'BugPoint Test Pass - Intentionally crash on CallInsts'
'BugPoint Test Pass - Intentionally crash on declared functions'
'BugPoint Test Pass - Intentionally crash on fabs calls with fpmath metadata and an fadd as argument'
"BugPoint Test Pass - Intentionally crash on function attribute 'bugpoint-crash'"
'BugPoint Test Pass - Intentionally crash on too many CUs'
'Build ASTs and convert to LLVM, discarding output'
'Build ASTs and print the list of declaration node qualified names'
'Build ASTs and then debug dump their name lookup tables'
'Build ASTs and then debug dump them'
'Build ASTs and then debug dump them in the specified format, forcing deserialization. Supported formats include: default, json'
'Build ASTs and then debug dump them in the specified format. Supported formats include: default, json'
'Build ASTs and then debug dump them, forcing deserialization'
'Build ASTs and then lower to ClangIR'
'Build ASTs and then pretty-print them'
'Build ASTs and view them with GraphViz'
'Build ASTs then convert to LLVM, emit .bc file'
'Build VPlan for every supported loop nest in the function and bail out right after the build (stress test the VPlan H-CFG construction in the VPlan-native vectorization path).'
'Build a C++20 Header Unit from a header'
'Build a C++20 Header Unit from a header that should be found in the user (fmodule-header=user) or system (fmodule-header=system) search path.'
'Build for HVX v60'
'Build for HVX v62'
'Build for HVX v65'
'Build for HVX v66'
'Build for HVX v67'
'Build for HVX v68'
'Build for HVX v69'
'Build for HVX v71'
'Build for HVX v73'
'Build for HVX v75'
'Build for HVX v79'
'Build for Hexagon V5'
'Build for Hexagon V55'
'Build for Hexagon V60'
'Build for Hexagon V62'
'Build for Hexagon V65'
'Build for Hexagon V66'
'Build for Hexagon V67'
'Build for Hexagon V67T'
'Build for Hexagon V68'
'Build for Hexagon V69'
'Build for Hexagon V71'
'Build for Hexagon V71T'
'Build for Hexagon V73'
'Build for Hexagon V75'
'Build for Hexagon V79'
'Build path'
'Build the parse tree, then lower it to FIR'
'Build the parse tree, then lower it to HLFIR'
'Build this module as a system module. Only used with -emit-module'
'Bundle Machine CFG Edges'
'Bundle output files of HIP device compilation'
'Burnside Bridge Compiler\n'
'By default, we analyze the benchmarks for the triple/CPU they were measured for, but if you want to analyze them for some other combination (specified via -mtriple/-mcpu), you can pass this flag.'
'Bypass the profitability model of load slicing'
'C does not support default arguments'
'C requires #line number to be less than %0, allowed as extension'
'C requires a comma prior to the ellipsis in a variadic function type'
"C++ ABI '%0' is not supported on target triple '%1'"
'C++ ABI to use. This will override the target C++ ABI.'
'C++ implementation file name'
'C++ operator %0 (aka %1) used as a macro name'
'C++ standard library to use'
'C++11 only allows consecutive left square brackets when introducing an attribute'
'C++98 requires an accessible copy constructor for class %2 when binding a reference to a temporary; was %select{private|protected}0'
'C99 forbids casting nonscalar type %0 to the same type'
'C99 forbids conditional expressions with only one void side'
'CF object of type %0 is bridged to %1, which is not an Objective-C class'
'CFGuard'
'CFI Verify Options'
'CFString literal is not a string constant'
'CHR considers a branch bias greater than this ratio as biased'
'CHR merges a group of N branches/selects where N >= this value'
'CIR module verification error before running CIR-to-CIR passes'
'CIR-to-CIR transformation failed'
'CL.EXE COMPATIBILITY OPTIONS'
'COFF Symbol RVAs (DEBUG_S_COFF_SYMBOL_RVA subsection)'
"CPU '%0' does not support '%1' execution mode"
'CPU list contains duplicate entries; attribute ignored'
'CSKY DAG->DAG Pattern Instruction Selection'
'CSKY constant island placement and branch shortening pass'
'CSS stylesheets to extend the default styles.'
'CSV format'
'CUDA device code does not support va_arg'
'CUDA device code does not support variadic functions'
'CUDA does not support global %0 for __device__ functions'
'CUDA installation path'
'CUDA offload target is supported only along with --emit-llvm'
'CUDA older than 10.0 does not support .alias'
"CUDA special function '%0' must have scalar return type"
'CUDA version %0 is only partially supported'
'CUDA version%0 is newer than the latest%select{| partially}1 supported version %2'
'CXX Dump Options'
'CXX Map Options'
'Cache Directory'
'Calculate the intrinsic cost based only on argument types'
'Call nonlazybind functions via direct GOT load for Mach-O'
'Call penalty that is applied per callsite when inlining'
'Call score power (when --split-strategy=cdsplit)'
'Call score scale coefficient (when --split-strategy=cdsplit)'
'Call site block.'
'Call site parameter.'
'CallGraph Construction'
'Can specify at most '
'Canonicalize Freeze Instructions in Loops'
'Canonicalize natural loops'
'Capture the number of times a stack was invoked. In flamegraph mode, this count also includes invocations of all callees.'
'Capture the total time spent in an all invocations of a stack.'
'Causes the backend to crash instead of generating a nop VSX copy'
'Change byte and word instructions to larger sizes'
'Change diagnostic formatting to match IDE and command line tools'
'Change indirect jump instructions to inhibit speculation'
'Change namespace.'
'Change the C++ ABI to returning `this` pointer from constructors and non-deleting destructors. (No effect on Microsoft ABI)'
"Change the greedy register allocator's live range priority calculation to make the AllocationPriority of the register class more important then whether the range is global"
'Change variadic calling convention'
'Check CFA info and insert CFI instructions if needed'
'Check all diagnostics (expected, unexpected, near-misses)'
'Check debug info from -debugify'
'Check debug info from -debugify-function'
'Check elements integrity.'
'Check floating-point load'
'Check floating-point return values'
'Check floating-point stores'
'Check for parallel loops'
'Check for vectorizable loops'
'Check if block frequency is queried for an unknown block for debugging missed BFI updates'
'Check if input heterogeneous archive is valid in terms of TargetID rules.\n'
'Check module hash using the argument as a string table'
'Check only expected diagnostics'
'Check pointer authentication auth/resign failures'
'Check stack-use-after-scope'
'Check that emitted diagnostics match expected-* lines on the corresponding line'
'Check the input source files from C++20 modules explicitly'
'Chip to use to serialize to cubin.'
'Choose DWARF debug sections compression:'
'Choose a file type (not all types are supported by all targets):'
'Choose an output file type:'
'Choose analyzer checkers to disable'
'Choose analyzer checkers to enable'
'Choose analyzer options to enable'
'Choose code model'
'Choose float ABI type'
'Choose large data threshold for x86_64 medium code model'
'Choose level of diagnostic information'
'Choose relocation model'
'Choose speculation scheme'
'Choose style of NEON code to emit from AArch64 backend:'
'Choose the OpenMP library to use:'
'Choose the dynamic linker/loader.'
'Choose the number of compile threads (jit-kind=orc-lazy only)'
'Choose the priority mode to use in module inline'
'Choose the report output format:'
'Choose the strategy to replace exit value in IndVarSimplify'
'Choose threading model'
'Choose to use MD5 to represent string in name table (only meaningful for -extbinary)'
'Choose underlying JIT kind.'
'Chunksize to use by the OpenMP runtime calls'
"Clang permits use of type 'double' regardless pragma if 'cl_khr_fp64' is supported"
'Clang-format options'
'ClangIR code gen Not Yet Implemented: %0'
'ClangIR code gen Not Yet Implemented: %0: %1'
'ClangIR: Disable MLIR module verifier'
'Class definition format'
'Class recursion depth (0=no limit)'
'Class sort order'
'Class, Structure or Union.'
'Class.'
'Cleanup of TFRs/COPYs'
'Clear call-used registers upon function return (AArch64/x86 only)'
'Clear the Clang AST before running backend code generation'
'Clearance between two register writes for inserting XOR to avoid partial register update'
'Clone multicolor basic blocks but do not demote cross scopes'
'Coalesce copies (default=true)'
'Coalesce copies by rescheduling (default=true)'
'Coalesce copies on split edges (default=subtarget)'
'Coalesce copies that span blocks (default=subtarget)'
'Code and read-only data relocatable, accessed PC-relative'
'Code growth limit for address mode optimization'
'Code sinking'
'Code size'
'Code size and latency'
'CodeGen (expected to match llc)'
"Codegen optimization level (0, 1, 2 or 3, default = '2')"
'Collect access count histograms'
'Collect control flow of function'
'Collect probability-driven block placement stats'
"Collect these seeds. Use empty for none or a comma-separated list of '"
'Collects information ahead of time for MC lowering'
'Color Options'
'Color for dot-cfg after elements'
'Color for dot-cfg before elements'
'Color for dot-cfg common elements'
'Colored disassembly of strings of hex bytes'
'Combination of ropi and rwpi'
'Combine AArch64 MachineInstrs after legalization'
'Combine AArch64 machine instrs before legalization'
'Combine AMDGPU machine instrs after legalization'
'Combine AMDGPU machine instrs after regbankselect'
'Combine AMDGPU machine instrs before legalization'
'Combine Mips machine instrs after legalization'
'Combine Mips machine instrs before legalization'
'Combine RISC-V MachineInstrs after legalization'
'Combine RISC-V machine instrs before legalization'
'Combine SPIRV machine instrs before legalization'
'Combine ext and trunc to TBL'
'Combine extends of AArch64 masked gather intrinsics'
'Combine interleaved loads into wide loads and shufflevector instructions'
'Combine redundant instructions'
'Combine the label of the offset with the label of the pointer when doing pointer arithmetic.'
'Combine the label of the pointer with the label of the data when loading from memory.'
'Combine the label of the pointer with the label of the data when storing in memory.'
'Comma separated list of attribute names that are allowed to be seeded.'
'Comma separated list of debug counter skip and count'
'Comma separated list of debug counter skip and count arguments'
'Comma separated list of files containing a new line separated list of API symbols to ignore when extracting API information.'
'Comma separated list of function names that are allowed to be seeded.'
'Comma separated list of functions to replace with native, or all'
'Comma separated list of globs for white-listing gcc-compatible drivers that are safe to execute. Drivers matching any of these globs will be used to extract system includes. e.g. /usr/bin/**/clang-*,/path/to/repo/**/g++-*'
'Comma separated list of locations to filter actions from logging'
"Comma-separated list of comment prefixes to use from check file\n(defaults to 'COM,RUN'). Please avoid using this feature in\nLLVM's LIT-based test suites, which should be easier to\nmaintain if they all follow a consistent comment style. This\nfeature is meant for non-LIT test suites using FileCheck."
"Comma-separated list of globs describing the list of callbacks to output. Globs are processed in order of appearance. Globs with the '-' prefix remove callbacks from the set. e.g. '*,-Macro*'."
'Comma-separated list of vectorizer passes. If not set we run the predefined pipeline.'
'Command line options to pass to the downstream compiler.'
'Command to compile the bitcode (use with -compile-custom) (default: llc)'
'Command to execute and then exit.'
'Command to execute the bitcode (use with -run-custom) (default: simulate)'
'CommonOptionsParser: failed to parse command-line arguments. '
'Compare Options'
'Compare all elements.'
'Compare bits 62 and 61 of address (TBI should be disabled)'
'Compare with the result of XPAC (requires Armv8.3-a)'
'Compare with the result of XPACLRI'
'Compilation YAML databases containing additional compilation information for .pdll files'
'Compilation YAML databases containing additional compilation information for .td files'
'Compilation format to use to serialize to cubin.'
'Compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.'
'Compile CUDA code for device only'
'Compile CUDA code for host only. Has no effect on non-CUDA compilations.'
'Compile HIP source to relocatable'
'Compile SYCL code for device only'
'Compile SYCL code for host only. Has no effect on non-SYCL compilations'
"Compile all functions that don't use floating point as Mips 16"
'Compile common globals like normal definitions'
'Compile for both the offloading host and device (default).'
'Compile only'
'Compile unit.'
'Compile with LLC'
'Compile with LLC with integrated assembler'
'Compiler generated elements.'
'Compiler runtime library to use'
'Compiler to use for DTLTO ThinLTO backend compilations.'
'Complex Deinterleaving'
'Compress all sections when writing the profile (only meaningful for -extbinary)'
'Compress offload device binaries (HIP only)'
'Compress output file when bundling.\n'
'Compressing recursion by deduplicating adjacent frame sequences up to the specified size. -1 means no size limit.'
'Compression level for offload device binaries (HIP only)'
'Compute and report stale profile statistical metrics.'
"Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical"
'Compute dead symbols'
'Compute known content of array elements'
'Compute mean of all readings'
'Compute stale profile statistical metrics and write it into the native object file(.llvm_stats section).'
'Compute the full inline cost of a call site even when the cost exceeds the threshold.'
'Conditions to use when printing elements.'
'Configure the polly loop optimizer'
'Connect to an out-of-process executor through a TCP socket'
'Connect to an out-of-process executor via TCP'
'Consider R1 caller preserved so stack saves of caller preserved registers can be LICM candidates'
'Consider a profile matches a function if the similarity of their callee sequences is above the specified percentile.'
'Consider all leaf descendants of internal nodes of the suffix tree as candidates for outlining (if false, only leaf children are considered)'
'Consider calls to be predicable'
'Constant Hoisting'
'Constant specifier.'
'Constant.'
'Context sensitive profile file path'
'Contiguously Lay Out Funclets'
'Continue if files are not mapped correctly.'
'Control Flow Optimizer'
'Control conversion of memcpy to Tail predicated loops (WLSTP)'
'Control emission of Swift async extended frame info'
"Control how the assembler should align branches with NOP. If the boundary's size is not 0, it should be a power of 2 and no less than 32. Branches will be aligned to prevent from being across or against the boundary of specified size. The default value 0 does not align branches."
'Control jump table emission on Hexagon target'
'Control lookup table emission on Hexagon target'
'Control the CR-bit tracking feature on PowerPC. ``-mcrbits`` (the enablement of CR-bit tracking support) is the default for POWER8 and above, as well as for all other CPUs when optimization is applied (-O2 and above).'
'Control the amount of inlining in pre-instrumentation inliner (default = 75)'
'Control the amount of inlining to perform (default = 225)'
'Control the amount of phi node folding to perform (default = 2)'
'Control the maximal conditional load/store that we are willing to speculatively execute to eliminate conditional branch (default = 6)'
'Control the maximal total instruction cost that we are willing to speculatively execute to fold a 2-entry PHI node into a select (default = 4)'
'Control the number of bonus instructions (default = 1)'
'Control the rules which are enabled. These options all take a comma separated list of rules to disable and may be specified by number or number range (e.g. 1-10).'
'Control the use of vectorisation using tail-folding for SVE where the option is specified in the form (Initial)[+(Flag1|Flag2|...)]:\ndisabled      (Initial) No loop types will vectorize using tail-folding\ndefault       (Initial) Uses the default tail-folding settings for the target CPU\nall           (Initial) All legal loop types will vectorize using tail-folding\nsimple        (Initial) Use tail-folding for simple loops (not reductions or recurrences)\nreductions    Use tail-folding for loops containing reductions\nnoreductions  Inverse of above\nrecurrences   Use tail-folding for loops containing fixed order recurrences\nnorecurrences Inverse of above\nreverse       Use tail-folding for loops requiring reversed predicates\nnoreverse     Inverse of above'
"Control use of approximate reciprocal and reciprocal square root instructions followed by <n> iterations of Newton-Raphson refinement. <value> = ( ['!'] ['vec-'] ('rcp'|'sqrt') [('h'|'s'|'d')] [':'<n>] ) | 'all' | 'default' | 'none'"
'Control vtordisp placement'
'Control vtordisp placement on win32 targets'
"Control where files for distributed backends are created. Expects 'oldprefix;newprefix' and if path prefix of output file is oldprefix it will be replaced with newprefix."
'Control whether the compiler can use scalable vectors to vectorize a loop'
'Control whether unstable and experimental library features are enabled. This option enables various library features that are either experimental (also known as TSes), or have been but are not stable yet in the selected Standard Library implementation. It is not recommended to use this option in production code, since neither ABI nor API stability are guaranteed. This is intended to provide a preview of features that will ship in the future for experimentation purposes'
'Controls Negator transformations in InstCombine pass'
'Controls how scalar integer arguments are extended in calls to unprototyped and varargs functions'
'Controls if structs should be imported as literal structs, i.e., nameless structs.'
'Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)'
'Controls the semantics of floating-point calculations.'
'Controls transformations in div-rem-pairs pass'
'Controls transformations in partially-inline-libcalls'
'Controls whether PPC per opcode peephole is performed on a MI'
'Controls whether PPC reg+reg to reg+imm peephole is performed on a MI'
'Controls whether a DAG combine is performed for a node'
'Controls whether rewriteCandidateWithBasis is executed.'
'Controls whether to select function with GlobalISel'
'Controls which MemoryDefs are eliminated.'
'Controls which SLP graphs should be vectorized.'
'Controls which assumes gets created'
'Controls which checks to insert'
'Controls which conditions are eliminated'
'Controls which instruction to instrument'
'Controls which instructions are eliminated'
'Controls which instructions are removed'
'Controls which instructions are value numbered'
'Controls which instructions are visited'
'Controls which instructions we create phi of ops for'
'Controls which pairs are considered for renaming'
'Controls which register COPYs are forwarded'
'Controls which tag collisions are avoided'
'Controls which variables C++ static destructors are registered for'
'Controls which variables are renamed with predicateinfo'
'Conventional ABI instrumentation for sanitizer runtime. Default: Conventional'
'Convert align attributes to assumptions during inlining.'
'Convert all cmovs to branches.'
'Convert available_externally into locals, renaming them to avoid link-time clashes.'
'Convert cmovs to branches whenever they have memory operands.'
'Convert eligible reg+reg instructions to reg+imm'
'Convert i1 constants to i32/i64 if they are returned'
'Convert irreducible control-flow into natural loops'
'Convert noalias attributes to metadata during inlining.'
'Convert registers to WebAssembly locals'
'Convert switches into an integer range comparison (default = false)'
'Convert switches to lookup tables (default = false)'
'Convert the generated profile to a profile with a new layout'
'Cost for first time use of callee-saved register.'
'Cost multiplier to multiply onto inlined call sites where the new call was previously an intra-SCC call (not relevant when the original call was already intra-SCC). This can accumulate over multiple inlinings (e.g. if a call site already had a cost multiplier and one of its inlined calls was also subject to this, the inlined call would have the original multiplier multiplied by intra-scc-cost-multiplier). This is to prevent tons of inlining through a child SCC which can cause terrible compile times'
'Cost of a single instruction when inlining'
'Cost of alloca argument'
'Cost of jump instructions.'
'Cost of load/store instruction when inlining'
'Cost penalty for blocks that can avoid breaking CFG by copying. Copying can increase fallthrough, but it also increases icache pressure. This parameter controls the penalty to account for that. Percent as integer.'
'Cost that models the probabilistic risk of an instruction misfetch due to a jump comparing to falling through, whose cost is zero.'
'Costing strategy for intrinsic instructions'
'Count statements with scalar accesses as not optimizable'
'Count the induction variable only once when interleaving'
'Counts based on the value each specified argument has. The argument has to have a number value to be considered.'
'Counts individual remarks based on how many of the remark exists.'
'Coverage executable or object file'
'Covered executable or object file.'
'Create DLL'
'Create Garbage Collector Module Metadata'
'Create a copy of byval function arguments early.'
'Create a dot file of CFGs with block coverage inference information'
'Create a table of coverage-instrumented PCs'
'Create a website with graphical changes'
'Create a website with graphical changes in quiet mode'
'Create cfi directives that assume the code might be more than 2gb away'
'Create debug DLL'
'Create empty files if bundles are missing when unbundling.\n'
'Create hotpatchable image'
'Create lane mask for data only, using active.lane.mask intrinsic'
'Create lane mask using active.lane.mask intrinsic, and use it for both data and control flow'
'Create lane mask with compare/stepvector'
'Create phony target for each dependency (other than main file)'
'Create pi-block nodes.'
'Create redzones for byval arguments (extra copy required)'
'Create unit-strided versions of loops'
"Creates .debug_names section, if the input binary doesn't have it already, for DWARF5 CU/TUs."
'Cross module exports (DEBUG_S_CROSSSCOPEEXPORTS subsection)'
'Cross module imports (DEBUG_S_CROSSSCOPEIMPORTS subsection)'
'Cull hazards on function boundaries'
'Cull hazards on memory waits'
'Cutoff for generating "extract" instructions'
'Cutoff percentages (times 10000) for generating detailed summary'
'Cutoff value about how many symbols in profile symbol list will be used. This is very useful for performance debugging'
'Cycle Info Analysis'
'DAG combiner enable load/<replace bytes>/store with a narrower store'
'DAG combiner enable merging multiple stores into a wider store'
'DAG combiner enable reducing the width of load/op/store sequence'
'DAG combiner force override the narrowing profitable check when reducing the width of load/op/store sequences'
'DAG combiner limit number of steps when searching DAG for predecessor nodes'
'DAG combiner may split indexing from loads'
'DEBUG/DEVELOPMENT OPTIONS'
"DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute."
"DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute."
'DRIVER OPTIONS'
'DWARF'
'DWARF debug sections compression type'
'DWARF-like CFI based exception handling'
'DWO output filename'
'DXContainer Global Emitter'
'DXIL Array Flattener'
'DXIL CBuffer Access'
'DXIL Data Scalarization'
'DXIL Finalize Linkage'
'DXIL Forward Handle Accesses'
'DXIL Intrinsic Expansion'
'DXIL Legalizer'
'DXIL Metadata Pretty Printer'
'DXIL Module Metadata analysis'
'DXIL Op Lowering'
'DXIL Post Optimization Validation'
'DXIL Prepare Module'
'DXIL Resource Access'
'DXIL Resource Binding Analysis'
'DXIL Resource Implicit Binding'
'DXIL Resource Type Analysis'
'DXIL Resources Analysis'
'DXIL Root Signature Analysis'
'DXIL Shader Flag Analysis'
'DXIL Translate Metadata'
'DXIL validator installation path'
'Darwin libsystem_m'
'Data aggregation options'
'Dbi Stream Options'
'Dead Argument Elimination'
'Dead Argument Hacking (BUGPOINT USE ONLY; DO NOT USE)'
'Dead Code Elimination'
'Debug Variable Analysis'
'Debug control MBBs that are scheduled'
'Debug control for aggressive anti-dep breaker'
'Debug dumping for the orc-lazy JIT.'
'Debug func'
'Debug information offset.'
'Debug information tags.'
'Debug line.'
'Debug lines that are zero.'
'Debug location ranges.'
'Debug max inst'
'Debug min inst'
'Debug option to outline greedily, without restriction that calculated benefit outweighs cost'
'Debugify MIR before and Strip debug after each pass except those known to be unsafe when debug info is present'
'Debugify MIR before, by checking and stripping the debug info after, each pass except those known to be unsafe when debug info is present'
'Decided the kind of output desired'
'Declare callbacks extern weak, and only call if non-null.'
'Declare variables at top when emitting C/C++'
"Decreases 'x86-br-merging-base-cost' in cases that it is unlikely that all conditionals will be executed. For example for merging the conditionals (a == b && c > d), if its known that a == b is unlikely, then it is unlikely that if the conditionals are split both sides will be executed, so it may be desirable to decrease the instruction cost threshold. Set to -1 to never merge unlikely branches."
'Deduce sibling calls when unrolling function call stacks'
'Default (no attribute)'
'Default DWARF version to use, if a -g option caused DWARF debug info to be produced'
'Default address minimization strategy'
'Default alignment for loops'
'Default amount of inlining to perform'
'Default for platform'
'Default for platform and JIT-kind'
'Default max threads per block for kernel launch bounds for HIP'
'Default mispredict rate (initialized to 25%).'
'Default register allocator'
'Default threshold (max size of unrolled loop), used in all but O3 optimizations'
'Default type visibility'
'Defer host/device related diagnostic messages for CUDA/HIP'
"Define '__STDC__' to '1' in MSVC Compatibility mode"
'Define <macro> to <value> (or 1 if <value> omitted)'
'Define __STDC__'
'Define a value for a symbol'
'Define a variable to be used in capture patterns.'
'Define custom MSan AndMask'
'Define custom MSan OriginBase'
'Define custom MSan ShadowBase'
'Define custom MSan XorMask'
'Define macro'
'Define threshold for number of checks per debug location to force origin update.'
'Define where potential integer overflows in generated expressions should be tracked.'
'Defined the specified macros to their specified definition. The syntax is <macro>=<definition>'
'Defines a symbol to be an integer constant'
'Defines the __DEPRECATED macro'
'Delete specified Globals from Module'
'Delinearize array access functions'
'Delta passes to not run, separated by commas. By default, run all delta passes.'
'Delta passes to run, separated by commas. By default, run all delta passes.'
'Demangle function names'
'Demote catchswitch BBs only (for wasm EH)'
'Dependence Analysis'
'Dependences should be simplified (yes/no)'
'Dependency filename'
'Deprecated (like /Og /Oi /Ot /Oy /Ob2); use /O2'
'Deprecated (like not passing /EH)'
'Deprecated (set output file name); use /Fe or /Fe'
"Deprecated; use '-O3 -ffast-math -fstack-arrays' for the same behavior, or '-O3 -fstack-arrays' to enable only conforming optimizations"
"Deprecated; use '-O3 -ffast-math' for the same behavior, or '-O3' to enable only conforming optimizations"
'Deprecated; use /EHsc'
'Depth limit for finding address space through traversal'
'Depth limit when simplifying vector instructions and their operands'
'Deref attributes and metadata infer facts at definition only'
'Details for each and every function'
'Detect Dead Lanes'
'Detect and exploit reductions'
'Detect parallelism'
'Detect single entry single exit regions'
"Detect stack use after return if binary flag 'ASAN_OPTIONS=detect_stack_use_after_return' is set."
'Determine based on deployment target'
'Determine what attributes are manifested in the IR'
'Determine when the Swift async frame pointer should be set'
'Determines whether the optimizer honors parentheses when floating-point expressions are evaluated'
'Diagnostic ID mapping utility'
'Diff Options'
'Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes'
'Directories referenced in the debug information.'
'Directories to search for object files by build ID'
'Directory for crash diagnostic files.'
'Directory for outputting generated files.'
'Directory in which coverage information is written out'
'Directory in which to emit symbol graphs.'
'Directory of include files'
'Directory to dump module dependencies to'
"Directory to output dSYM's (if any) to"
'Directory to store cached object files (must be user writable)'
'Directory used as a base for relative coverage mapping paths'
'Disable BPF_ST (immediate store) insn'
'Disable C++ access control'
'Disable C++ builtin type char8_t'
'Disable C++ builtin type wchar_t'
'Disable C++ copy constructor elision'
'Disable C++ static destructor registration'
'Disable C++14 sized global deallocation functions'
'Disable C++17 aligned allocation functions'
'Disable CHR for all functions'
'Disable CIR transformations pipeline'
'Disable CTR loops for PPC'
'Disable CUDA Warp Function'
'Disable Codegen Prepare'
'Disable ConstantHoisting'
'Disable Copy Propagation pass'
'Disable Dealloc Return for Hexagon target'
'Disable Early If-conversion'
'Disable GC optimizations in CodeGenPrepare'
'Disable GNU style inline asm'
'Disable Hardware Loops for Hexagon target'
'Disable Hexagon Addressing Mode Optimization'
'Disable Hexagon CFG Optimization'
'Disable Hexagon HVX IEEE floating-point'
'Disable Hexagon HVX QFloat instructions'
'Disable Hexagon MI Scheduling'
'Disable Hexagon Vector eXtensions'
'Disable Hexagon constant propagation'
'Disable Hexagon instruction shuffling'
'Disable Hexagon loop alignment pass'
'Disable Hexagon packetizer pass'
'Disable Hexagon specific Mask generation pass'
'Disable JIT lazy compilation'
'Disable LTO mode (default)'
'Disable LTO mode (default) for offload compilation'
'Disable Linear Function Test Replace optimization'
'Disable Loongson Advanced SIMD Extension (LASX).'
'Disable Loongson SIMD Extension (LSX).'
'Disable Loop Idiom Vectorize Pass.'
'Disable Loop Strength Reduction Pass'
'Disable MC/DC coverage criteria'
'Disable MIRProfileLoader before BlockPlacement'
'Disable MIRProfileLoader before RegAlloc'
'Disable MSA ASE (MIPS only)'
'Disable MT ASE (MIPS only)'
'Disable Machine Common Subexpression Elimination'
'Disable Machine Dead Code Elimination'
'Disable Machine LICM'
'Disable Machine Sinking'
'Disable MergeICmps Pass'
'Disable New Value Jumps'
'Disable ODR indicator globals'
'Disable OpenMP optimizations involving SPMD-ization.'
'Disable OpenMP optimizations involving deglobalization.'
'Disable OpenMP optimizations involving folding.'
'Disable OpenMP optimizations that eliminate barriers.'
'Disable OpenMP optimizations that replace the state machine.'
'Disable OpenMP specific optimizations.'
'Disable OpenMP support'
'Disable Optimization of PNotP'
'Disable Optimization of Sign/Zero Extends'
'Disable Optimization of extensions to i64.'
'Disable PPC loop instr form prep'
'Disable Partial Libcall Inlining'
'Disable Peephole Optimization'
'Disable Post Regalloc Scheduler'
'Disable PostRA Machine Sinking'
'Disable SVR4-style position-independent code (Mips only)'
'Disable SYCL C++ extensions'
'Disable Sparc leaf procedure optimization.'
'Disable Stack Slot Coloring'
'Disable Trap Unreachable for BPF'
'Disable V8+ mode'
'Disable VSX FMA instruction mutation'
'Disable VSX Swap Removal for PPC'
'Disable Value Profiling'
'Disable XMM8-XMM15 register usage'
'Disable adding the optnone attribute to functions at O0'
'Disable advance peeling. Issues for convergent targets (D134803).'
'Disable advanced copy optimization'
'Disable aliasing mode in HWAddressSanitizer'
'Disable all Clang extensions for OpenMP directives and clauses'
'Disable all options'
'Disable all outlining'
'Disable all rules in the '
'Disable all static analyzer checks'
'Disable all vector combine transforms'
'Disable all warnings'
'Disable amcas[_db].{b/h/w/d}'
'Disable amswap[_db].{b/h} and amadd[_db].{b/h}'
'Disable analysis for CTR loops'
'Disable analyzing function argument and return types for mandatory definedness'
'Disable annotate table jump instruction to correlate it with the jump table.'
'Disable any #pragma clang __debug that can lead to crashing behavior. This is meant for testing.'
'Disable atomic operations instrumentation in ThreadSanitizer'
'Disable atomic optimizer'
'Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash'
'Disable automatic bitcode upgrade for version mismatch'
'Disable autoupgrade of debug info'
'Disable backend optimizations'
'Disable binop extract to shuffle transforms'
'Disable block signature string)'
'Disable both standard system #include directories and builtin #include directories'
'Disable branch folding'
'Disable branch optimizations in CodeGenPrepare'
'Disable bswap insns'
'Disable buffer security check'
'Disable builtin #include directories only'
'Disable calling convention lowering pass'
'Disable caret diagnostics but keep column info'
'Disable char8_t from c++2a'
'Disable checking of constexpr function bodies for validity within a constant expression context'
'Disable checks that try to statically verify validity of delinearized subscripts. Enabling this option may result in incorrect dependence vectors for languages that allow the subscript of one dimension to underflow or overflow into another dimension.'
'Disable clustered low occupancy rescheduling for ILP scheduling stage.'
'Disable code coverage analysis'
"Disable codegen and compile-time checks for C++23's [[assume]] attribute"
'Disable codegen data for function merging. Local merging is still enabled within a module.'
'Disable colors in diagnostics'
'Disable column and caret diagnostics'
'Disable combining of interleaved loads'
'Disable command line arguments round-trip.'
'Disable compare instruction optimization'
'Disable constant-folding of FP intrinsics and libcalls.'
'Disable control flow integrity (CFI) checks for cross-DSO calls.'
'Disable control-flow mitigations for Load Value Injection (LVI)'
'Disable convert to D suffix'
'Disable coverage pruning (i.e. instrument all blocks/edges)'
'Disable creation of CodeFoundation-type constant strings'
'Disable critical edge splitting during PHI elimination'
'Disable critical path priority in sched=list-ilp'
'Disable custom behaviour (use the default class which does nothing).'
'Disable cycle-level precision during preRA scheduling'
'Disable delayed template parsing'
'Disable detection of uninitialized parameters and return values'
'Disable diagnostic notes.'
'Disable direct TLS access through segment registers'
'Disable elimination of dead PHI nodes.'
'Disable emission .debug_ranges section.'
'Disable emission of core files if possible'
'Disable emission of the extended flags in .loc directives.'
'Disable emitting complete constructors and destructors as aliases when possible'
'Disable emitting metadata for binary analysis sanitizers'
'Disable experimental bounds safety extension for C'
'Disable experimental late parsing of attributes'
'Disable ext(promotable(ld)) -> promoted(ext(ld)) optimization in CodeGenPrepare'
'Disable external API notes support'
'Disable fat LTO object support'
'Disable features of APX'
'Disable features of coverage instrumentation for Sanitizers'
'Disable fixed point types'
'Disable fixing up resolved relocations for Hexagon'
'Disable frame pointer elimination'
'Disable frame pointer elimination for non-leaf frame'
'Disable frame pointer omission (x86 only, default)'
'Disable frecipe.{s/d} and frsqrte.{s/d}'
'Disable freeing of memory on exit'
'Disable function entry/exit instrumentation in ThreadSanitizer'
'Disable function inlining'
'Disable function internalization.'
'Disable function multiversioning'
'Disable function outlining (AArch64 only)'
'Disable fusing of spill code into instructions'
'Disable generation of RTTI data'
'Disable generation of const64'
'Disable generation of discriminator information.'
'Disable generation of gather instructions in auto-vectorization(x86 only)'
'Disable generation of instruction packets'
'Disable generation of linker directives for automatic library linking'
'Disable generation of memcpy in loop idiom recognition'
'Disable generation of memmove in loop idiom recognition'
'Disable generation of memop instructions'
'Disable generation of new-value jumps'
'Disable generation of new-value stores'
'Disable generation of profile instrumentation.'
'Disable generation of rtti information'
'Disable generation of scatter instructions in auto-vectorization(x86 only)'
'Disable global outlining only by ignoring the codegen data generation or use'
'Disable gotol insn'
'Disable hazard detection during preRA scheduling'
'Disable header insertions'
'Disable header removals'
'Disable heap memory profiling'
'Disable hoisting instructions to hotter blocks'
'Disable identical code folding (default)'
'Disable implicit addition of a top-level module op during parsing'
'Disable implicit builtin knowledge of a specific function'
'Disable implicit builtin knowledge of functions'
'Disable implicit builtin knowledge of math functions'
'Disable inclusion of timestamp in precompiled headers'
'Disable indirect call promotion'
'Disable instrumentation manager (use the default class which ignores instruments.).'
'Disable integer(KIND=16) from TargetCharacteristics'
'Disable integer(KIND=2) from TargetCharacteristics'
'Disable integrated assembler'
'Disable isel of shifter-op'
'Disable just-my-code debugging (default)'
'Disable keeping all variables that have a persistent storage duration, including global, static and thread-local variables, to guarantee that they can be directly addressed'
'Disable last run tracking'
'Disable late function splitting using profile information (x86 and aarch64 ELF)'
'Disable lazy module loading'
'Disable ldsx insns'
'Disable lifetime-markers emission even when optimizations are enabled'
'Disable linemarker output and preprocess to stdout'
'Disable linemarker output in -E mode'
'Disable linker dead stripping of globals in AddressSanitizer'
'Disable linker relaxation'
'Disable live use priority in sched=list-ilp'
'Disable load widening'
'Disable load-acquire and store-release insns'
'Disable load/store vectorizer'
'Disable loading default configuration files'
'Disable looking for compound instructions for Hexagon'
'Disable looking for duplex instructions for Hexagon'
'Disable loop unrolling in all relevant passes'
'Disable loop-level heuristics.'
'Disable machine peepholes for BPF'
'Disable machine peepholes for PPC'
'Disable memory access instrumentation in ThreadSanitizer'
'Disable memory promotion in LICM pass'
'Disable merging into combines'
'Disable merging of globals'
'Disable minimum alignment of 1 for arguments passed by value on stack'
'Disable mitigations for Load Value Injection (LVI)'
'Disable module-based external API notes support'
'Disable modules for C++'
'Disable movsx insns'
'Disable multi-region partial inlining'
'Disable multi-threading within MLIR, overrides any further call to MLIRContext::enableMultiThreading()'
'Disable multiplicative reductions'
'Disable no-stall priority in sched=list-ilp'
'Disable non conforming code from compiling (default)'
'Disable non-allocatable physical register copy optimization'
'Disable odd single-precision floating point registers'
"Disable omitting 'dls lr, lr' instructions"
'Disable on-demand initialization of thread-local variables'
'Disable one or more combiner rules temporarily in '
'Disable optimization'
'Disable optimizations based on strict aliasing rules'
'Disable optimizations based on vtable pointer identity'
'Disable optimize'
'Disable optimized frm insertion.'
'Disable origins tracking in MemorySanitizer'
'Disable output'
'Disable partial inlining'
'Disable physreg def-use affinity'
'Disable platform support explicitly'
'Disable poisoning array cookies when using custom operator new[] in AddressSanitizer'
'Disable polly legality check'
'Disable pre-instrumentation inliner'
'Disable pre-register allocation tail duplication'
'Disable precise memory mode (AMDGPU only)'
'Disable precompiled headers, overrides /Yc and /Yu'
'Disable predefined and command line preprocessor macros'
'Disable predefined target OS macros'
"Disable printing the 'ready' prompt"
'Disable probability-driven block placement'
'Disable promote alloca to LDS'
'Disable promote alloca to vector'
'Disable protection against removing loop preheaders'
'Disable raw string literals'
'Disable real(KIND=10) from TargetCharacteristics'
'Disable real(KIND=3) from TargetCharacteristics'
'Disable recovery for specified sanitizers'
'Disable regpressure priority in sched=list-ilp'
'Disable removal of sext.w'
'Disable removal of sign-extend insn'
'Disable replace with vector math call pass'
'Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones'
'Disable sanitizer metadata for modules and functions that match the provided special case list'
'Disable sanitizer statistics gathering.'
'Disable sc.q instruction.'
'Disable schedule adjustment for new value stores.'
'Disable scheduled-height priority in sched=list-ilp'
"Disable scheduler's two-address hack"
'Disable scheduling addi instruction beforeload for ppc'
'Disable sdiv/smod insns'
'Disable select to branch conversion.'
'Disable sharing the FileManager when building a module implicitly'
'Disable simplify-libcalls'
'Disable small data sections sorting'
'Disable specific target library builtin function'
'Disable speculative execution side effect suppression (SESES)'
'Disable spell-checking'
'Disable splitting double registers'
'Disable stack clash protection'
'Disable stack coloring'
'Disable stack probes which are enabled by default'
'Disable standard #include directories for the C++ standard library'
'Disable standard system #include directories'
'Disable standard system #include directories only'
'Disable store widening'
'Disable store(extract) optimizations in CodeGenPrepare'
'Disable string pooling'
'Disable strip W suffix'
'Disable support for K&R C function declarations'
'Disable support for exception handling'
'Disable support for int128_t type'
'Disable symbolizing crash backtraces.'
'Disable tail call optimization, keeping the call stack accurate'
'Disable tail duplication'
'Disable tail folding'
'Disable tail-predication in the ARM LowOverheadLoop pass'
'Disable that single precision floating-point divide and sqrt used in '
'Disable the ARM Parallel DSP pass'
'Disable the CFI fixup pass'
'Disable the DAG combiner'
'Disable the Sparc delay slot filler.'
'Disable the abort'
'Disable the abort but emit a diagnostic on failure'
'Disable the emission of assembler pseudo instructions'
'Disable the expand reduction intrinsics pass from running'
'Disable the generation of 4-operand madd.s, madd.d and related instructions.'
'Disable the generation of low-overhead loops'
'Disable the integrated assembler'
'Disable the loop interchange pass'
'Disable the loop vectorization passes'
'Disable the module hash'
'Disable the parsing of an implicit top-level module op'
'Disable the pass entirely'
'Disable the peephole optimizer'
'Disable the select-optimization pass from running'
'Disable the usage of LEB128 directives, and generate .byte instead.'
'Disable the use of non-volatile CR register fields'
'Disable the use of stack protectors'
'Disable the vector mask scheduling mutation'
'Disable the verifier on parsing (very unsafe)'
'Disable the wasm-opt optimizer'
'Disable thread-safe initialization of static variables'
'Disable threadgroup split execution mode (AMDGPU only)'
'Disable trapping for all sanitizers'
'Disable trapping for specified sanitizers'
'Disable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.'
'Disable trigraphs (default)'
'Disable two address hints for register allocation'
'Disable two-phase name lookup in templates (default)'
'Disable type promotion pass'
'Disable unclustered high register pressure reduction scheduling stage.'
'Disable unused template argument warnings.'
'Disable unwind v2 (epilog) information for x64 Windows'
'Disable use of DFA during scheduling'
'Disable use of LD/ST pairs for SME2 or SVE2p1'
'Disable use of builtin functions'
'Disable use-after-destroy detection in MemorySanitizer'
'Disable use-after-scope detection in AddressSanitizer'
'Disable using constant pool for large integers.'
'Disable using instrumentation data for profile-guided optimization'
'Disable using library calls for save and restore'
'Disable validation'
'Disable validation of precompiled headers'
'Disable validation of the diagnostic options when loading the module'
'Disable vector double new-value-stores'
'Disable verification of LLVM IR'
'Disable virtual register cycle interference checks'
'Disable whole program visibility (overrides enabling options)'
'Disable writing diagnostic options'
'Disable writing header search paths'
'Disable x86 relax relocations'
'Disabled.'
'Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)'
'Disables combining addressing modes with different parts in optimizeMemoryInst.'
'Disables debug printing for the new pass manager'
'Disables evaluation of GetElementPtr with constant operands'
'Disables inttoptr/ptrtoint roundtrip optimization'
'Disables potentially expensive checks in the transform interpreter, providing more speed at the expense of potential memory problems and silent corruptions'
'Disables the global instruction selector'
"Disallow '$' in identifiers"
'Disallow MIPS delay filler to search backward.'
'Disallow MIPS delay filler to search forward.'
'Disallow MIPS delay filler to search successor basic blocks.'
'Disallow __declspec as a keyword'
"Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'"
'Disallow atomic operations to ignore denormal mode'
'Disallow complex IT blocks'
'Disallow converting instructions with negative immediates to their negation or inversion.'
'Disallow generation of complex IT blocks. It is off by default.'
'Disallow generation of data access to code sections (AArch64/ARM only)'
'Disallow merging of constants'
'Disallow use of CRC instructions (ARM only)'
'Disallow use of CRC instructions (Mips only)'
'Disallow use of movt/movw pairs (ARM only)'
'Disassemble strings of hex bytes'
'Disassembler Options'
'Discard names from Value (other than GlobalValue).'
'Discard value names in LLVM IR'
'Discarded elements by the linker.'
'Discriminator.'
'Discriminators for inlined function instances.'
"Display PDB's MS system elements."
'Display all available options'
'Display all basic blocks'
'Display all class members including data, constants, typedefs, functions, etc'
'Display all symbols (default)'
'Display all types (implies -classes, -enums, -typedefs)'
'Display any symbol or type with the specified exact name'
'Display arrays'
'Display available options'
'Display available options (--help-hidden for more)'
'Display branch counts instead of percentages (requires -b)'
'Display branch probabilities'
'Display class types'
'Display compilands'
'Display data symbols'
'Display each error as well as a summary. [default]'
'Display each error in detail but no summary.'
'Display enum types'
'Display execution times'
'Display exploded graph using GraphViz'
'Display function signatures'
'Display function symbols'
'Display help for hidden options'
'Display include stacks for diagnostic notes'
'Display injected sources'
'Display list of all available options'
'Display list of available options (--help-list-hidden for more)'
"Display lists of good files (no compile errors), problem files, and a combined list with problem files preceded by a '#'."
'Display method for pass statistics'
'Display method for timing data'
'Display more information when dumping selection DAG nodes.'
'Display only a summary of the errors found.'
'Display patch-like changes'
'Display patch-like changes in quiet mode'
'Display patch-like changes in quiet mode with color'
'Display patch-like changes with color'
'Display pointer types'
'Display statistics as json data'
'Display suggestions to update code associated with -Wunsafe-buffer-usage warnings'
'Display symbols for each compiland'
'Display the SLP trees with Graphviz'
"Display the compiler's target processor"
'Display the count broken down by the filepath of each remark emitted. Requires remarks to have DebugLoc information.'
'Display the list of -analyzer-config options. These are meant for development purposes only!'
'Display the list of analyzer checkers that are available'
'Display the list of checker and package options'
'Display the list of checker and package options meant for development purposes only'
'Display the list of developer-only checkers such as modeling and debug checkers'
'Display the list of enabled analyzer checkers'
'Display the list of in development analyzer checkers. These are NOT considered safe, they are unstable and will emit incorrect reports. Enable ONLY FOR DEVELOPMENT purposes'
'Display the list of in development checker and package options. These are NOT considered safe, they are unstable and will emit incorrect reports. Enable ONLY FOR DEVELOPMENT purposes'
'Display the statistics of each pass'
'Display the version of the compiler'
'Display the version of this program'
'Display thunk symbols'
'Display typedef types'
'Display unconditional branch info (requires -b)'
'Display vftable shapes'
'Displays only those classes which have at least the specified amount of immediate padding, ignoring padding internal to bases and aggregates.'
'Displays only those classes which have at least the specified amount of padding.'
'Displays only those types which are greater than or equal to the specified size.'
'Distributor to use for ThinLTO backend compilations. Specifying this enables DTLTO.'
'Divisor of cold branch probability.BranchProbability = 1/ColdBranchProbDenom'
'Do PGO instrumentation sampling'
'Do counter register promotion'
'Do counter update using atomic fetch add  for promoted counters only'
'Do more PHI writes than necessary in order to avoid partial accesses'
'Do not accept non-standard constructs supported by the z/OS compiler'
'Do not add %INCLUDE% to include search path'
'Do not add -rpath with architecture-specific resource directory to the linker flags. When --hip-link is specified, do not add -rpath with HIP runtime library directory to the linker flags'
'Do not add a BTI instruction after a setjmp or other return-twice construct (Arm/AArch64 only)'
'Do not add include paths for CUDA/HIP and do not include the default CUDA/HIP wrapper headers'
'Do not add instruction count to lsr cost model'
'Do not add parameter bounds and do no gist simplify sets accordingly'
'Do not align and prefetch loops'
'Do not allocate the LR register for general purpose usage, only for calls. (AArch64 only)'
'Do not allow compiler to annotate sanitizer instrumentation with extra debug info for any sanitizers'
'Do not allow compiler to annotate sanitizer instrumentation with extra debug info for the specified sanitizers'
'Do not allow compiler to merge handlers for any sanitizers'
'Do not allow compiler to merge handlers for specified sanitizers'
'Do not assume C++ operator new may not return NULL'
'Do not assume that any loop is finite.'
'Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)'
'Do not automatically generate or update the global module index'
'Do not automatically import modules for error recovery'
'Do not build run-time checks to proof absence of integer wrapping'
'Do not bundle output files of HIP device compilation'
'Do not check authenticated address'
'Do not color Edges'
'Do not color Vertices'
'Do not color vertices'
'Do not combine ALU and memory operators'
'Do not consider inline-asm a scheduling/packetization boundary.'
'Do not convert branches that may exit the loop'
'Do not convert find-first-byte loop(s).'
'Do not create a host fallback if offloading to the device fails.'
'Do not create extra branches to split comparison logic.'
'Do not create unit-strided loops (default)'
'Do not discard comments when preprocessing'
'Do not discard value names in LLVM IR'
'Do not dllexport/dllimport inline member functions of dllexport/import classes'
'Do not drop any type tests'
'Do not dump MSF file headers'
'Do not elide types when printing diagnostics'
'Do not eliminate read instrumentation for read-before-writes'
'Do not embed'
'Do not emit  debug info for defined but unused types'
'Do not emit RTTI data'
"Do not emit a trap instruction for 'unreachable' IR instructions after noreturn calls, even if --trap-unreachable is set."
'Do not emit code that uses the red zone.'
'Do not emit code to make initialization of local statics thread safe'
'Do not emit code to perform on-demand initialization of thread-local variables'
'Do not emit macro debug information'
'Do not emit metadata containing compiler name and version'
'Do not emit pseudo probes for sample profiling'
'Do not emit remarks about assumptions that are known'
'Do not enforce -fmodules-decluse and private header restrictions for textual headers. This flag will be removed in a future Clang release.'
'Do not error on use of NSAllocateCollectable/NSReallocateCollectable'
'Do not execute loaded code'
'Do not extend the -G behaviour to object local data (MIPS)'
'Do not fail and just print warnings.'
'Do not fail on the first error.'
'Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).'
'Do not force validation of user headers when repeatedly loading a module file within single build session'
'Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH'
'Do not generate comments'
'Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere'
'Do not generate same-address load-load barrier instructions (dbar 0x700)'
'Do not globally set the denormals-are-zero (DAZ) and flush-to-zero (FTZ) bits in the floating-point control register on program startup'
'Do not hoist instructions if targetblock is N times hotter than the source.'
"Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once."
'Do not include column number on diagnostics'
'Do not include declarations inside namespaces (incl. global namespace) in the code-completion results.'
'Do not include fixit information in diagnostics'
'Do not include global declarations in code-completion results.'
'Do not include source location information with diagnostics'
'Do not include the default HIP wrapper headers and include paths'
'Do not inline functions with a stack size that exceeds the specified limit'
'Do not inline hlfir.copy_in operations'
'Do not inline recursive functions with a stack size that exceeds the specified limit'
'Do not instrument callsites to functions in this list. Intended for testing.'
'Do not instrument functions smaller than this threshold.'
'Do not instrument functions with the number of critical edges  greater than this threshold.'
'Do not instrument promotable allocas'
'Do not label Edges'
'Do not label Vertices'
'Do not let object file auto-link default libraries'
'Do not link against HIP runtime libraries'
'Do not link device library for CUDA/HIP device compilation'
'Do not make the jump table addresses canonical in the symbol table'
'Do not modify integer comparisons.'
'Do not omit the RTTI component from virtual tables'
'Do not optimize lifetime zones that are broken'
'Do not output any .gcov files'
'Do not override toolchain to compile HIP source to relocatable'
'Do not pack non-contiguous assumed shape dummy arrays into contiguous memory'
'Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)'
'Do not preserve comments in inline assembly'
'Do not prevent DecoderTable duplications caused by HwModes'
'Do not print instruction tables'
'Do not print per-code histogram'
'Do not print the name of each compiled file (default)'
'Do not process trigraph sequences'
'Do not produce relaxation hints for linkers to try optimizing PIC call sequences into direct calls (MIPS only)'
'Do not prune non-affecting module map files when writing module files'
'Do not put each data item in its own section (default)'
'Do not put each function in its own section (default)'
'Do not re-analyze paths leading to exhausted nodes with a different strategy (may decrease code coverage)'
'Do not read real performance counters, use dummy values (for testing)'
'Do not rebase if number of dependent constants of a Base is less than this number.'
'Do not record stack ring history'
'Do not remove finalize method in gc mode'
'Do not remove function attributes'
'Do not remove global named metadata'
'Do not remove global variables'
'Do not remove implausible terminators or other similar cleanups'
'Do not report an error for non-bitcode files in archives'
'Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI'
"Do not resolve lli process symbols in JIT'd code"
'Do not resolve to llvm-jitlink process symbols'
'Do not run the verifier'
'Do not run the verifier during the optimization pipeline'
'Do not run verifier on input LLVM (dangerous!)'
'Do not separate the constant offset from a GEP instruction'
'Do not set the default structure layout to be compatible with the Microsoft compiler standard'
'Do not sink instructions that have too many uses.'
'Do not sink instructions that require cloning unless they execute less than this percent of the time.'
'Do not split loads or stores'
'Do not strip debug info metadata'
'Do not strip debug type info metadata'
'Do not take inbounds assumptions at all'
'Do not treat C++ operator name keywords as synonyms for operators'
'Do not treat all horizontal whitespace as equivalent'
'Do not treat usage of null pointers as undefined behavior'
'Do not treat warnings as errors (default)'
'Do not try to find alias store for a load if the block number in the straight line is higher than this threshold.'
'Do not try to find alias store for a load if there is a in-path block whose instruction number is higher than this threshold.'
'Do not use CSPGO.'
'Do not use GP relative accesses for symbols known to be in a small data section (MIPS)'
'Do not use HLFIR lowering (deprecated)'
'Do not use PGO.'
'Do not use an early exit if isLiveOutPastPHIs returns true.'
'Do not use compact branches if possible.'
'Do not use div.w[u] and mod.w[u] instructions with input not sign-extended.'
'Do not use hardware multiplier'
'Do not use jump tables for lowering switches'
'Do not use more megabytes of memory'
'Do not use the -dce pass to reduce testcases'
'Do not use the -simplifycfg pass to reduce testcases'
'Do not use the analyzed objects when unparsing'
'Do not use the experimental C++ class ABI for classes with virtual tables'
'Do not validate testcase is interesting after counting chunks (may speed up reduction)'
'Do not verify input module'
'Do not warn about individual formatting changes needed. Used only with --dry-run or -n'
'Do not write current time into COFF output (breaks link.exe /incremental)'
'Do not write result bitcode file'
'Do not zero initialize globals without default initialization'
'Do nothing'
'Do profile annotation and inlining for functions in top-down order of call graph during sample profile loading. It only works for new pass manager. '
'Do pseudo probe verification'
'Do static counter allocation for value profiler'
'Document only public declarations.'
'Documentation in HTML format.'
'Documentation in JSON format'
'Documentation in MD format.'
'Documentation in YAML format.'
'Documentation in mustache HTML format'
'Dominance Frontier Construction'
'Dominator Tree Construction'
"Don't Use the new driver for offloading compilation."
"Don't allow device side init function in HIP (experimental)"
"Don't allow loop unrolling to simulate more than this number of iterations when checking full unroll profitability"
"Don't assume assembly file starts in the text section"
"Don't assume data segments are relative to text segment"
"Don't assume that C++'s global operator new can't alias any pointer"
"Don't assume that kernels are launched with uniform block sizes (default true for CUDA/HIP and false otherwise)"
"Don't automatically start assembly file with a text section"
"Don't clear counters across dumps (use with instrumentation-sleep-time option)"
"Don't clear the Clang AST before running backend code generation"
"Don't convert memcpy to TP loop."
"Don't defer host/device related diagnostic messages for CUDA/HIP"
"Don't demangle function names"
"Don't disable block signature string)"
"Don't disable features used for crash debugging (crash reports, llvm-symbolizer and core dumps)"
"Don't disable freeing of memory on exit"
"Don't discard temporary labels"
"Don't display class definitions"
"Don't display full enum definitions"
"Don't do the coverage check."
"Don't dump anything."
"Don't emit an address-significance table"
"Don't emit anything (for timing purposes)"
"Don't emit compiler path and command line into CodeView debug information"
"Don't emit errors on invalid analyzer-config inputs"
"Don't emit inline line tables."
"Don't emit warning for unused driver arguments"
"Don't emit warnings about unused arguments for the following arguments"
"Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture."
"Don't expand conditional move related pseudos for Mips 16"
"Don't export branch data (LCOV)"
"Don't export expanded source regions"
"Don't export per-function data"
"Don't extract blocks when searching for miscompilations"
"Don't extract loops when searching for miscompilations"
"Don't generate implicit floating point or vector instructions"
"Don't generate local calls to out-of-line atomic operations"
"Don't include vectorization factors, etc."
"Don't instrument functions with loops unless they also meet the minimum function size"
"Don't instrument scalar globals"
"Don't instrument scalar stack variables"
"Don't keep static const variables even if unused"
"Don't match or outline intrinsics"
"Don't mutate strict-float node to a legalize node"
"Don't output the .ll file"
"Don't perform type checking of the assembly code (wasm only)"
"Don't place zero initialized data in BSS"
"Don't place zero-initialized symbols into bss section"
"Don't prefer any addressing mode"
"Don't preserve line numbers (default)"
"Don't preserve order of LLVM use-lists when serializing"
"Don't propagate function-attrs in thinLTO"
"Don't relax loads to long loads - for testing purposes"
"Don't run the LLVM IR verifier pass"
"Don't run the LLVM verifier during the optimization pipeline"
"Don't show any SymIndexId fields (overrides -hierarchy)"
"Don't show compiler generated types and symbols"
"Don't show symbols from system libraries"
"Don't specialize functions that have less than this number of instructions"
"Don't specify that kernel argument names are preserved (HIP only)"
"Don't specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)"
"Don't tail-predicate loops"
"Don't tail-predicate loops, create scalar epilogue"
"Don't treat conditional branches as disclosure gadgets. This may improve performance, at the cost of security."
"Don't treat control flow paths that fall off the end of a non-void function as unreachable"
"Don't treat unattributed constexpr functions as __host__ __device__."
"Don't try to avoid heapifying local blocks"
"Don't use GOT indirection to reference external data symbols"
"Don't use LLVM/Offload as portable offloading runtime."
"Don't use __cxa_atexit for calling destructors"
"Don't use a const qualified type for string literals in C and ObjC"
"Don't use a uniquing type map for debug info"
"Don't use approximate transcendental functions"
"Don't use atexit or __cxa_atexit to register global destructors"
"Don't use constructor homing for debug info"
"Don't use ignorelist file for sanitizers"
"Don't use new kernel launching API for HIP"
"Don't use the new driver for OpenMP offloading."
"Don't use unique names for text and data sections"
"Don't verify input files for the modules if the module has been successfully validated or loaded during this build session"
"Don't verify that MIR is fully legal between GlobalISel passes"
"Don't work around Cortex-A57 Erratum 1742098 (ARM only)"
"Don't work around Cortex-A72 Erratum 1655431 (ARM only)"
"Don't work around VLLDM erratum CVE-2021-35465 (ARM only)"
"Don't workaround Cortex-A53 erratum 835769 (AArch64 only)"
"Don't write fields with default values"
"Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))"
'Dr. Watson Assassin.\n'
'Drop all type test sequences'
'Drop the profile symbol list when merging AutoFDO profiles (only meaningful for -sample)'
'Drop type test assume sequences'
'DummyCGSCCPass'
'Dump AMDGPU HSA Metadata'
'Dump C11 CodeView debug chunks'
'Dump C13 CodeView debug chunk subsection'
'Dump CallingContextGraph to stdout after each stage.'
'Dump IR after transformation happens'
'Dump IR from modules to stderr on shutdown'
'Dump IR to reproduce successful transformations.'
'Dump JITted-compiled object to file <input file>.o'
'Dump JITted-compiled object to file specified with -object-filename (<input file>.o by default).'
'Dump MIR with SPIR-V dependencies info'
'Dump __jit_debug_descriptor contents to stdout'
'Dump __jit_debug_descriptor in-memory debug objects as tool output'
'Dump a detailed breakdown of IPI types usage/size'
'Dump a detailed breakdown of S_UDT record usage / stats'
'Dump a detailed breakdown of symbol usage/size for each module'
'Dump a detailed breakdown of type usage/size'
"Dump all declarations in old header (JSON format) to stdout. If the option is specified, other command options will be ignored. An empty JSON will be returned if old header isn't specified."
'Dump all records as machine-readable JSON'
'Dump all substituted intrs'
'Dump array types'
'Dump binary data from specified range of blocks.'
'Dump binary data from specified range of bytes'
'Dump binary data from specified streams.  Format is SN[:Start][@Size]'
'Dump bytes of PDB Name Map'
'Dump code-completion information at a location'
'Dump compiland information'
'Dump configuration options to stdout and exit.\nCan be used with -style option.'
'Dump declarations that are deserialized from PCH, for testing'
'Dump dropped debug variables stats'
'Dump dropped debug variables stats for MIR passes'
"Dump each stream's block map (implies -stream-metadata)"
'Dump edit and continue map'
'Dump enum types'
'Dump everything we know how to dump.'
'Dump exploded graph to the specified file'
'Dump external symbols'
'Dump free page map'
'Dump function names to stdout.'
'Dump function signature information'
'Dump global symbols'
'Dump graphs for each function/round in the compilation unit.'
'Dump image section headers'
'Dump input on failure'
"Dump input to stderr, adding annotations representing\ncurrently enabled diagnostics.  When there are multiple\noccurrences of this option, the <value> that appears earliest\nin the list below has precedence.  The default is 'fail'.\n"
'Dump list of actions to perform'
'Dump low level bitcode trace'
'Dump module after Polly transformations into a file suffixed with "-after"'
'Dump module after Polly transformations to the given file'
'Dump module before Polly transformations into a file suffixed with "-before"'
'Dump module before Polly transformations to the given file'
'Dump module info'
'Dump modules to stdout.'
'Dump modules to the current working directory. (WARNING: will overwrite existing files).'
'Dump new file contents in YAML, if specified.'
'Dump provenance'
'Dump ranges of deserialized declarations to use as bug minimization hints'
'Dump record layout information'
'Dump record layout information for all complete types'
'Dump record layout information in a simple form used for testing'
'Dump record layout information with canonical field types'
'Dump register information to help debugging'
'Dump resource usage at schedule boundary.'
'Dump results in JSON format to stdout.'
'Dump section contributions'
'Dump section map'
'Dump source file info'
'Dump sum of timings for all stacks. By default separates stacks per-thread.'
'Dump symbol record substream'
'Dump symbols after the semantic analysis'
'Dump symbols and the parse tree after the semantic checks'
'Dump symbols and their source code locations'
'Dump templight information to stdout'
'Dump the DBI Stream Headers (Stream 2)'
'Dump the FIR created by lowering and exit'
'Dump the HLFIR created by lowering and exit'
'Dump the IPI Stream (Stream 5)'
'Dump the PDB Stream (Stream 1)'
'Dump the PDB String Table'
'Dump the Publics Stream'
"Dump the SCCs in the ThinLTO index's callgraph"
'Dump the TPI Stream (Stream 3)'
'Dump the compiler configuration options'
'Dump the cooked character stream in -E mode'
'Dump the coverage mapping records, for testing'
'Dump the dependency graph to dot files.'
'Dump the gcov file to stderr'
'Dump the id record with the given type index'
'Dump the layouts of all vtables that will be emitted in a translation unit'
'Dump the list of input files and their weights, then exit'
"Dump the number of streams and each stream's size"
'Dump the parse tree'
'Dump the parse tree (skips the semantic checks)'
'Dump the pre-FIR tree'
'Dump the pre-fir parse tree'
"Dump the source files that contribute to each module's."
'Dump the type record with the given type index'
'Dump the unsymbolized profile to the output file. It will show unwinder output for CS profile generation.'
'Dump type server map'
'Dump typedefs'
'Dump udt types'
'Dump virtual table shapes'
'Duplicate the snippet'
'During rematerialization for a copy, if the def instruction has many other copy uses to be rematerialized, delay the multiple separate live interval update work and do them all at once after all those rematerialization are done. It will save a lot of repeated work. '
'Dwarf version'
'Dynamic libraries to load before linking'
'Dynamic scheduling'
'Dynamically link the sanitizer runtime'
'EABI GNU'
'EABI version 4'
'EABI version 5'
'Eagerly compute live intervals for all physreg units.'
'Eagerly invalidate more analyses in default pipelines'
'Early CSE'
'Early CSE w/ MemorySSA'
'Early If Converter'
'Early If Predicator'
'Early Machine Loop Invariant Code Motion'
'Early Tail Duplication'
'Early expansion of MUX'
'Element attributes.'
'Element debug location.'
'Element declaration and definition references.'
'Element referenced across Compile Units.'
'Element referenced only in the Compile Unit.'
'Element to print.'
'Elements to compare.'
'Elide ElementsAttrs with "..." that have more elements than the given upper limit'
'Elide printing value of resources if string is too long in chars.'
'Elide resources when generating bytecode'
'Eliminate PHI nodes for register allocation'
'Eliminate scalar loop carried dependences'
'Embed DXIL'
'Embed LLVM IR bitcode as data'
'Embed LLVM bitcode'
'Embed LLVM bitcode in object files produced by LTO'
'Embed Offloading device-side binary into host object file as a section.'
'Embed PDB in shader container (ignored)'
'Embed after all optimization passes'
'Embed function arity information into the KCFI patchable function prefix'
'Embed placeholder LLVM IR data as a marker'
'Embed post merge, but before optimizations'
'Embed source text in DWARF debug sections'
'Embed the contents of all files read by this compilation into the produced module file.'
'Embed the contents of the specified file into the module file being compiled.'
'Emit  debug info for defined but unused types'
'Emit (experimental) loops (with sparse.iterate).'
'Emit .secure_log_unique directives to this filename.'
'Emit .su file containing information on function stack sizes'
'Emit AT&T-style assembly'
'Emit Apple-style NEON assembly'
'Emit Clang AST files for source inputs'
'Emit CodeGen Data into custom sections'
'Emit GNU Assembly Syntax on z/OS.'
'Emit GOTPCRELX/REX_GOTPCRELX/CODE_4_GOTPCRELX instead of GOTPCREL on x86-64 ELF'
'Emit IR to support LTO unit features (CFI, whole program vtable opt)'
'Emit Import Call sections on supported targets that can be used by the Windows kernel to enable import call optimization'
'Emit Intel-style assembly'
'Emit JSON-formatted debug info quality metrics.'
'Emit LLVM textual assembly'
'Emit OpenMP code only for SIMD-based constructs.'
'Emit PCs for atomic operations used by binary analysis sanitizers'
'Emit PCs for atomic operations.'
'Emit PCs for code covered with binary analysis sanitizers'
'Emit PCs for covered functions.'
'Emit PCs for start of functions that are subject for use-after-return checking'
'Emit PCs for start of functions that are subject for use-after-return checking.'
'Emit RTTI data (default)'
'Emit R_RISCV_SET_ULEB128/E_RISCV_SUB_ULEB128 if appropriate'
'Emit SPIR-V NonSemantic.Shader.DebugInfo.100 instructions'
'Emit VPU instructions for VE'
'Emit Windows Control Flow Guard tables and checks'
'Emit Windows Control Flow Guard tables only (no checks)'
'Emit Windows EH Continuation Guard tables'
'Emit a call to trap function rather than a trap instruction'
'Emit a compilation database fragment to the specified directory'
'Emit a diagnostic when "fast" instruction selection falls back to SelectionDAG.'
'Emit a fatal error if format parsing fails'
"Emit a native object ('.o') file"
'Emit a section containing jump table addresses and sizes'
'Emit a section containing remark diagnostics metadata. By default, this is enabled for the following formats: yaml-strtab, bitstream.'
'Emit a section containing stack size metadata'
'Emit a warning if less than N% of records in the input profile are matched to the IR.'
'Emit a warning if less than N% of samples in the input profile are matched to the IR.'
'Emit all declarations, even if unused'
'Emit an address-significance table'
"Emit an assembly ('.s') file"
'Emit an error if a C++ static local initializer would need a guard variable'
'Emit analyzer results as errors rather than warnings'
'Emit basic blocks into separate sections'
'Emit bytecode when generating output'
'Emit call site debug information, if debug information is enabled.'
'Emit code that can be JIT compiled for OpenMP offloading. Implies -foffload-lto=full'
'Emit code that prints the runtime check result dynamically.'
'Emit codegen data into the object file. LLD for MachO (currently) merges them into default.cgdata.'
'Emit codegen data into the object file. LLD for MachO (currently) merges them into the specified <path>.'
'Emit colored output (default=autodetect)'
'Emit compiler path and command line into CodeView debug information'
'Emit complete descriptions of template parameters in forward declarations'
'Emit data into separate sections'
'Emit debug info that places array-bounds instrumentation in an inline function called __ubsan_check_array_bounds.'
'Emit debug line info directives only'
'Emit debug line number tables only'
'Emit emitc.file ops with matching id'
'Emit emptylines and comment lines as skipped regions (only disable it on test)'
'Emit error if a specific declaration is deserialized from PCH, for testing'
'Emit expensive warnings during LLVM IR import (discouraged: testing only!)'
'Emit extra debug info to make sample profile more accurate'
'Emit final result as bitcode instead of text IR'
'Emit full debug info for all types used by the program'
'Emit functional code (with scf.for/while).'
'Emit functional code or interfaces (to debug) for sparse loops'
'Emit functions into separate sections'
'Emit generic NEON assembly'
'Emit hermetic module files (no nested USE association)'
'Emit hexagon jump tables in function section'
'Emit hexagon lookup tables in function section'
'Emit homogeneous prologue and epilogue for the size optimization (default = off)'
'Emit imports files for distributed backends.'
'Emit information about accumulator register spills and copies'
'Emit internal instruction representation to assembly file'
'Emit kernels to call ctor/dtor globals.'
'Emit limited coverage mapping information (experimental)'
'Emit log of dataflow analysis. With no arg, writes textual log to stderr. With an arg, writes HTML logs under the specified directory (one per analyzed function).'
'Emit macro debug information'
'Emit metadata containing compiler name and version'
'Emit module hash'
'Emit module summary index'
'Emit native object files'
'Emit non-functional but easy-to-read interfaces to debug.'
'Emit nothing, for performance testing'
'Emit numeric info in dump even if symbolic info is available'
'Emit output in the selected format if supported'
'Emit pretty printed symbol graphs'
'Emit pristine LLVM IR from the frontend by not running any LLVM passes at all.Same as -S + -emit-llvm + -disable-llvm-passes.'
'Emit private/local variables as clauses/specifiers on MLIR ops.'
'Emit pseudo probes for sample profiling'
'Emit pseudo probes to enable PGO profile generation.'
'Emit reproducer on (option: off, crash (default), error, always)'
'Emit section containing metadata on function stack sizes'
'Emit special compound instrumentation for reads-before-writes'
'Emit special debug info to enable PGO profile generation.'
'Emit special instrumentation for accesses to volatiles'
'Emit the GNU .debug_macro format with DWARF <5'
'Emit the XCOFF traceback table'
'Emit the basic block address map section'
'Emit the basic block address map section.'
'Emit the specified combiners'
'Emit type record hashes in a .debug$H section'
"Emit verbose output about the analyzer's progress"
'Emit x8 as fp instead of s0'
'Emit xray_fn_idx section'
'Emits more virtual tables to improve devirtualization'
'Emulate weak link against library X. Must resolve to a TextAPI file, and all symbols in the interface will resolve to null.'
'Emulate weak link against library X. X must point to a TextAPI file, and all symbols in the interface will resolve to null'
'Enable -Wall'
'Enable -Wall and -Wextra'
'Enable -Weverything'
'Enable -Wsystem-headers'
'Enable -Wsystem-headers when building <module>'
'Enable -time-passes memory tracking (this may be slow)'
'Enable .XOR. as a synonym of .NEQV.'
'Enable / disable ARM interworking (for debugging only)'
'Enable / disable SVE scalable vectors in Global ISel'
'Enable / disable promotion of unnamed_addr constants into constant pools'
'Enable 16-bit types and disable min precision types.Available in HLSL 2018 and shader model 6.2.'
'Enable <feature> in module map requires declarations'
'Enable AArch64 SME memory operations to lower to librt functions'
'Enable AArch64 logical imm instruction optimization'
'Enable AMDGPU Alias Analysis'
'Enable AMDGPU function call support'
'Enable AMDGPUAttributorPass'
'Enable APX features (EGPR, NDD and NF) for instructions with relocations on x86-64 ELF'
'Enable ARC-style weak references in Objective-C'
'Enable ARM load/store optimization pass'
'Enable AddressSanitizer'
'Enable AltiVec vector initializer syntax'
'Enable Apple gcc-compatible #pragma pack handling'
'Enable BFI update verification for CodeGenPrepare.'
'Enable C++ builtin type char8_t'
'Enable C++ builtin type wchar_t (default)'
'Enable C++ exceptions'
'Enable C++14 sized global deallocation functions'
'Enable C++17 aligned allocation functions'
'Enable C-SKY asm compressed instruction'
'Enable CABAC instructions'
'Enable CREL relocation format (ELF only)'
'Enable CodeView debug information in object files'
'Enable Control Flow Guard with /guard:cf, or only the table with /guard:cf,nochecks. Enable EH Continuation Guard with /guard:ehcont'
'Enable CopyToPhi DAG Mutation'
"Enable DAG combiner's use of IR alias analysis"
"Enable DAG combiner's use of TBAA"
'Enable DFA jump threading'
'Enable DPP combiner'
'Enable Debug Info Metadata preservation testing in optimizations.'
'Enable Debugger hook for debugging MLIR Actions'
'Enable EH Asynchronous exceptions'
'Enable EVL-based induction variable simplify Pass'
'Enable FP math optimizations that assume approx func'
'Enable FP math optimizations that assume no +-Infs'
'Enable FP math optimizations that assume no NaNs'
'Enable FP math optimizations that assume the sign of 0 is insignificant'
'Enable Fast Math processing'
'Enable Freestanding (disable builtins / TLI) during LTO'
'Enable GPU Mode managed|unified'
'Enable Global-ISel Big Endian Lowering'
'Enable GlobalISel at or below an opt level (-1 to disable)'
"Enable GlobalISel's post-legalizer load/store optimization pass"
"Enable GlobalISel's pre-legalizer load/store optimization pass"
'Enable HIP Standard Parallelism Offload support'
'Enable HIP acceleration for standard parallel algorithms'
'Enable HVX IEEE floating point extensions'
'Enable HVX vector combining'
'Enable Hexagon HVX IEEE floating-point'
'Enable Hexagon HVX QFloat instructions'
'Enable Hexagon SDNode scheduling'
'Enable Hexagon Vector eXtensions'
'Enable Hexagon Vector print instr pass'
'Enable Hexagon constant-extender optimization'
'Enable Hexagon copy hoisting'
'Enable Hexagon-specific memcpy for volatile destination.'
'Enable IBM XL #pragma pack handling'
'Enable ICMP_EQ to ICMP_S(L|G)T conversion.'
'Enable JumpTableToSwitch pass (default = off)'
'Enable KernelAddressSanitizer instrumentation'
'Enable KernelHWAddressSanitizer instrumentation'
'Enable KernelMemorySanitizer instrumentation'
'Enable Key Instructions, which reduces the jumpiness of optimized code stepping (DWARF only). Requires LLVM built with LLVM_EXPERIMENTAL_KEY_INSTRUCTIONS.'
'Enable LSR phi elimination'
"Enable LTO in 'full' mode"
"Enable LTO in 'full' mode for offload compilation"
'Enable Loongson Advanced SIMD Extension (LASX).'
'Enable Loongson SIMD Extension (LSX).'
'Enable MASM-style hex float initializers (3F800000r)'
'Enable MC/DC criteria when generating code coverage'
'Enable ML policy for inliner. Currently trained for -Oz only'
'Enable MSA ASE (MIPS only)'
'Enable MT ASE (MIPS only)'
'Enable Machine Pipeliner for AArch64'
'Enable Machine Pipeliner for PPC'
'Enable Machine Pipeliner for RISC-V'
'Enable MemProf context disambiguation'
'Enable MemProf support for summarizing and cloning indirect calls'
'Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size'
'Enable Objective-C Ivar layout bitmap print trace'
'Enable Objective-C exceptions'
'Enable Objective-C garbage collection'
'Enable OpenACC'
'Enable OpenMP support'
'Enable OpenMP support with experimental SIMD support'
'Enable PC tracing in sanitizer coverage'
'Enable PC tracing with guard in sanitizer coverage'
'Enable PGO instrumentation'
'Enable Passing SSP Canary info in Trackback on AIX'
'Enable PatchPoint Liveness Analysis Pass'
'Enable PostRA load and store clustering in the machine scheduler'
'Enable Pre-RA optimizations pass'
'Enable RDF-based optimizations'
'Enable SDWA peepholer'
'Enable SVE intrinsic opts'
'Enable SVR4-style position-independent code (Mips only)'
'Enable SWP at Os.'
'Enable SYCL C++ extensions'
'Enable Software Pipelining'
'Enable System z vector language extension'
'Enable ThinLTO caching.'
'Enable Unroll And Jam Pass'
'Enable V8+ mode, allowing use of 64-bit V9 instructions in 32-bit code'
'Enable VGPR liverange optimizations for if-else structure'
'Enable VOPD, dual issue of VALU in wave32'
'Enable VPlan-native vectorization path with support for outer loop vectorization.'
'Enable X86 indirect branch tracking pass.'
'Enable a 2nd level loop of loop tiling'
'Enable a specific type of debug output (comma separated list of types)'
'Enable abort calls when "fast" instruction selection fails to lower an instruction: 0 disable the abort, 1 will abort but for args, calls and terminators, 2 will also abort for argument lowering, and 3 will never fallback to SelectionDAG.'
'Enable abort calls when "global" instruction selection fails to lower/select an instruction'
'Enable adding flow sensitive discriminators'
'Enable adding inline-remark attribute to callsites processed by inliner but decided to be not inlined'
'Enable additional debug output'
'Enable address discrimination of function pointers in init/fini arrays'
'Enable address discrimination of vtable pointers'
'Enable aggressive formation of fused FP ops'
'Enable aliasing mode in HWAddressSanitizer'
'Enable all Clang extensions for OpenMP directives and clauses'
'Enable all mitigations for Load Value Injection (LVI)'
'Enable all options'
'Enable all traces.'
"Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)"
'Enable amcas[_db].{b/h/w/d}'
'Enable amdgpu library simplifications'
'Enable amswap[_db].{b/h} and amadd[_db].{b/h}'
'Enable analysis of vscale-relative immediates in LSR'
'Enable analyzing function argument and return types for mandatory definedness'
'Enable annotate table jump instruction to correlate it with the jump table.'
'Enable array bounds checking'
'Enable assumed rank lowering'
'Enable atomic operations instrumentation in ThreadSanitizer (default)'
'Enable authentication of pointers from GOT (ELF only)'
'Enable auto-vectorization of floatint point types on v68.'
'Enable basic block tracing in sanitizer coverage'
'Enable binary and hex Motorola integers (%110 and $ABC)'
'Enable binary and hex masm integers (0b110 and 0ABCh)'
'Enable binary output on terminals'
'Enable bottleneck analysis (disabled by default)'
'Enable branch hint.'
'Enable branch prediction'
'Enable branch probability info'
'Enable buffer security check (default)'
'Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it'
'Enable caret and column diagnostics (default)'
'Enable casting unknown expression results to id'
"Enable cf-protection in 'full' mode"
'Enable chain commoning in PPC loop prepare pass.'
'Enable char8_t from C++2a'
'Enable checking for cache bank conflicts'
"Enable checking of SDNode's single-use status"
'Enable checking of constexpr function bodies for validity within a constant expression context'
'Enable cmp instruction tracing in sanitizer coverage'
'Enable code sinking'
'Enable cold function only instrumentation.'
'Enable collecting coverage from system headers'
'Enable colors in diagnostics'
'Enable command line arguments round-trip.'
'Enable commoning of GEP instructions'
'Enable conflict detection in loop-access analysis'
'Enable consecutive memop optimization in AArch64PostLegalizerCombiner'
'Enable continuous instrumentation profiling mode'
'Enable control flow (and PHI) hoisting in LICM'
'Enable control flow integrity (CFI) checks for cross-DSO calls.'
'Enable control flow structurization into `spirv.mlir.selection` and `spirv.mlir.loop`. This may need to be disabled to support deserialization of early exits (see #138688)'
'Enable control height reduction optimization (CHR)'
'Enable conversion of arithmetic operations to predicate instructions'
'Enable converting conditional transfers into MUX instructions'
'Enable converting phi types in CodeGenPrepare'
'Enable crash diagnostic reporting (default)'
'Enable cross-cu references in DWO files'
'Enable cyclic critical path analysis.'
'Enable debug info for the debug entry values.'
'Enable debug messages while writing module files'
'Enable debug output'
'Enable debug output for only polly passes.'
'Enable debugger suppport (default = !-noexec)'
'Enable debugging in the OpenMP offloading device RTL'
'Enable debuginfod'
'Enable deferred inlining'
'Enable dense outer loop sparse parallelization.'
'Enable dense parallelization for any loop.'
'Enable detailed timing of insert generation'
'Enable detection of uninitialized parameters and return values'
'Enable device-side debug info generation. Disables ptxas optimizations.'
'Enable direct TLS access through segment registers (default)'
'Enable div instruction tracing in sanitizer coverage'
'Enable early if-conversion'
'Enable early if-conversion on X86'
'Enable elimination of non-kernel functions and unused globals'
'Enable emitting RISC-V ELF attributes for ABI features'
'Enable emitting complete constructors and destructors as aliases when possible'
'Enable enhanced struct-path aware Type Based Alias Analysis'
'Enable experimental bounds safety extension for C'
'Enable experimental late parsing of attributes'
'Enable extended information within the SHT_LLVM_BB_ADDR_MAP that is extracted from PGO related analysis.'
'Enable external API notes support'
'Enable fat LTO object support'
'Enable features of APX'
'Enable fixed point types'
'Enable formatting of code changed by applying replacements.\nUse -style to choose formatting style.\n'
'Enable frame pointer elimination'
'Enable frame pointer elimination, but reserve the frame pointer register'
'Enable frame pointer omission (x86 only)'
'Enable frecipe.{s/d} and frsqrte.{s/d}'
'Enable frequency counters in sanitizer coverage'
'Enable full Microsoft Visual C++ compatibility'
'Enable function entry/exit instrumentation in ThreadSanitizer (default)'
'Enable function merging as part of the optimization pipeline'
'Enable function outlining (AArch64 only)'
'Enable function specialization on the address of global values'
'Enable garbage-collecting empty basic blocks'
'Enable generating trap for unreachable'
'Enable generation of calls to objc_claimAutoreleasedReturnValue'
'Enable generation of complex instructions'
'Enable generation of instruction packets'
'Enable generation of memop instructions'
'Enable generation of new-value jumps'
'Enable generation of new-value stores'
'Enable gep instruction tracing in sanitizer coverage'
'Enable global load scalarization'
'Enable global merge functions that are based on hash function'
'Enable global merge pass on constants'
'Enable global merge pass on external linkage'
'Enable global value internalization in LTO'
'Enable gp-relative addressing of mips small data items'
'Enable hashing of all compiler options that could impact the semantics of a module in an implicit build'
'Enable hashing the content of a module file'
'Enable heap memory profiling'
'Enable heap memory profiling and dump results into <directory>'
'Enable hexagon-qdsp6 backward compatibility'
'Enable hot-cold splitting pass'
'Enable hot/cold operator new library calls'
'Enable identical code folding'
'Enable if predication of stores during vectorization.'
'Enable if-conversion during vectorization.'
'Enable image intrinsic optimizer pass'
'Enable implicit vector bit-casts'
"Enable import metadata like 'thinlto_src_module' and 'thinlto_src_file'"
'Enable imprecision in EarlyCSE in pathological cases, in exchange for faster compile. Caps the MemorySSA clobbering calls.'
'Enable imprecision in LICM in pathological cases, in exchange for faster compile. Caps the MemorySSA clobbering calls.'
'Enable incremental processing extensions such as processing statements on the global scope.'
'Enable inline 8-bit counters in sanitizer coverage'
'Enable inline bool flag in sanitizer coverage'
'Enable inline deferral during PGO'
'Enable inliner stats for imported functions'
'Enable instsimplify'
'Enable inter-procedural analyses'
'Enable interleave MVE vector operation lowering'
'Enable interprocedural register allocation to reduce load/store at procedure calls.'
'Enable ir outliner pass'
'Enable just-my-code debugging'
'Enable keeping all variables that have a persistent storage duration, including global, static and thread-local variables, to guarantee that they can be directly addressed'
'Enable late function splitting using profile information (x86 and aarch64 ELF)'
'Enable lazy compilation when using the MCJIT engine'
'Enable linker dead stripping of globals in AddressSanitizer'
'Enable linker job to emit a static library.'
'Enable linker relaxation'
'Enable load and store clustering in the machine scheduler'
'Enable load store vectorizer'
'Enable logical abbreviations'
'Enable long calls for save-restore stubs.'
'Enable loop data prefetch on AMDGPU'
'Enable loop data prefetch on Hexagon'
'Enable loop header duplication at any optimization level'
'Enable loop interleaving in Loop vectorization passes'
'Enable loop iv regalloc heuristic'
'Enable loop tiling'
'Enable loop vectorizer for HVX'
'Enable lower module lds pass'
'Enable lowering interleaved accesses to intrinsics'
'Enable lowering math functions to their corresponding MASS (scalar) entries'
'Enable lowering of lds to global memory pass and asan instrument resulting IR.'
'Enable lowering of the matrix intrinsics'
'Enable machine DCE inside regalloc'
'Enable machine block placement based on the ext-tsp model, optimizing I-cache utilization.'
'Enable masked loads/stores for HVX'
'Enable matrix data type and related builtin functions'
'Enable max stack depth tracing'
'Enable mcount instrumentation'
'Enable mcount instrumentation with prof'
'Enable memcpyopt even when libcalls are disabled'
'Enable memop clustering.'
'Enable memory access instrumentation in ThreadSanitizer (default)'
'Enable merging Loop End and Dec instructions.'
'Enable merging of globals'
'Enable merging of redundant sexts when one is dominating the other.'
'Enable mips16 constant islands.'
'Enable mips16 hard float.'
'Enable missed optimization remarks from passes whose name match the given regular expression'
'Enable mode register pass'
'Enable module inliner'
'Enable module-based external API notes support'
'Enable modules for C++'
'Enable name/filename string compression'
'Enable non legal immediates (for testing purposes only)'
'Enable odd single-precision floating point registers'
'Enable on-demand initialization of thread-local variables'
'Enable only control-flow mitigations for Load Value Injection (LVI)'
'Enable operand tree forwarding'
'Enable optimization analysis remarks from passes whose name match the given regular expression'
'Enable optimization of existing hot/cold operator new library calls'
'Enable optimization remarks from passes whose name match the given regular expression'
'Enable optimizations'
'Enable optimizations based on strict aliasing rules'
"Enable optimizations based on the strict definition of an enum's value range"
'Enable optimizations based on the strict definition of flexible arrays.'
'Enable optimizations based on the strict rules for overwriting polymorphic C++ objects'
'Enable optimizations on complex GEPs'
'Enable optimizations that may decrease FP precision'
'Enable optimized register allocation compilation path.'
'Enable or disable Control Flow Guard checks and guard tables emission'
'Enable origins tracking in MemorySanitizer'
'Enable overlapping among matches in a group of consecutive\nCHECK-DAG directives.  This option is deprecated and is only\nprovided for convenience as old tests are migrated to the new\nnon-overlapping CHECK-DAG implementation.\n'
'Enable parser support for the __unknown_anytype type; for testing purposes only'
'Enable partial store merging in DSE'
'Enable partial-overwrite tracking in DSE'
'Enable pass to eliminate conditions based on linear constraints'
'Enable perf profiling support'
'Enable phi-translation of add instructions'
'Enable placement of extracted cold functions into a separate section after hot-cold splitting.'
'Enable pointer authentication intrinsics'
'Enable poisoning array cookies when using custom operator new[] in AddressSanitizer'
'Enable pre-link mode optimizations'
'Enable precise memory mode (AMDGPU only)'
'Enable predefined and command line preprocessor macros'
'Enable predefined target OS macros'
'Enable profile hotness information in diagnostic line'
'Enable profile instrumentation sampling (default = off)'
'Enable promoting aligned anyext load to wider load'
'Enable promotion of flat kernel pointer arguments to global'
'Enable quadword atomics ABI on AIX (AIX PPC64 only). Uses lqarx/stqcx. instructions.'
'Enable raw string literals'
'Enable reassociation of accumulation chains'
'Enable reciprocal sqrt optimization'
'Enable recognition of non-constant strided pointer induction variables.'
'Enable recovery for specified sanitizers'
'Enable recovery mode (continue-after-error).'
'Enable regalloc advisor mode'
'Enable register pressure scheduling.'
'Enable register reassign optimizations on gfx10+'
'Enable register tiling'
'Enable relocating counters at runtime.'
'Enable removal of functions when theyuse features not supported by the target GPU'
'Enable required s_wait_alu on SGPR hazards'
'Enable rewrite partial reg uses pass'
'Enable runtime checks for stack overflow.'
'Enable runtime interleaving until load/store ports are saturated'
'Enable s_delay_alu insertion'
'Enable safe identical code folding'
'Enable sample-based profile guided optimizations'
'Enable sanitizer coverage for indirect calls'
'Enable sanitizer for supported offloading devices'
'Enable sanitizer statistics gathering.'
'Enable sc.q instruction.'
'Enable scalar IR passes'
'Enable scheduling addi instruction as earlyas possible post ra'
'Enable scheduling after register allocation'
'Enable scheduling for macro fusion.'
'Enable select to branch optimizations'
'Enable setting constant bits to reduce size of mask immediates'
'Enable setting lr as a predicate in tail predication regions.'
'Enable setting the FP exceptions build attribute not to use exceptions'
'Enable shared library instrumentation with XRay'
'Enable signing and authentication of all indirect calls'
'Enable signing and authentication of indirect goto targets'
'Enable signing and authentication of return addresses'
'Enable signing of function pointers in init/fini arrays'
'Enable simple copy propagation during register reloading'
'Enable single byte coverage'
'Enable sinking and folding of instruction copies'
'Enable sinking and/cmp into branches.'
'Enable some non conforming code to compile'
'Enable some traditional CPP emulation'
'Enable sparse parallelization for any storage and loop.'
'Enable sparse parallelization regardless of storage for the outer loop.'
'Enable special debugger support behavior'
'Enable special debugger support for Objective-C subscripting and literals'
'Enable specialization of functions that take a literal constant as an argument'
'Enable specifying registers without the % prefix'
'Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations'
'Enable spilling SGPRs to VGPRs'
'Enable spilling VGPRs to AGPRs'
'Enable spills from gpr to vsr rather than stack'
'Enable spills in prologue to vector registers.'
'Enable splitting large offset of GEP.'
'Enable splitting of a ThinLTO LTOUnit'
'Enable stack clash protection'
'Enable stack frame shrink wrapping'
'Enable stack probes'
'Enable stack protectors'
'Enable stack protectors for all functions'
'Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable'
"Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca , which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable. A function with a stack protector has a guard value added to the stack frame that is checked on function exit. The guard value must be positioned in the stack frame such that a buffer overflow from a vulnerable variable will overwrite the guard value before overwriting the function's return address. The reference stack guard value is stored in a global variable."
'Enable static hinting of branches on ppc'
'Enable statistics output from program (available with Asserts)'
'Enable stress test of coldcc by adding calling conv to all internal functions.'
'Enable stricter verification with -verify-scev is passed'
'Enable string pooling (default)'
'Enable subreg liveness tracking'
'Enable subregister liveness tracking for SystemZ (experimental)'
'Enable subregister liveness tracking.'
'Enable support for exception handling'
'Enable support for ignoring exception handling constructs'
'Enable support for int128_t type'
'Enable support for the C++ Coroutines'
'Enable symbolic stride memory access versioning'
'Enable tail-predication, but not for reduction loops'
'Enable tail-predication, but not for reduction loops, and force this which might be unsafe'
'Enable tail-predication, including reduction loops'
'Enable tail-predication, including reduction loops, and force this which might be unsafe'
'Enable that single precision floating-point divide and sqrt used in '
'Enable the "fast" instruction selector'
'Enable the "global" instruction selector'
"Enable the 'blocks' language feature"
"Enable the 'modules' language feature"
'Enable the AArch64 branch target pass'
'Enable the AIX Extended Altivec ABI.'
'Enable the CCMP formation pass'
'Enable the GVN hoisting pass (default = off)'
'Enable the GVN sinking pass (default = off)'
'Enable the IR outliner on linkonceodr functions'
'Enable the LoopFlatten Pass'
'Enable the LoopInterchange Pass'
'Enable the OpenMP region merging optimization.'
'Enable the Polly DOT printer in -O3'
'Enable the Polly DOT printer in -O3 (no BB content)'
'Enable the RISC-V VL Optimizer pass'
'Enable the VR4300 mulmul bug fix.'
'Enable the X86 cmov-to-branch optimization.'
'Enable the abort'
'Enable the attributor inter-procedural deduction pass'
'Enable the condition optimizer pass'
'Enable the conditional branch tuning pass'
'Enable the copy propagation with AArch64 copy instr'
'Enable the copy propagation with RISC-V copy instr'
'Enable the cost-benefit analysis for the inliner'
'Enable the early if converter pass'
'Enable the experimental Loop Versioning LICM pass'
'Enable the experimental new constant interpreter'
'Enable the extended Altivec ABI on AIX. Use volatile and nonvolatile vector registers'
'Enable the generation of 4-operand madd.s, madd.d and related instructions.'
'Enable the generation of WLS loops'
'Enable the generation of masked gathers and scatters'
'Enable the generation of masked loads and stores'
'Enable the global merge pass'
'Enable the initializes attr improvement in DSE'
'Enable the integrated assembler'
'Enable the legacy pass manager. This is strictly for bugpoint due to it not working with the new PM, please do not use otherwise.'
'Enable the live debug variables pass'
'Enable the load/store pair optimization pass'
'Enable the loop data prefetch pass'
'Enable the loop interchange pass'
'Enable the loop vectorization passes'
'Enable the machine combiner pass'
'Enable the machine instruction scheduling pass.'
'Enable the machine outliner'
'Enable the machine outliner on linkonceodr functions'
'Enable the new pass manager'
'Enable the new, experimental LoopDistribution Pass'
'Enable the old style PARAMETER statement'
'Enable the pass that emits the linker optimization hints (LOH)'
'Enable the pass that removes dead definitions and replaces stores to them with stores to the zero register'
'Enable the pass that removes dead definitions and replaces stores to them with stores to x0'
'Enable the pass that removes dead definitons and replaces stores to them with stores to r0'
'Enable the polly optimizer (with -O1, -O2 or -O3)'
'Enable the post-ra machine instruction scheduling pass.'
'Enable the profile guided size optimizations. '
'Enable the promote constant pass'
'Enable the redundant copy elimination pass'
'Enable the scheduler to generate .cur'
'Enable the specified remark'
'Enable the specified warning'
'Enable the superword-level parallelism vectorization passes'
'Enable the tile register allocation pass'
'Enable the use of AA during codegen.'
'Enable the use of TLS Descriptors'
'Enable the use of the block frequency analysis to access PGO heuristics minimizing code growth in cold regions and being more aggressive in hot regions.'
'Enable the use of the block frequency analysis to reduce the chance to execute const materialization more frequently than without hoisting.'
'Enable the vectorisation of loops with in-order (strict) FP reductions'
'Enable the wasm-opt optimizer (default)'
'Enable the widening of global strings to alignment boundaries'
'Enable the workaround for OCL name mangling mismatch.'
'Enable thread-safe initialization of static variables'
'Enable threadgroup split execution mode (AMDGPU only)'
'Enable timing class latency'
'Enable timing of insert generation'
'Enable tls optimization peephole'
'Enable tracing of loads'
'Enable tracing of stores'
'Enable trapping for all sanitizers'
'Enable trapping for specified sanitizers'
'Enable traps on authentication failures'
'Enable treating throwing global C++ operator new as always returning valid memory (annotates with __attribute__((returns_nonnull)) and throw()). This is detectable in source.'
'Enable trigraphs'
'Enable two-phase name lookup in templates'
'Enable two-round ThinLTO code generation. The first round emits codegen data, while the second round uses the emitted codegen data for further optimizations.'
'Enable type and address discrimination of vtable pointer of std::type_info'
'Enable type discrimination of vtable pointers'
'Enable type discrimination on C function pointers'
'Enable unsafe double to float shrinking for math lib calls'
'Enable unswitch cost multiplier that prohibits exponential explosion in nontrivial unswitch.'
'Enable unwind v2 (epilog) information for x64 Windows'
'Enable use of AA during MI DAG construction'
'Enable use of AdvSIMD scalar integer instructions'
'Enable use of GPR32 in inline assembly for APX'
'Enable use of TBAA during MI DAG construction'
'Enable use of a base pointer for complex stack frames'
'Enable use of builtin functions'
'Enable use of experimental RISC-V extensions.'
'Enable use of hot hints (only supported for unambigously hot allocations)'
'Enable use of the DWARFv5 DW_OP_convert operator'
'Enable use of the MCJIT object caching'
'Enable use-after-destroy detection in MemorySanitizer'
'Enable use-after-scope detection in AddressSanitizer'
'Enable using coldcc calling conv for cold internal functions'
'Enable using library calls for save and restore'
'Enable value profiling'
'Enable vec acc forwarding'
'Enable vec alu forwarding'
'Enable vectorization for wider vector utilization'
'Enable vectorization of early exit loops with uncountable exits.'
'Enable vectorization of epilogue loops.'
'Enable vectorization on interleaved memory accesses in a loop'
'Enable vectorization on masked interleaved memory accesses in a loop'
'Enable verbose debugging for Loop Fusion'
'Enable verbose output'
'Enable verbose output (results, IR, etc.) to stderr'
'Enable verification of LLVM IR'
'Enable verification of MemorySSA.'
'Enable verification of assumption cache'
'Enable vextract optimization'
'Enable virtual function elimination'
'Enable vtune profiling support'
'Enable warnings for deprecated constructs and define __DEPRECATED'
'Enable warnings for undefined macros with a prefix in the comma separated list <arg>'
'Enable whole program visibility'
'Enable whole program visibility during LTO'
'Enable workarounds for GR712RC errata'
'Enable workarounds for UT700 errata'
'Enable/disable fusing matrix instructions.'
'Enable/disable matrix shape verification.'
'Enables DWARF32 format for ELF binaries, if debug information emission is enabled.'
'Enables DWARF64 format for ELF binaries, if debug information emission is enabled.'
'Enables UNSIGNED type'
'Enables autovectorization of some loops containing histograms'
'Enables dead virtual function elimination optimization. Requires -flto=full'
'Enables more verbose remarks.'
"Enables scope for regex variables. Variables with names that\ndo not start with '$' will be reset at the beginning of\neach CHECK-LABEL block."
'Enables spilling/reloading SVE predicates as data vectors (ZPRs)'
'Enables splitting of the LTO unit'
'Enables strict availability diagnostic mode for HLSL built-in functions.'
'Enables the global instruction selector'
'Enables the use of non-default rounding modes and non-default exception handling on targets that are not currently ready.'
'Enables tracing of vector stores'
'Enables whole-program vtable optimization. Requires -flto'
'End sequence.'
'Enforce name visibility rules across submodules of the same top-level module.'
'Enforce targets of indirect branches and function returns'
"Enqueue and re-visit child loops in the loop PM after unrolling. This shouldn't typically be needed as child loops (or their clones) were already visited."
'Ensure that all functions can be hotpatched at runtime'
'Ensure that llvm.experimental.noalias.scope.decl for identical scopes are not dominating'
'Ensure that the global variables are in the global address space'
"Ensures debug_value's that have been stackified become stack relative"
'Entry point name'
'Entry point name for hlsl'
'Enumerate different FRM and VXRM'
'Enumeration.'
'Enumerator.'
'Epilogue begin.'
"Equivalent to '-mrecip=all'"
'Equivalent to -march=mips1'
'Equivalent to -march=mips2'
'Equivalent to -march=mips3'
'Equivalent to -march=mips32'
'Equivalent to -march=mips32r2'
'Equivalent to -march=mips32r3'
'Equivalent to -march=mips32r5'
'Equivalent to -march=mips32r6'
'Equivalent to -march=mips4'
'Equivalent to -march=mips5'
'Equivalent to -march=mips64'
'Equivalent to -march=mips64r2'
'Equivalent to -march=mips64r3'
'Equivalent to -march=mips64r5'
'Equivalent to -march=mips64r6'
'Equivalent to -verify=expected'
'Erase GP Operand'
'Erase the existing functions'
'Errata workaround pass'
'Error collecting HIP undefined fatbin symbols: %0'
'Error for missing parenthesis around predicate registers'
"Error for register names that aren't contigious"
'Error in reading profile %0: %1'
'Error messages only'
'Error on use'
'Errors and warnings'
'Errors only'
'Errors, warnings and remarks'
'Evenly re-distribute flow among unknown subgraphs.'
'Exact dependences without transitive dependences'
'Exception catch block.'
'Exception try block.'
'Exclude compilands by regular expression'
'Exclude functions matching the filter from the output.'
'Exclude sanitization for the top hottest code responsible for the given fraction of PGO counters (0.0 [default] = skip none; 1.0 = skip all). Argument format: <sanitizer1>=<value1>,<sanitizer2>=<value2>,...'
'Exclude symbols by regular expression'
'Exclude types by regular expression'
'Exclude wrong side overloads only if there are same side overloads in overloading resolution for CUDA/HIP'
"Execute MCJIT'ed code in a separate process."
'Execute graph viewer in the background. Creates tmp file litter.'
'Execute with JIT'
'Execute with the interpreter'
'Executes the snippets within the same process'
'Execution model (WebAssembly only)'
'Exhaustive Search for registers bypassing the depth and interference cutoffs of last chance recoloring'
'Exit early if an unpredictable value come from the same loop'
'Exit with an error when an instruction is unsupported for any reason (default)'
'Expand 64-bit division in AMDGPUCodeGenPrepare'
'Expand Atomic instructions'
'Expand certain fp instructions'
'Expand constant expressions to instructions for testing purposes'
'Expand double precision loads and stores to their single precision counterparts'
'Expand eligible cr-logical binary ops to branches'
'Expand fp'
'Expand hlfir.matmul as elemental operation'
'Expand indirectbr instructions'
'Expand large div/rem'
'Expand macros without full preprocessing'
'Expand memcmp() to load/stores'
'Expand memcpy into load/store pairs in order'
"Expand operand's MIOperandInfo DAG into suboperands"
'Expand out of range branch instructions and fix forbidden slot hazards'
'Expand out of range branches'
'Expand reduction intrinsics'
'Expand variadic functions'
'Expect external char-aligned symbols to be without ABI alignment (SystemZ only)'
'Experimental pc tracing'
'Explain input dump and quit'
'Explain why a node was skipped (default=true)'
'Explain why a pattern was skipped for inclusion in the GlobalISel selector'
'Exploit reductions in dependence analysis'
'Export debug info (by testing original Debug Info) failures into specified (JSON) file (should be abs path as we use append mode to insert new JSON objects).'
'Export debug info preservation failures into specified (JSON) file (should be abs path as we use append mode to insert new JSON objects)'
'Export full callsite graph'
'Export graph to dot files.'
'Export only nodes with contexts feeding given -memprof-dot-alloc-id'
'Export only nodes with given -memprof-dot-context-id'
'Export only summary information for each source file'
'Export per-pass debugify statistics to this file'
'Export the polyhedral description of the detected Scops'
'Export typeid resolutions to summary and globals'
'Exporting options'
'Extend the -G behaviour to object local data (MIPS)'
'Extend the liveness of user variables through optimizations to prevent stale or optimized-out variable values when debugging.'
'Extensible binary encoding'
'Extensible binary encoding (default)'
'External Alias Analysis'
'Externalize enqueued block runtime handles'
'Extra archive files to be loaded'
'Extra directory of include files'
'Extra modules to be loaded'
'Extra object files to be loaded'
'Extract API information'
'Extract HwModes-specific instructions into new DecoderTables, significantly reducing Table Duplications'
'Extract at most one loop into a new function'
'Extract from <file>.'
'Extract loops into new functions'
'FAILURE'
'FILECHECK_OPTS'
'FIX-IT applied suggested code changes'
'FIX-IT detected an error it cannot fix'
'FIX-IT detected errors it could not fix; no output will be generated'
'FIX-IT unable to apply suggested code changes'
'FIX-IT unable to apply suggested code changes in a macro'
'Factor for the unroll threshold to account for code simplifications still taking place'
'Factor to apply to what qualifies as a long branch to reserve a pair of scalar registers. If this value is 0 the long branch registers are never reserved. As this value grows the greater chance the branch distance will fall within the threshold and the registers will be marked to be reserved. We lean towards always reserving a register for  long jumps'
"Fail if an object couldn't be found for a binary ID in the profile"
'Fail if any profile is invalid.'
'Fail only if all profiles are invalid.'
'Failure mode:'
'Falkor HW Prefetch Fix'
'Falkor HW Prefetch Fix Late Phase'
'Fallback style for reformatting after inserting new\nheaders if there is no clang-format config file found.'
'Fallback to indirect when incorrect'
'Fast Register Allocator'
'Fast Tile Register Configure'
'Fast Tile Register Preconfigure'
'Fast register allocator'
'Fast suboptimal list scheduling'
'Features to use to serialize to cubin.'
'File checksums (DEBUG_S_CHECKSUMS subsection)'
'File containing RuntimeDyld verifier checks.'
'File containing diagnostic suppression mappings. See user manual for file format.'
'File containing entry point of the transform script, if different from the input file'
'File containing verifier checks'
"File doesn't need an exec stack"
'File for serializing diagnostics in a binary format'
'File holding the seed used by the randomize structure layout feature'
'File is for a position independent executable'
'File listing native ABI functions and how the pass treats them'
'File name to use for YAML optimization record output'
'File name to use for split dwarf debug info output'
'File path for cold function only instrumentation(requires use with --pgo-instrument-cold-function-only)'
'File path to where .cgdata file is read'
'File to append -stats and -timer output to'
'File to check (defaults to stdin)'
'File to emit dot graph of new summary into'
'File to read (analysis mode) or write (latency/uops/inverse_throughput modes) benchmark results. “-” uses stdin/stdout.'
'File to record the coroutines got elided'
'File with the profile data obtained after an instrumented run'
'File(s) containing definitions of additional transform script symbols'
'Filename (or -) to log diagnostics to'
'Filename (or -) to write dependency output to'
'Filename (or -) to write header include output to'
'Filename (or -) to write stack usage output to'
'Filename defining the list of functions/files to instrument. The file uses the sanitizer special case list format.'
'Filename defining the list of functions/types for imbuing XRay attributes.'
'Filename to pipe in as stdin (default: /dev/null)'
'Filename to write DOT-formatted header dependencies to'
'Filename to write statistics to'
'Filename where the element is defined.'
'Files referenced in the debug information.'
'Fill Lanai delay slots with NOPs.'
'Fill a percentage of the latency between neighboring MFMA with s_nops.'
'Fill all delay slots with NOPs.'
'Fill delay slot for MIPS'
'Filter all non-error diagnostics (discouraged: testing only!)'
'Filter the benchmarks before analysing them'
'Filtering and Sorting Options'
'Finalize ISel and expand pseudo-instructions'
'Finalize machine instruction bundles'
'Find methods that overrides a virtual method.'
"Find objects in DIR or based on FILE's path"
'Find subclasses of a class.'
'Fix copies between 32 and 16 bit registers by extending to 32 bit'
'Fix function entry count in profile use.'
'Fix mismatching bitcasts for WebAssembly'
'Fixup Statepoint Caller Saved'
'Fixup each natural loop to have a single exit block'
'Flatten the CFG'
'Flow Sensitive profile file name.'
'Flow Sensitive profile remapping file name.'
'Flush denormal floating point values to zero in CUDA/HIP device mode.'
'Fold memory accesses to model more possible delinearizations (does not scale well)'
'Fold null checks into faulting memory operations'
'Folder name for view splitting.'
'Follow Fortran 2003 rules for (re)allocating the LHS of the intrinsic assignment'
'Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).'
'Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).'
'For -verify only: Inject a symbol into the extern symbol table.'
'For -verify only: Map a section to a specific address.'
'For -verify only: Separation between sections in phony target address space.'
'For -verify only: end of phony target address range.'
'For -verify only: start of phony target address range.'
'For MachO, disable atexit()-based global destructor lowering'
'For a large interval, if it is coalesced with other live intervals many times more than the threshold, stop its coalescing to control the compile time. '
"For a list of available CPUs for the target use '-mcpu=help'"
"For a list of available architectures for the target use '-mcpu=help'"
'For all options that iterate over modules, ignore modules from system libraries'
'For all options that iterate over modules, limit to the specified module'
'For cold function instrumentation, skip instrumenting functions whose entry count is above the given value.'
'For cold function instrumentation, treat count unknown(e.g. unprofiled) functions as cold.'
'For context sensitive PGO counts. Does not work with CSSPGO.'
'For each function, emit a dot graph depicting potential LVI gadgets'
'For each function, emit a dot graph depicting potential LVI gadgets, and do not insert any fences'
'For each function, emit a dot graph to stdout depicting potential LVI gadgets, used for testing purposes only'
'For merge, use the provided unstripped binary to correlate the raw profile.'
'For partially supported constructs, emit private/local variables as clauses/specifiers on MLIR ops.'
'For paths in debug info, remap directory <old> to <new>. If multiple options match a path, the last option wins'
'For sample profiles, list function names (with calling context for csspgo) for overlapped functions with similarities below the cutoff (percentage times 10000).'
'For shared library loaded with the main program, change local-dynamic access(es) to initial-exec access(es) at the function level (AIX 64-bit only).'
'For show, read and extract profile metadata from debug info and show the functions it found. For merge, use the provided debug info to correlate the raw profile.'
'For symbols in profile symbol list, regard their profiles to be accurate. It may be overridden by profile-sample-accurate. '
"For test - keep the ML Inline advisor's FunctionPropertiesInfo cache"
"For testing purposes, always break large PHIs even if it isn't profitable."
'For the function which is cold in instr profile but hot in sample profile, if the ratio of the number of zero counters divided by the total number of counters is above the threshold, the profile of the function will be regarded as being harmful for performance and will be dropped.'
'For the module ID for the file to process, useful to match what is in the index.'
'For use with /winsysroot, defaults to newest found'
'Force a peel count regardless of profiling information.'
'Force a specific generic_v<N> flag to be added. For testing purposes only.'
'Force align the stack to the minimum alignment'
'Force all edges in the function summary to cold'
'Force all functions to be noinline'
'Force all indexed operations to be legal for the GlobalISel combiner'
'Force all memory accesses to be aligned (AArch32/MIPSr6 only)'
'Force all memory accesses to be aligned (AArch64/LoongArch/RISC-V only)'
'Force all scalar memory accesses to be aligned (RISC-V only)'
'Force all vector memory accesses to be aligned (RISC-V only)'
'Force all waitcnt instrs to be emitted as s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)'
'Force all waitcnt load counters to wait until 0'
'Force allowance of nested hardware loops'
'Force analysis to continue in the presence of unsupported instructions'
'Force behavior as if the user specified pragma omp requires unified_shared_memory.'
'Force bidirectional post reg-alloc list scheduling'
'Force bidirectional pre reg-alloc list scheduling'
'Force bottom-up post reg-alloc list scheduling'
'Force bottom-up pre reg-alloc list scheduling'
'Force codegen to assume rounding mode can change dynamically'
'Force disable the lazy-loading on-demand of metadata when loading bitcode for importing.'
'Force double to be <n> bits'
'Force each unsigned fixed point type to have an extra bit of padding to align their scales with those of signed fixed point types'
'Force emit s_waitcnt expcnt(0) instrs'
'Force emit s_waitcnt lgkmcnt(0) instrs'
'Force emit s_waitcnt vmcnt(0) instrs'
'Force enable speculative execution side effect suppression. (Note: User must pass -mlvi-cfi in order to mitigate indirect branches and returns.)'
'Force enable speculative load hardening'
'Force function reduction to keep main'
'Force function specialization for every call site with a constant argument'
'Force function to be mips32'
'Force generation of loop guard intrinsic'
'Force generation of thread parallel code ignoring any cost model'
'Force hardware loop counter to be updated through a phi'
'Force hardware loops intrinsics to be inserted'
'Force interpretation: disable JIT'
'Force linking the clang builtins runtime library'
'Force long double to be 128 bits'
'Force long double to be 64 bits'
'Force long double to be 80 bits, padded to 128 bits for storage'
'Force machine combiner to use a specific strategy for machine trace metrics evaluation.'
'Force matrix instruction fusion even if not profitable.'
'Force optimization experiment (for testing)'
'Force outline regions with live exits'
'Force outlining cold blocks from loops.'
'Force pipeliner to use specified II.'
'Force pipeliner to use specified issue width.'
'Force realign the stack at entry to every function'
'Force store splitting no matter what the target query says.'
'Force the (profiled-guided) size optimizations. '
'Force the alignment of all blocks in the function in log2 format (e.g 4 means align on 16B boundaries).'
"Force the alignment of all blocks that have no fall-through predecessors (i.e. don't add nops that are executed). In log2 format (e.g 4 means align on 16B boundaries)."
'Force the alignment of all functions in log2 format (e.g. 4 means align on 16B boundaries).'
'Force the interpretation of -stream as a string, even if it is a valid integer'
'Force the static analyzer to analyze functions defined in header files'
'Force the tail folding style'
'Force the use of a base pointer in every function'
'Force the use of precise cost loop rotation strategy.'
'Force the use of resource intervals in the schedule model'
'Force the use of streaming code for all functions'
'Force the use of streaming-compatible code for all functions'
'Force thread model single in LICM pass'
'Force to instrument function entry basicblock.'
'Force to instrument loop entries.'
'Force top-down post reg-alloc list scheduling'
'Force top-down pre reg-alloc list scheduling'
'Force use of AdvSIMD scalar instructions everywhere'
'Force using MLIR complex operations instead of libm complex operations'
'Force validation of user headers when repeatedly loading a module file within single build session'
'Force wchar_t to be a short unsigned int'
'Force wchar_t to be an unsigned int'
'Force whether the StructurizeCFG pass skips uniform regions'
'Forces the maximum bytes allowed to be emitted when padding for alignment'
'Forcibly enables non-trivial loop unswitching rather than following the configuration passed into the pass.'
'Forget everything in SCEV when doing LoopUnroll, instead of just the current top-most loop. This is sometimes preferred to reduce compile time.'
'Form fused FP ops (e.g. FMAs)'
'Format a range of this length (in bytes).\nMultiple ranges can be formatted by specifying\nseveral -offset and -length pairs.\nWhen only a single -offset is specified without\n-length, clang-format will format up to the end\nof the file.\nCan only be used with one input file.'
'Format a range starting at this byte offset.\nMultiple ranges can be formatted by specifying\nseveral -offset and -length pairs.\nCan only be used with one input file.'
"Format consumable by Brendan Gregg's FlameGraph tool. Only valid with -all-stacks."
'Format for outputted docs.'
'Format message diagnostics so that they fit within N columns'
'Format of index export'
'Format of output profile'
'Format of the index to be written'
'Formatting Options'
'Forward options to the linker'
'Forward switch condition to phi ops (default = false)'
'Four-byte version string for gcov files.'
'Frame Data (DEBUG_S_FRAMEDATA subsection)'
'Fuchsia API Level prohibits specifying a minor or sub-minor version'
'Full version of the Windows SDK, defaults to newest found'
'Fully encode c++ class template specialization'
'Fully expand the memory accesses of the detected Scops'
'Fully relocatable, position independent code'
'Function Alias Analysis Results'
'Function Entry Count'
'Function attribute to apply to cold functions as determined by PGO'
'Function entry point.'
'Function filtering options'
'Function level overlap information for every function (with calling context for csspgo) in test profile with max count value greater than the parameter value'
'Function mem bound threshold in %'
'Function names that are public.'
'Function number to canonicalize.'
'Function register usage analysis'
'Function to call as entry point.'
'Function type.'
'Function.'
'Fuse FP ops whenever profitable'
'GC Lowering'
'GCC does not allow %0 attribute in this position on a function definition'
'GCC does not allow an attribute in this position on a function declaration'
'GCC does not allow the %0 attribute to be written on a type'
"GCC does not allow the 'cleanup' attribute argument to be anything other than a simple identifier"
'GCC does not allow variable declarations in for loop initializers before C99'
'GCC encoding (only meaningful for -sample)'
'GCC requires a function with the %0 attribute to be variadic'
'GCN Create VOPD Instructions'
'GCN DPP Combine'
'GCN NSA Reassign'
'GLIBC Vector Math library'
'GNU OpenMP'
'GNU decimal type extension not supported'
'GNU vector conditional operand cannot be %select{void|a throw expression}0'
'GNU-style inline assembly is disabled'
'GNUstep Objective-C runtime version %0 incompatible with target binary format'
"GPU arch %0 is supported by CUDA versions between %1 and %2 (inclusive), but installation at %3 is %4; use '--cuda-path' to specify a different CUDA install, pass a different GPU arch with '--cuda-gpu-arch', or pass '--no-cuda-version-check'"
'Gang up loads and stores generated by inlining of memcpy'
'Gate the invocation of the tracing callbacks on a global variable. Currently only supported for trace-pc-guard and trace-cmp.'
'Generalize pointers in CFI indirect call type signature checks'
'Generate "extract" instructions'
'Generate "insert" instructions'
'Generate ARM CDE builtin code-generator for clang'
'Generate ARM CDE builtin definitions for clang'
'Generate ARM CDE builtin sema checks for clang'
'Generate ARM MVE builtin code-generator for clang'
'Generate ARM MVE builtin definitions for clang'
'Generate ARM MVE builtin sema checks for clang'
'Generate ARM NEON sema support for clang'
'Generate ARM NEON tests for clang'
'Generate AST expressions for unmodified and modified accesses'
'Generate C++20 header units from header files'
'Generate CXX11 attributes info'
'Generate Clang AST comment nodes'
'Generate Clang AST declaration nodes'
'Generate Clang AST statement nodes'
'Generate Clang AST type nodes'
'Generate Clang AbstractTypeReader class'
'Generate Clang AbstractTypeWriter class'
'Generate Clang BasicReader classes'
'Generate Clang BasicWriter classes'
'Generate Clang Static Analyzer checkers'
'Generate Clang constexpr interpreter opcodes'
'Generate Clang diagnostic compatibility ids'
'Generate Clang diagnostic enums for selects'
'Generate Clang diagnostic groups'
'Generate Clang diagnostic interface headers'
'Generate Clang diagnostic name index'
'Generate Clang diagnostics definitions'
'Generate CodeView debug information'
'Generate DWARF4 type units.'
'Generate Extract API information as a side effect of compilation.'
'Generate IR involving scalable vector types'
'Generate Interface Stub Files, emit merged text not binary.'
'Generate Interface Stub Files.'
'Generate LBR info with perf itrace argument'
'Generate M NOPs before function entry'
'Generate M NOPs before function entry and N-M NOPs after function entry. If section is specified, use it instead of __patchable_function_entries.'
'Generate Metal library'
'Generate Offload API header contents'
'Generate Offload API print header'
'Generate Offload API wrapper function definitions'
'Generate Offload Error Code enum'
'Generate OpenCL builtin declaration handlers'
'Generate OpenCL builtin declaration tests'
'Generate OpenCL builtin header'
'Generate SPIR-V code'
'Generate Scalar MASS entries'
'Generate XRay instrumentation sleds on function entry and exit'
'Generate a .mlir reproducer file at the given output path if the pass manager crashes or fails'
'Generate a YAML optimization record file'
'Generate a __mcount_loc section entry for each __fentry__ call.'
'Generate a clang attribute list'
'Generate a clang attribute spelling index'
'Generate a clang attribute spelling list'
'Generate a clang attribute subject match rule list'
'Generate a clang parsed attribute kinds'
'Generate a clang parsed attribute list'
'Generate a clang template instantiate code'
'Generate a list of all Offload API function names'
'Generate a list of attributes supported by #pragma clang attribute for testing purposes'
'Generate a list of regular keyword attributes with info about their arguments'
'Generate a partial profile (only meaningful for -extbinary)'
'Generate a pch file for all code up to and including <filename>'
'Generate a recursive AST visitor for clang attributes'
'Generate a sparse profile (only meaningful for -instr)'
'Generate a table of attribute documentation'
'Generate absolute set instructions'
'Generate additional symbol graphs for extended modules.'
'Generate all instruction with TC'
'Generate all parser-related attribute string switches'
'Generate all parser-related attribute subject match rulestring switches'
'Generate all reports.'
'Generate an mlir reproducer at the provided filename (no crash required)'
'Generate an optimization record file in a specific format'
'Generate an optimized version of the match table'
'Generate any type of IT block'
'Generate arm_bf16.h for clang'
'Generate arm_cde.h for clang'
'Generate arm_fp16.h for clang'
'Generate arm_immcheck_types.inc (immediate range check types) for clang'
'Generate arm_mve.h for clang'
'Generate arm_neon.h for clang'
'Generate arm_sme.h for clang'
'Generate arm_sme_builtin_cg_map.inc for clang'
'Generate arm_sme_builtins.inc for clang'
'Generate arm_sme_builtins_za_state.inc for clang'
'Generate arm_sme_sema_rangechecks.inc for clang'
'Generate arm_sme_streaming_attrs.inc for clang'
'Generate arm_sve.h for clang'
'Generate arm_sve_builtin_cg_map.inc for clang'
'Generate arm_sve_builtins.inc for clang'
'Generate arm_sve_sema_rangechecks.inc for clang'
'Generate arm_sve_streaming_attrs.inc for clang'
'Generate arm_sve_typeflags.inc for clang'
'Generate arm_vector_types.h for clang'
'Generate attribute documentation'
'Generate attribute spelling list'
'Generate attributes for this dialect'
'Generate bitsplit instructions'
'Generate branches with extended addressability, usually via indirect jumps.'
'Generate calls to instrument function entry and exit'
'Generate clang PCH attribute reader'
'Generate clang PCH attribute writer'
'Generate clang attribute clases'
'Generate clang attribute implementations'
'Generate clang attribute text node dumper'
'Generate clang attribute traverser'
'Generate clang builtins list'
'Generate code for CUDA device'
'Generate code for SYCL device.'
'Generate code for an additional runtime variant of the deployment target'
'Generate code for statically linking libclosure (BlocksRuntime)'
'Generate code for the given target'
'Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH'
'Generate code for uses of this module that assumes an explicit object file will be built for the module'
'Generate code only for an OpenMP target device.'
'Generate code which only uses the general purpose registers (AArch64/x86 only)'
'Generate command properties for commands that are used in documentation comments'
'Generate coverage instrumentation for GlobalISel'
'Generate coverage mapping to enable code coverage analysis'
'Generate data collectors for AST nodes'
'Generate debug info for types in an object file built from this PCH and do not generate them elsewhere'
'Generate debug info for types in an object file built from this module and do not generate them elsewhere'
'Generate debug info with external references to clang modules or precompiled headers'
'Generate debugging info in the 64-bit DWARF format'
'Generate declarations for Offload API implementation functions'
'Generate definitions of Clang Syntax Tree node clasess'
'Generate diagnostic documentation'
'Generate directives for this dialect'
'Generate dot files into specified directory for changed IRs'
'Generate dwarf aranges'
'Generate dwarf debugging info for assembly source files'
'Generate efficient matchers for HTML tag names that are used in documentation comments'
'Generate efficient matchers for HTML tag properties'
'Generate explicit import from anonymous namespace to containing scope'
'Generate export file for the Offload library'
'Generate extract instructions'
'Generate function to translate named character references to UTF-8 sequences'
'Generate hot text symbols. Apply this option to a precompiled binary that manually calls into hugify, such that at runtime hugify call will put hot code into 2M pages. This requires relocation.'
'Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)'
'Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)'
'Generate instrumented code to collect coverage info for cold functions into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)'
"Generate instrumented code to collect coverage info for cold functions into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)"
'Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)'
'Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)'
'Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)'
"Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)"
'Generate instrumented code to collect temporal information'
'Generate intrinsics with this target prefix'
'Generate invalid output'
'Generate list of Clang Syntax Tree node types'
'Generate list of commands that are used in documentation comments'
'Generate list of valid ARM CDE builtin aliases for clang'
'Generate list of valid ARM MVE builtin aliases for clang'
'Generate lldb option definitions'
'Generate lldb property definitions'
'Generate lldb property enum definitions'
'Generate local calls to out-of-line atomic operations'
'Generate loop nest for tiling.'
'Generate low-precision inline sequences for some float libcalls'
'Generate machine code, but discard output'
'Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.'
'Generate nested function profiles for CSSPGO'
'Generate option documentation'
'Generate output compatible with the standard GNU Objective-C runtime'
'Generate pre-compiled header file'
'Generate pre-compiled module file from a module map'
'Generate pre-compiled module file from a standard C++ module interface unit'
'Generate random hotness values'
'Generate read-only position independent code (ARM only)'
'Generate read-write position independent code (ARM only)'
'Generate reduced prebuilt module interface from a standard C++ module interface unit'
'Generate relocatable device code, also known as separate compilation mode'
'Generate riscv_andes_vector_builtin_cg.inc for clang'
'Generate riscv_andes_vector_builtin_sema.inc for clang'
'Generate riscv_andes_vector_builtins.inc for clang'
'Generate riscv_sifive_vector_builtin_cg.inc for clang'
'Generate riscv_sifive_vector_builtin_sema.inc for clang'
'Generate riscv_sifive_vector_builtins.inc for clang'
'Generate riscv_vector.h for clang'
'Generate riscv_vector_builtin_cg.inc for clang'
'Generate riscv_vector_builtin_sema.inc for clang'
'Generate riscv_vector_builtins.inc for clang'
'Generate same-address load-load barrier instructions (dbar 0x700)'
'Generate software floating point library calls'
'Generate source-level debug information'
'Generate source-level debug information with dwarf version 2'
'Generate source-level debug information with dwarf version 3'
'Generate source-level debug information with dwarf version 4'
'Generate source-level debug information with dwarf version 5'
'Generate source-level debug information with the default dwarf version'
'Generate the clang parsed attribute helpers'
'Generate the profile for Linux kernel binary.'
'Generate the reduced BMI'
'Generate thread parallel code (isl codegen only)'
'Generate types for this dialect'
'Generate unique debug info for each instruction with a memory operand. Should be enabled for profile-driven cache prefetching, both in the build of the binary being profiled, as well as in the build of the binary consuming the profile.'
'Generate unoptimized CFGs for all analyses'
'Generate unwinding tables for all functions'
'Generate verbose assembly output'
'Generated inlined abstract references.'
'Generates tables to help identify patterns matched'
'Generator to run'
'Generic Options'
'Generic memory optimizations'
'Get the symbol definition from <line> <start-column> <end-column>'
'Give each function an independent TBAA tree (default)'
'Give global C++ operator new and delete declarations hidden visibility'
"Give global types 'default' visibility and global functions and variables 'hidden' visibility by default"
'Give inline C++ member functions hidden visibility by default'
'Give the maximum number of instructions that we will use for creating a floating-point immediate value'
'Give the maximum size (in number of nodes) of the web of instructions that we will consider for VW expansion'
'Give unique names to every basic block section'
'Give unique names to every section'
'Global Pointer Addressing Size.  The default size is 8.'
'Global Value Numbering'
'Global merge function pass'
'GlobalISel Combiner'
'Globally set the denormals-are-zero (DAZ) and flush-to-zero (FTZ) bits in the floating-point control register on program startup'
'Globals Alias Analysis'
'Good Bye World Pass'
'Gradient gain threshold (%).'
'Greedy Register Allocator'
'Greedy register allocator'
'Guard UBSAN checks with `llvm.allow.ubsan.check()`.'
'Guard against compiler/runtime version mismatch.'
'Guided scheduling'
'HIP Standard Parallel Algorithm Acceleration library path, used for finding and implicitly including the library header'
'HIP device library'
'HIP does not support OpenMP target directives; directive has been ignored'
'HIP runtime installation path, used for finding HIP version and adding HIP include path.'
'HIP version in the format of major.minor.patch'
'HLSL Version'
"HLSL code generation is unsupported for target '%0'"
'HLSL only. Disables all standard includes containing non-native compiler types and functions.'
'HLSL resource needs to have [[hlsl::resource_class()]] attribute'
"HTML end tag '%0' is forbidden"
'HTML end tag does not match any start tag'
'HTML output'
"HTML start tag '%0' closed by '%1'"
"HTML start tag prematurely ended, expected attribute name or '>'"
"HTML tag '%0' requires an end tag"
'HTML tag started here'
'HWASan shadow mapping dynamic offset location'
'HWASan shadow mapping offset [EXPERIMENTAL]'
'Handle <= and >= in finite loops'
'Handle C++ exceptions (insert cleanup blocks for unwinding)'
'Handle C++ initializer order'
'Handle global objects'
'Handle stack memory'
'Hard float ABI (uses FP registers)'
'Hard-coded mapping'
'Harden indirect calls and jumps against using speculatively stored attacker controlled addresses. This is designed to mitigate Spectre v1.2 style attacks.'
'Harden inline assembly code that may be vulnerable to Load Value Injection (LVI). This feature is experimental.'
'Harden interprocedurally by passing our state in and out of functions in the high bits of the stack pointer.'
'Harden the value loaded *after* it is loaded by flushing the loaded bits to 1. This is hard to do in general but can be done easily for GPRs.'
'Hardware Loop Insertion'
'Hardware multiplier use mode for MSP430'
'Hash long pathnames'
'Hazard size for streaming mode memory accesses. 0 = disabled.'
'Heatmap options'
'Helps find bugs by verifying the IR whenever we emit new instructions (*very* expensive).'
'Heuristics-based inliner version'
'Hexagon Assembly Printer'
'Hexagon Branch Relaxation'
'Hexagon CFG Optimizer'
'Hexagon Common GEP'
'Hexagon Constant Propagation'
'Hexagon Copy-To-Combine Pass'
'Hexagon DAG->DAG Pattern Instruction Selection'
'Hexagon Expand Condsets'
'Hexagon Generate Load/Store Set Absolute Address Instruction'
'Hexagon Hardware Loops'
'Hexagon Hardware Loops Fixup'
'Hexagon Load Widening'
'Hexagon Loop Rescheduling'
'Hexagon LoopAlign pass'
'Hexagon NewValueJump'
'Hexagon Packetizer'
'Hexagon Peephole'
'Hexagon RDF optimizations'
'Hexagon Split Const32s and Const64s'
'Hexagon Split Double Registers'
'Hexagon Store Widening'
'Hexagon TFR Cleanup'
'Hexagon Vector Combine'
'Hexagon VectorPrint pass'
'Hexagon bit simplification'
'Hexagon call frame information'
'Hexagon constant-extender optimization'
'Hexagon early if conversion'
'Hexagon generate "extract" instructions'
'Hexagon generate "insert" instructions'
'Hexagon generate mux instructions'
'Hexagon generate predicate operations'
'Hexagon mask'
'Hexagon move phi copy'
'Hexagon optimize vextract'
'Hexagon-specific predictive commoning for HVX vectors'
'Hide blocks with relative frequency below the given value'
'Hide nodes with more predecessor/successor than cutoff'
'High level execution tracing'
'High level qualifier for z/OS C++RT side deck datasets'
'High level qualifier for z/OS CSSLIB dataset'
'High level qualifier for z/OS Language Environment datasets'
'High register pressure threhold.'
'Highlight the code regions that will be optimized in a (CFG BBs and LLVM-IR instructions)'
'Highlight the code regions that will be optimized in a (CFG only BBs)'
'Hoist common instructions up to the parent block'
'Hoist conditional stores even if an unconditional store does not precede - hoist multiple conditional stores into a single predicated store'
'Hoist conditional stores if an unconditional store precedes'
'Hoist inner loop runtime memory checks to outer loop if possible'
'Hoist instructions from the beginning of the BB up to the maximum specified depth (default = 100, unlimited = -1)'
'Hoist invariant loads'
'Hoist invariant loads.'
'Hoist invariant stores'
'Hoist loads if the target supports conditional faulting'
'Hoist loads/stores if the target supports conditional faulting (default = false)'
'Hoist stores if the target supports conditional faulting'
'Hoisting alloca instructions in non-entry blocks to the entry block'
'Hot callsite threshold for proirity-based sample profile loader inlining.'
'Hot percentile cutoff.'
'How cgscc inline replay file is formatted'
"How cgscc inline replay treats sites that don't come from the replay. Original: defers to original advisor, AlwaysInline: inline all sites not in replay, NeverInline: inline no sites not in replay"
"How many functions in a module could be used for MergeFunctions to pass a basic correctness check. '0' disables this check. Works only with '-debug' key."
'How many idle instructions we would like before certain undef register reads'
'How many kernel arguments to preload onto SGPRs'
'How many lifetime ends to handle for a single alloca.'
'How much code-generation to perform'
'How sample profile inline replay file is formatted'
"How sample profile inline replay treats sites that don't come from the replay. Original: defers to original advisor, AlwaysInline: inline all sites not in replay, NeverInline: inline no sites not in replay"
'How to aggregate multi-values result'
'How wide an instruction window to bypass looking for another guard'
'HowToUseLLJIT'
'Human readable output. Only valid without -all-stacks.'
'Human-readable format'
'IBM MASS vector library'
'IBOutletCollection properties should be copy/strong and not assign'
'IEEE 754 denormal numbers'
'IR2Vec Options'
'IRDL file to register before processing the input'
'IRTranslator LLVM IR -> MI'
'ISO C does not allow indirection on operand of type %0'
"ISO C does not support '~' for complex conjugation of %0"
"ISO C forbids forward references to 'enum' types"
"ISO C forbids taking the address of an expression of type 'void'"
"ISO C requires a named parameter before '...'"
'ISO C requires a translation unit to contain at least one declaration'
'ISO C++ considers this destructor name lookup to be ambiguous'
'ISO C++ does not allow %select{an attribute list|%0}1 to appear here'
'ISO C++ does not allow %select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2 because it casts away qualifiers, even though the source and destination types are unrelated'
"ISO C++ does not permit the 'bool' keyword after 'concept'"
"ISO C++ forbids forward references to 'enum' types"
"ISO C++ only allows ':' in member enumeration declaration to introduce a fixed underlying type, not an anonymous bit-field"
'ISO C++ requires a definition in this translation unit for %select{function|variable}0 %q1 because its type does not have linkage'
'ISO C++ requires field designators to be specified in declaration order; field %1 will be initialized after field %0'
"ISO C++ requires the name after '::~' to be found in the same scope as the name before '::~'"
"ISO C++ specifies that qualified reference to %0 is a constructor name rather than a %select{template name|type}1 in this context, despite preceding %select{'typename'|'template'}2 keyword"
'ISO C++ standards before C++17 do not allow new expression for type %0 to use list-initialization'
'ISO C++11 does not allow access declarations; use using declarations instead'
'ISO C++11 does not allow conversion from string literal to %0'
'ISO C++11 requires a parenthesized pack declaration to have a name'
"ISO C++17 does not allow 'register' storage class specifier"
'ISO C++17 does not allow a decomposition group to be empty'
'ISO C++17 does not allow dynamic exception specifications'
'ISO C++17 does not allow incrementing expression of type bool'
"ISO C++20 considers use of overloaded operator '%0' (with operand types %1 and %2) to be ambiguous despite there being a unique best viable function%select{ with non-reversed arguments|}3"
"ISO C++20 requires return type of selected 'operator==' function for rewritten '%1' comparison to be 'bool', not %0"
'ISO C90 does not allow subscripting non-lvalue array'
'ISO C99 requires whitespace after the macro name'
'IT block support'
'Id of alloc to export if -memprof-dot-scope=alloc or to highlight if -memprof-dot-scope=all'
'Id of context to export if -memprof-dot-scope=context or to highlight otherwise'
"Identifies whether Control Flow Integrity protects all indirect control flow instructions in the provided object file, DSO or binary.\nNote: Anything statically linked into the provided file *must* be compiled with '-g'. This can be relaxed through the '--ignore-dwarf' flag."
'If Converter'
"If ThinLTO and WPD is enabled and this option is true, vtable profiles will be used by ICP pass for more efficient indirect call sequence. If false, type profiles won't be used."
'If a personality routine is marked uninstrumented from the ABI list, do not create a wrapper for it.'
'If an allocatable left-hand side of an intrinsic assignment is unallocated or its shape/type does not match the right-hand side, then it is automatically (re)allocated'
'If enabled, drop make.implicit metadata in unswitched implicit null checks to save time analyzing if we can keep it.'
'If enabled, simple loop unswitching will also consider llvm.experimental.guard intrinsics as unswitch candidates.'
'If enabled, the freeze instruction will be added to condition of loop unswitch to prevent miscompilation.'
'If present, forces/disables the use of long calls'
'If present, stops packetizing after N instructions'
'If profile count information is used in tail duplication cost model, the gained fall through number from tail duplication should be at least this percent of hot count.'
'If set to true, IRCE may eliminate wide range checks in loops with narrow latch condition.'
'If set, and on a color-capable terminal controls whether or not to print diagnostics in color'
'If set, assume that loads and stores do not alias'
'If set, benchmark all sizes from sweep-min-size to sweep-max-size'
'If set, changes formatting warnings to errors'
'If set, do not actually make the formatting changes'
"If set, don't error out on the specified warning type."
'If set, fail with exit code 1 on incomplete format.'
'If set, overrides the include sorting behavior\ndetermined by the SortIncludes style flag'
'If set, overrides the qualifier alignment style\ndetermined by the QualifierAlignment style flag'
'If set, shows the list of processed files'
'If set, unknown format options are only warned about.\nThis can be used to enable formatting, even if the\nconfiguration contains unknown (newer) options.\nUse with caution, as this might lead to dramatically\ndiffering format depending on an option being\nsupported or not.'
'If specified, IR printed using the -print-[before|after]{-all} options will be dumped into files in this directory rather than written to stderr'
'If stats should be appended to stats-file instead of overwriting it'
'If the function being instrumented contains more than this number of memory accesses, use callbacks instead of inline checks (-1 means never use callbacks).'
'If the function being instrumented requires more than this number of checks and origin stores, use callbacks instead of inline checks (-1 means never use callbacks).'
'If the function being instrumented requires more than this number of origin stores, use callbacks instead of inline checks (-1 means never use callbacks).'
'If the profile density is below the given threshold, it will be suggested to increase the sampling rate.'
'If the runtime tripcount for the loop is lower than the threshold, the loop is considered as flat and will be less aggressively unrolled.'
'If the sample profile is accurate, we will mark all un-sampled branches and calls as having 0 samples. Otherwise, treat them conservatively as unknown. '
'If the sample profile is accurate, we will mark all un-sampled callsite and function as having 0 samples. Otherwise, treat un-sampled callsites and functions conservatively as unknown. '
"If the size of a function is smaller than the threshold, assume it can be inlined by PGO early inliner and it won't be adjusted based on sample profile."
'If the total count of context profile is smaller than the threshold, it will be merged into context-less base profile.'
'If the total count of the profile is smaller than threshold, it will be trimmed.'
'If the valnos size of an interval is larger than the threshold, it is regarded as a large interval. '
'If true, annotate inline advisor remarks with LTO and pass information.'
'If true, artificially skip inline transformation in sample-loader pass, and merge (or scale) profiles (as configured by --sample-profile-merge-inlinee).'
'If true, basic blocks are re-numbered before MBP layout is printed into a dot graph. Only used when a function is being printed.'
'If true, import function declaration as fallback if the function definition is not imported.'
'If true, keep the vtable symbols in indexed profiles'
'If true, scale the working set size of the partial sample profile by the partial profile ratio to reflect the size of the program being compiled.'
'If true, the virtual table address will be instrumented to know the types of a C++ pointer. The information is used in indirect call promotion to do selective vtable-based comparison.'
'If using a contextual profile in this module, and an indirect call target is marked as alwaysinline, perform indirect call promotion for that target. If multiple targets for an indirect call site fit this description, they are all promoted.'
'Ignore #line directives when displaying diagnostic locations'
'Ignore RecMII'
'Ignore TTI attributes compatibility check between callee/caller during inline cost calculation'
"Ignore all DWARF data. This relaxes the requirements for all statically linked libraries to have been compiled with '-g', but will result in false positives for 'CFI unprotected' instructions."
'Ignore attribute objc_direct so that direct methods can be tested'
'Ignore balance information, always return (1: Even, 2: Odd).'
'Ignore bit-field types when aligning structures'
'Ignore call stack samples for hybrid samples and produce context-insensitive profile.'
'Ignore case distinctions when searching.'
'Ignore element line number.'
'Ignore environment variables to detect CUDA installation'
'Ignore existing branch weights on IR and always overwrite.'
'Ignore functions that match a regex. Multiple regexes can be comma separated. Scop detection will ignore all functions that match ANY of the regexes provided.'
'Ignore insert conflict and keep running to fix.'
'Ignore possible aliasing of the array bases'
'Ignore redundant instrumentation'
'Ignore the definition of the given macro when building and loading modules'
'Ignore the whitespace from the input file when emitting preprocessor output. It will only contain whitespace when necessary, e.g. to keep two minus signs from merging into to an increment operator. Useful with the -P option to normalize whitespace such that two files with only formatting changes are equal.\n\nOnly valid with -E on C-like inputs and incompatible with -traditional-cpp.'
'Ignore unexpected diagnostic messages'
'Ignore warnings from system headers (default)'
"Implement the 'patchable-function' attribute"
'Implicit null checks'
'Implicitly search the file system for module map files.'
"Implies all other options in 'Symbol Types' category"
'Implies most other options.'
'Implies the SAVE attribute for non-automatic local objects in subprograms unless RECURSIVE'
'Import all external functions in index.'
'Import constant global variables with references'
'Import declaration.'
'Import full type definitions for ThinLTO.'
'Import functions with noinline attribute'
'Import module.'
'Import summary to use for testing the ThinLTO backend via opt'
'Import the polyhedral description of the detected Scops'
'Import typeid resolutions from summary and globals'
'Import.'
'Improve global merge pass to ignore globals only used alone'
'Improve global merge pass to look at uses'
'Improve the code quality by splitting alternate instructions'
'In all cases'
'In conjunection with -type-index and -id-index, dumps the entire dependency graph for the specified index instead of just the single record with the specified index'
"In profiling mode like sampleFDO, if a function doesn't have profile, we cannot tell the function is cold for sure because it may be a function newly added without ever being sampled. With the flag enabled, compiler can put such profile unknown functions into a special section, so runtime system can choose to handle it in a different way than .text section, to save RAM for example. "
'In the OpenMP data clauses treat `a(N)` as `a(N:N)`.'
'In the dump requested by -dump-input, print <N> input lines\nbefore and <N> input lines after any lines specified by\n-dump-input-filter.  When there are multiple occurrences of\nthis option, the largest specified <N> has precedence.  The\ndefault is 5.\n'
"In the dump requested by -dump-input, print only input lines of\nkind <value> plus any context specified by -dump-input-context.\nWhen there are multiple occurrences of this option, the <value>\nthat appears earliest in the list below has precedence.  The\ndefault is 'error' when -dump-input=fail, and it's 'all' when\n-dump-input=always.\n"
'In the report, sort the timers in each group in wall clock time order'
'Include BLOCKINFO details in low level dump'
"Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once."
'Include Parameters in templates.'
'Include all attributes.'
'Include and chain a header file after turning it into PCH'
'Include brief documentation comments in code-completion results.'
'Include code completion results which require small fix-its.'
'Include code patterns in code-completion results'
'Include comments from within macros in preprocessed output'
'Include comments in preprocessed output'
'Include declaration types in AST dumps'
'Include default header file for OpenCL and HLSL'
'Include file before parsing'
"Include line table offset in function's debug info and emit end sequence after each function's line data."
'Include macros from file before parsing'
'Include macros in code-completion results'
'Include module files in dependency output'
'Include only compilands those which match a regular expression'
'Include only symbols which match a regular expression'
'Include only types which match a regular expression'
'Include path for coverage check.'
'Include precompiled header file'
'Include system headers in dependency output'
'Include what you use. Insert the owning header for top-level symbols, unless the header is already directly included or the symbol is forward-declared'
'Incorporate CUDA device-side binary into host object file.'
'Increase alignment of LDS if it is not on align boundary'
"Increases 'x86-br-merging-base-cost' in cases that it is likely that all conditionals will be executed. For example for merging the conditionals (a == b && c > d), if its known that a == b is likely, then it is likely that if the conditionals are split both sides will be executed, so it may be desirable to increase the instruction cost threshold. Set to -1 to never merge likely branches."
"Increases 'x86-br-merging-base-cost' in cases that the target supports conditional compare instructions."
'Incremental depth computation will be used for basic blocks with more instructions.'
'Index of module to extract'
'Indicate the sample profile being used is flattened, i.e., no inline hierarchy exists in the profile'
'Indirect access memory instruction weight'
'Induction Variable Users'
'Infer address spaces'
'Infer counts from stale profile data.'
'Infer missing call frames due to compiler tail call elimination.'
'Infer nuw/nsw flags using context where suitable'
'Inheritance.'
'Inhibit optimization of S->D register accesses on A15'
'Init Undef Pass'
"Initialize trivial automatic stack variables. Defaults to 'uninitialized'"
'Inject absolute symbol definitions (syntax: <name>=<addr>)'
'Inject symbol aliases (syntax: <alias-name>=<aliasee>)'
'Inline all applicable functions on the device.'
'Inline all functions early'
"Inline cold call sites in profile loader if it's beneficial for code size."
'Inline expressions that are used only once rather than generating a let-binding'
'Inline functions as deemed beneficial by the compiler'
'Inline functions which are (explicitly or implicitly) marked inline'
'Inline shadow poisoning for blocks up to the given size in bytes.'
'Inline suitable functions'
'Inline threshold for device compilation for CUDA/HIP'
'Inlined function.'
'Inlinee lines (DEBUG_S_INLINEELINES subsection)'
'Inliner for always_inline functions'
'Inner loop block size threshold to analyze in unroll for AMDGPU'
'Inplace edit <file>s'
'Inplace edit <file>s, if specified.'
'Input JSON stream encoding'
'Input file. Can be specified multiple times for multiple input files.'
"Input file. The format is an array of contexts.\nEach context is a dictionary with the following keys:\n'Guid', mandatory. The value is a 64-bit integer.\n'Counters', mandatory. An array of 32-bit ints. These are the counter values.\n'Contexts', optional. An array containing arrays of contexts. The context array at a position 'i' is the set of callees at that callsite index. Use an empty array to indicate no callees."
"Input language ('ir' or 'mir')"
'Input lines with annotations'
'Input lines with starting points of annotations'
'Input lines with starting points of error annotations'
'Input remark format to parse'
'Insert BLOCK/LOOP/TRY/TRY_TABLE markers for WebAssembly scopes'
'Insert CFI remember/restore state instructions'
'Insert KCFI indirect call checks'
'Insert XRay ops'
'Insert a break point on the last enabled count of a chunks list'
'Insert a specific header. This should run with STDIN mode.\nThe result is written to stdout. It is currently used for\neditor integration. Support YAML/JSON format:\n  -insert-header="{\n     FilePath: "/path/to/foo.cc",\n     QuerySymbolInfos: [\n       {RawIdentifier: foo,\n        Range: {Offset: 0, Length: 3}}\n     ],\n     HeaderInfos: [ {Headers: "\\"foo_a.h\\"",\n                     QualifiedName: "a::foo"} ]}"'
'Insert calls to __dfsan_*_callback functions on data events.'
'Insert calls to __dfsan_nonzero_label on observing a parameter, load or return with a nonzero label'
'Insert calls to callback functions on conditionals.'
'Insert calls to callback functions on data reaching a function.'
'Insert calls to fentry at function entry (x86/SystemZ only)'
'Insert checks for constant shadow values'
'Insert fentry calls'
'Insert instructions into the prologue for storing into the stack ring buffer'
'Insert instructions into the prologue for storing into the stack ring buffer directly'
'Insert pseudo probe annotations for value profiling'
'Insert required mode register values'
'Insert sanitizers on OptimizerEarlyEP.'
'Insert stack protectors'
'Insert stores for EH state numbers'
'Insert symbols at valid longjmp targets for /guard:cf'
'Insert symbols at valid targets for /guard:ehcont'
'Insert the experimental `assertalign` node.'
'Insert vsetvlis before vmvNr.vs to ensure vtype is valid and vill is cleared'
'InstPrinter options'
'Instantiate templates already while building a PCH'
'Instead of emitting the pipelined code, annotate instructions with the generated schedule for feeding into the -modulo-schedule-test pass'
'Instead of expanding system headers when emitting preprocessor output, preserve the #include directive. Useful when producing preprocessed output for test case reduction. May produce incorrect output if preprocessor symbols that control the included content (e.g. _XOPEN_SOURCE) are defined in the including source file. The portability of the resulting source to other compilation environments is not guaranteed.\n\nOnly valid with -E.'
'Instead of running LTO, list the dependent libraries in each IR file'
'Instead of running LTO, list the symbols in each IR file'
'Instead of running LTO, print the mach-o cpu in each IR file'
'Instruction Inverse Throughput'
'Instruction Latency'
"Instruction cutoff for aggressive tail duplication during layout. Used at -O3. Tail merging during layout is forced to have a threshold that won't conflict."
"Instruction cutoff for tail duplication during layout. Tail merging during layout is forced to have a threshold that won't conflict."
'Instruction latency'
'Instruction schedulers available (before register allocation):'
'Instructions, lines, scopes, symbols and types.'
'Instrument (context sensitive) the IR to generate profile.'
'Instrument - operations with pointer operands'
'Instrument <, <=, >, >= with pointer operands'
'Instrument <, <=, >, >=, - with pointer operands'
'Instrument atomics'
'Instrument code to produce gcov data files (*.gcda)'
'Instrument control-flow architecture protection'
'Instrument device library for HIP, which is a LLVM bitcode containing __cyg_profile_func_enter and __cyg_profile_func_exit'
'Instrument floating-point comparisons'
'Instrument function entry and exit'
'Instrument function entry only, after inlining, without arguments to the instrumentation call'
'Instrument function entry with call to __CheckForDebuggerJustMyCode'
'Instrument function entry/exit with calls to e.g. mcount() (post inlining)'
'Instrument functions with a call to __CheckForDebuggerJustMyCode'
'Instrument globals'
'Instrument memintrinsics (memset/memcpy/memmove)'
'Instrument memory accesses'
"Instrument only functions from files where names don't match all the regexes separated by a semi-colon"
'Instrument only functions from files where names match any regex separated by a semi-colon'
'Instrument scalar stack variables'
'Instrument the IR to generate profile.'
'Instrument the same temp just once'
'Instrumentation profile (default)'
'Intel SVML library'
'Interchange if you gain more than this number'
'Internal Options'
'Internal and debugging options'
'Internal traces and extra debugging code.'
'Internalize linked symbols'
'Intrinsics Generator Options'
'Introduce mul24 intrinsics in AMDGPUCodeGenPrepare'
'Invalid code ranges.'
'Invalid symbol coverages values.'
'Invalid symbol locations.'
'Issue call to specified function rather than a trap instruction'
'Iterate to a fixed point when attempting to convert reg-reg instructions to reg-imm'
'Iterative inference: delta convergence precision; smaller values typically lead to better results at the cost of worsen runtime'
'Iterative inference: maximum number of update iterations per block'
'JIT the code and run it by invoking the main function'
'JITLink Options'
'JSON format'
'Join isolated components having positive flow.'
'Jump score power (when --split-strategy=cdsplit)'
'Just print the preprocessed file'
'Just run preprocessor, no output (for timings)'
'Kaleidoscope example program\n'
'Keep all benchmarks (default)'
'Keep all non-cold contexts (increases cloning overheads)'
'Keep aside the last <num-test-traces> traces in the profile when computing the function order and instead use them to evaluate that order'
'Keep copies of symbols in LTO indexing'
'Keep going on errors encountered'
'Keep going on errors encountered in trace 1'
'Keep going on errors encountered in trace 2'
'Keep initializers of constants'
'Keep max reading'
'Keep min reading'
'Keep only the benchmarks that *DO* involve memory'
'Keep only those benchmarks that do *NOT* involve memory'
'Keep readings set with min-variance'
'Keep static const variables even if unused'
'Keep the last K contexts while merging cold profile. 1 means the context-less base profile'
'Keep the last K contexts while merging profile. -1 means no depth limit.'
'Keep the last K contexts while merging unsymbolized profile. -1 means no depth limit.'
'Keep the last K frames while merging cold profile. 1 means the context-less base profile'
'Kernel code model'
'Kernel limit wave threshold in %'
'Kind of debug info to add'
'LCSSA Verifier'
'LLDB Instrumentation Generator'
'LLJITDumpObjects'
'LLJITWithCustomObjectLinkingLayer'
'LLJITWithGDBRegistrationListener'
'LLJITWithInitializers'
'LLJITWithLazyReexports'
'LLJITWithObjectCache'
'LLJITWithObjectLinkingLayerPlugin'
'LLJITWithRemoteDebugging'
'LLJITWithThinLTOSummaries'
'LLVM C++ ABI Data Dumper\n'
'LLVM C++ mangled name remapper\n'
'LLVM Contextual Profile Utils\n'
'LLVM IR Similarity Visualizer\n'
'LLVM OpenMP'
'LLVM PDB Dumper\n'
'LLVM automatic testcase reducer.\nSee https://llvm.org/docs/CommandGuide/llvm-reduce.html for more information.\n'
'LLVM automatic testcase reducer. See\nhttp://llvm.org/cmds/bugpoint.html for more information.\n'
'LLVM code coverage tool\n'
'LLVM module splitter\n'
'LLVM profile data\n'
'LMUL argument must be in the range [0,3] or [5,7]'
'LSR search space complexity limit'
'LTO Options'
'LTO requires -fuse-ld=lld'
'Label.'
'Lanai Assembly Printer'
'Lanai DAG->DAG Pattern Instruction Selection'
'Lanai memory ALU combiner pass'
'Language standard to compile for'
'Large code model'
'Large stride memory access threshold'
'Large stride memory access weight'
'Last chance recoloring max depth'
'Last chance recoloring maximum number of considered interference at a time'
'Launch an out-of-process executor to run code'
'Lazy Block Frequency Analysis'
'Lazy Branch Probability Analysis'
'Lazy Machine Block Frequency Analysis'
'Lazy Value Information Analysis'
'Least BB number of huge function.'
'Leave out unnecessary information when printing MIR'
"Legalize the Machine IR a function's Machine IR"
'Level of field padding for AddressSanitizer'
'Lex file in raw mode and dump raw tokens'
'Lex tokens from a .s file'
'Lexical block.'
'Lexical scope level (File=0, Compile Unit=1).'
'Libraries to link dynamically'
"Like 'ExecutorNative' if ORC runtime provided, otherwise like 'GenericIR'"
'Like -MD, but also implies -E and writes to stdout by default'
'Like -MMD, but also implies -E and writes to stdout by default'
'Like -O2 but optimize for code size above all else. Similar to clang -Oz. Same as -passes="default<Oz>"'
'Like -O2 but size-conscious. Similar to clang -Os. Same as -passes="default<Os>"'
'Like -finstrument-functions, but insert the calls after inlining'
'Like -fmodules-decluse but requires all headers to be in modules'
"Like -fno-semantic-interposition but don't use local aliases"
'Like -printlineinfo but does not load the object first'
'Like /Z7'
'Like /showIncludes but omit system headers'
'Limit all regclasses to N registers'
'Limit block size to analyze in load/store widening pass'
'Limit cases to analyze when converting a switch to select'
'Limit debug information produced to reduce size of debug binary'
'Limit float precision to the given value'
'Limit maximum recursion depth when calculating costs of speculatively executed instructions'
'Limit on instruction search range in frame index elimination'
'Limit on the cost of instructions that can be repeated due to loop flattening'
'Limit on the number of reused registers in frame index elimination'
'Limit options in the Modules category to the specified module index'
'Limit ready list to N instructions'
'Limit register pressure of scheduled loop'
'Limit the length of PHI chains to lookup'
'Limit the number of collected seeds groups in a BB to cap compilation time.'
'Limit the number of instructions to process (0 for no limit)'
'Limit the number of loads analysed'
'Limit the number of operands to inline for Token Factors'
'Limit the number of registers available for integer arguments'
'Limit the number of times for the same StoreNode and RootNode to bail out in store merging dependence check'
'Limit the recursion depth when building a vectorizable tree'
'Limit the size of the SLP scheduling region per block'
'Limit the size of the seed bundle to cap compilation time.'
'Limits the range of tokens in -check file on which various features are tested. Example --check-lines=3-7 restricts testing to lines 3 to 7 (inclusive) or --check-lines=5 to restrict to one line. Default is testing entire file.'
'Linalg ODS Gen from YAML'
'Line kind to use when printing lines.'
'Line qualifiers (Newstatement, BasicBlock, etc.).'
'Line tables'
'Linearize DAG, no scheduling'
'Lines (DEBUG_S_LINES subsection)'
'Lines referenced in the debug information.'
'Lines.'
'Link Options'
'Link XRay runtime library when -fxray-instrument is specified (default)'
'Link against library X in the library search paths'
'Link against library X in the library search paths with hidden visibility'
'Link against library X with hidden visibility'
'Link and internalize needed symbols from the given bitcode file before performing optimizations.'
'Link as a hybrid ARM64X image'
'Link builtin bitcodes after the optimization pipeline'
'Link clang-offload-bundler bundles for HIP'
'Link device libraries for GPU device compilation'
'Link only needed symbols'
'Link stack frames through backchain on System Z'
'Link the LLVM C Library for GPUs'
'Link the flang-rt shared library'
'Link the flang-rt static library'
'Link the following file lazily'
'Link the given bitcode file before performing optimizations.'
'Link two nested MLIR modules into a single LLVM IR module. Useful if both the host and device code can be run on the same CPU, as in SPIR-V CPU Runner tests.'
'Linkage name.'
'Linking with hot/cold operator new interfaces'
'Linux PPC Assembly Printer'
'List bundle IDs in the bundled file.\n'
'List each file/graph name if/when it is linked'
'List ignored files.'
'List of files with compilation or modularization problems for assistant mode.  This will be excluded.'
'List of functions to print disassembly for. Accept demangled names only. Only work with show-disassembly-only'
"List of key and value arguments. Required keywords are 'file' and 'triple'."
'List of modes to link in by default into XRay instrumented binaries.'
'List of profitability heuristics to be used. They are applied in the given order'
'List of symbols to export from the resulting object file'
'Live DEBUG_VALUE analysis'
'Live Interval Analysis'
'Live Range Shrink Pass'
'Live Register Matrix'
'Live Stack Slot Analysis'
'Live Variable Analysis'
'Load MIR Sample Profile'
'Load a pch file and use it instead of all code up to and including <filename>'
'Load all members of static archives'
'Load all members of static archives that implement Objective-C classes or categories, or Swift structs, classes or extensions'
'Load and verify that a pre-compiled header file is not stale'
'Load dialects from plugin library'
'Load module without materializing metadata, then materialize only the metadata'
'Load pass plugin from a dynamic shared object file (only with new pass manager).'
'Load passes from plugin library'
'Load shadow address into a local variable for each function'
'Load target address from GOT'
'Load the clang builtins module map file.'
'Load the named plugin (dynamic shared object)'
'Load the specified plugin'
'Load this module map file'
'Load top-level profiles that the sample reader initially skipped for the call-graph matching (only meaningful for extended binary format)'
'Load, link and verify the resulting memory image.'
'Load, link, and execute the inputs.'
'Load, link, and print line information for each function using the debug object'
'Load, link, and print line information for each function.'
'Local Stack Slot Allocation'
'Local reassignment can yield better allocation decisions, but may be compile time intensive'
'Local strategy.'
'Locations and Variables'
'Locations only'
"Log action execution to a file, or stderr if  '-' is passed"
'Look up implicit modules in the prebuilt module path'
'LoongArch Assembly Printer'
'LoongArch DAG->DAG Pattern Instruction Selection'
'LoongArch Dead register definitions'
'LoongArch Merge Base Offset'
'LoongArch Optimize W Instructions'
'LoongArch Pre-RA pseudo instruction expansion pass'
'LoongArch atomic pseudo instruction expansion pass'
'Loop Data Prefetch'
'Loop Invariant Code Motion'
'Loop Strength Reduction'
'Loop Terminator Folding'
'Loop over the snippet'
'Loop rescheduling'
'Loop-Closed SSA Form Pass'
"LoopVersioningLICM's minimum allowed percentage of possible invariant instructions per loop"
"LoopVersioningLICM's threshold for maximum allowed loop nest/depth"
'Loops with a constant trip count smaller than this value will not use the count register.'
'Loops with a constant trip count that is smaller than this value are vectorized only if no scalar iteration overheads are incurred.'
'Low level details'
'Lower @llvm.global_dtors via `__cxa_atexit`'
'Lower AArch64 MachineInstrs after legalization'
'Lower Alloca'
'Lower GPU ctor / dtors to globals on the device.'
'Lower MASSV entries'
"Lower SwitchInst's to branches"
'Lower Unreachable'
'Lower aggregate copies, and llvm.mem* intrinsics into loops'
'Lower all intrinsic procedure implementation in their own functions'
'Lower allocations to fortran runtime calls'
'Lower arguments (NVPTX)'
'Lower atomic intrinsics to non-atomic form'
'Lower atomics of local memory to simple load/stores'
'Lower bound for a buffer to be considered for stack protection'
'Lower ctors and dtors for AMDGPU'
'Lower ctors and dtors for NVPTX'
'Lower interleaved memory accesses to target specific intrinsics'
'Lower invoke and unwind, for unwindless code generators'
'Lower kernel argument loads in IR pass'
'Lower thread local variables'
'Lower threshold (in bytes) for widening to HVX vectors'
'Lower to high level FIR'
'Lower uses of LDS variables from non-kernel functions'
'Lower variables reachable from one kernel, otherwise abort'
'Lower via HLFIR transformational intrinsic operations such as hlfir.sum'
'Lower via mixture of above strategies'
'Lower via module struct'
'Lower via table lookup'
'Lowers br_unless into inverted br_if'
'M68k Assembly Printer'
'M68k DAG->DAG Pattern Instruction Selection'
'M68k MOVEM collapser pass'
'M68k PIC Global Base Reg Initialization'
'M68k pseudo instruction expansion pass'
'MC Options'
'MCJIT'
'MIPS DAG->DAG Pattern Instruction Selection'
'MIPS Specific: Compact branch policy.'
"MIPS: Don't trap on integer division by zero."
'MIPS: Emit R_{MICRO}MIPS_JALR relocation with jalr'
'MIPS: Expand all branches to long format.'
'MIPS: Skip branch expansion pass.'
'MIPS: Try to allocate variables in the following sections if possible: .rodata, .sdata, .data .'
'MIPS: Use gp_rel for data that is not defined by the current object.'
'MIPS: Use gp_rel for object-local data.'
'MIPS: permit tail calls.'
'MIR Printer'
'MISSED'
'MLIR CPU execution driver\n'
'MLIR LSP Language Server'
'MLIR test case query tool.\n'
'MLIR test case reduction tool.\n'
'MS-style inline assembly is not available: %0'
'MSF Container Options'
'MSF File Options'
'MSP430 Assembly Printer'
'MSP430 DAG->DAG Pattern Instruction Selection'
'MVE gather/scattering lowering pass'
'MVE lane interleaving'
'MVE tail-predication pass options'
'Mach-O: dump the raw contents of the listed segments instead of parsing them:'
'Machine Block Frequency Analysis'
'Machine Branch Probability Analysis'
'Machine CFG Printer Pass'
'Machine Check Debug Module'
'Machine Common Subexpression Elimination'
'Machine Copy Propagation Pass'
'Machine Cycle Info Analysis'
'Machine Debugify Module'
'Machine Dominance Frontier Construction'
'Machine Function Outliner'
'Machine Function Printer'
'Machine InstCombiner'
'Machine Instruction Scheduler'
'Machine Late Instructions Cleanup Pass'
'Machine Loop Invariant Code Motion'
'Machine Module Information'
'Machine Natural Loop Construction'
'Machine Sanitizer Binary Metadata'
'Machine Strip Debug Module'
'Machine Trace Metrics'
'Machine Uniformity Info Analysis'
'Machine code sinking'
'Machine instruction scheduler to use'
'MachineDominator Tree Construction'
'MachineLICM should avoid speculation'
'MachineLICM should hoist even cheap instructions'
'MachinePostDominator Tree Construction'
'Main file name to use for debug info and source if missing'
'Make -gen-asm-parser emit assembly parser #N'
'Make -gen-asm-writer emit assembly writer #N'
'Make StdCall calling convention the default'
'Make all profile counter updates atomic (for testing only)'
'Make an absence of debug location information explicit.'
'Make assembler not emit warnings'
'Make assembler warnings fatal'
'Make char type unsigned'
'Make counter updates atomic'
'Make small offsets be this amount for testing purposes'
'Make the jump table addresses canonical in the symbol table'
'Make the x10 register call-saved (AArch64 only)'
'Make the x11 register call-saved (AArch64 only)'
'Make the x12 register call-saved (AArch64 only)'
'Make the x13 register call-saved (AArch64 only)'
'Make the x14 register call-saved (AArch64 only)'
'Make the x15 register call-saved (AArch64 only)'
'Make the x18 register call-saved (AArch64 only)'
'Make the x8 register call-saved (AArch64 only)'
'Make the x9 register call-saved (AArch64 only)'
'Make time trace capture verbose event details (e.g. source filenames). This can increase the size of the output by 2-3 times'
'Mangling number exceeds limit (65535)'
'Manifest Attributor internal string attributes.'
'Manually specify the CUDA feature to use'
'Map file source paths in debug info'
'Mapping between default visibility and export'
'Margin representing the unused percentage of the register pressure limit'
'Mark <function> as being replaceable by the Windows kernel loader'
'Mark code section jump table data regions.'
'Mark cold functions with minsize.'
'Mark cold functions with optnone.'
'Mark cold functions with optsize.'
'Mark intrinsics that match the specified regexp as taking alias.scopes, noalias, and tbaa metadata'
'Mark intrinsics that match the specified regexp as taking an access group metadata'
'Mark outline function calls with ColdCC'
'Mark some metadata features uncovered in functions with associated no_sanitize attributes.'
'Mark the file as not needing an executable stack'
'Marked up disassembly of strings of hex bytes'
'Match allocation profiles onto existing hot/cold operator new calls'
'Match functions using namespace and edit distance'
'Match functions with call graph'
'Match profile with function hash'
'Match string for rename'
'Max #stores to inline memcpy'
'Max #stores to inline memmove'
'Max #stores to inline memset'
'Max PHIs in BB to duplicate for jump threading'
'Max average trip count which will cause loop peeling.'
'Max block size to duplicate for jump threading'
'Max coefficients in AddRec during evolving'
'Max count of stack frame shrink-wraps'
'Max depth to recursively search for missing frames through tail calls.'
'Max integer bitwidth to consider in float2int(default=64)'
'Max num VGPRs for whole-wave register allocation.'
'Max num uses visited for identifying load invariance in loop using invariant start (default = 8)'
'Max number counter promotions per loop to avoid increasing register pressure too much'
'Max number of BBs to explore for reachability analysis'
'Max number of VRegs allowed to pass GC pointer meta args in'
'Max number of address users to look at'
'Max number of allowed counter promotions'
'Max number of annotations for a single indirect call callsite'
'Max number of basic blocks on the path between hoisting locations (default = 4, unlimited = -1)'
'Max number of blocks searched to find a threading path'
'Max number of blocks to be partially inlined'
'Max number of blocks visited while enumerating paths around a switch'
"Max number of blocks we're willing to speculate on (and recurse into) when deducing if a value is fully available or not in GVN (default = 600)"
'Max number of dependences to attempt Load PRE (default = 100)'
'Max number of devirtualizations for devirt module pass'
'Max number of duplications by CHR for a region'
'Max number of instructions to hoist (default unlimited = -1)'
'Max number of instructions to scan for aggressive instcombine.'
'Max number of instructions to scan for vector combining.'
'Max number of instructions to scan in each basic block in GVN (default = 100)'
'Max number of iterations to be peeled from a loop, such that fusion can take place'
'Max number of iterations to prefetch ahead'
'Max number of memchecks allowed per eliminated load on average'
'Max number of memory uses to explore during partial unswitching analysis'
'Max number of mux expansions'
'Max number of partial inlining. The default is unlimited'
'Max number of paths enumerated around a switch'
'Max number of precise value annotations for a single memopintrinsic'
'Max number of predecessors to consider tail merging'
'Max number of promotions for a single indirect call callsite'
'Max number of promotions for a single indirect call callsite in sample profile loader'
'Max number of promotions for this compilation'
'Max number of segment coalescings'
'Max number of statepoints allowed to pass GC Ptrs in registers'
'Max number of stores to be predicated behind an if.'
'Max number of visited instructions when trying to find dominating value of select dependency (default = 100)'
'Max number of vtables annotated for a vtable load instruction.'
'Max results to display'
'Max size of a block which is still considered small enough to thread through'
'Max total number of preprocessed tokens for -Wmax-tokens.'
'Maximal number of attributor iterations.'
'Maximal number of callees specialized for a call base'
'Maximal number of chained initializations (to avoid stack overflows)'
'Maximal number of fixpoint iterations.'
'Maximal number of uses to explore.'
'Maximize bandwidth when selecting vectorization factor which will be determined by the smallest type in loop.'
'Maximize the band depth (yes/no)'
'Maximum SLP vectorization factor (0=unlimited)'
'Maximum alloca size to use for inline cost'
'Maximum allowed iterations to unroll under pragma unroll full.'
'Maximum amount of memory to use. 0 disables check. Defaults to 400MB (800MB under valgrind, 0 with sanitizers).'
'Maximum amount of nodes to process while searching SCEVUnknown Phi strongly connected components'
'Maximum amount of shared memory to use.'
'Maximum array size considered when doing a combine'
"Maximum block frequency, expressed as a percentage of caller's entry frequency, for a call site to be considered cold for enabling coldcc"
"Maximum block frequency, expressed as a percentage of caller's entry frequency, for a callsite to be cold in the absence of profile information."
'Maximum byte size to consider promote alloca to vector'
'Maximum codesize growth allowed per function'
'Maximum cost accepted for the transformation'
'Maximum cost multiplier of TCC_expensive for the dependence slice of a cold operand to be considered inexpensive.'
'Maximum cost of combining conditions when folding branches'
'Maximum depth allowed for the recursive algorithm used to explore MIV direction vectors.'
'Maximum depth for recursive loop guard collection'
'Maximum depth of loop nest considered for the transform'
'Maximum depth of recursive SCEV complexity comparisons'
'Maximum depth of recursive SCEV operations implication analysis'
'Maximum depth of recursive SExt/ZExt/Trunc'
'Maximum depth of recursive arithmetics'
'Maximum depth of recursive constant evolving'
'Maximum depth of recursive value complexity comparisons'
'Maximum distance between a tfr feeding a store we consider the store still to be newifiable'
'Maximum distance of loop carried dependences that are handled'
'Maximum factor by which expected native size may increase before blocking any further inlining.'
'Maximum factor for an interleaved access group (default = 8)'
'Maximum frequency of path for an operand to be considered cold.'
'Maximum global merge offset'
'Maximum input DBG_VALUE insts supported by debug range extension'
'Maximum input basic blocks before DBG_VALUE limit applies'
'Maximum instructions to analyze per moved initialization'
'Maximum instructions to consider tail duplicating'
'Maximum instructions to consider tail duplicating blocks that end with indirect branches.'
'Maximum interleave factor for MVE VLDn to generate.'
'Maximum length of a memory clause, instructions'
'Maximum length of dependent chains to hoist (default = 10, unlimited = -1)'
'Maximum length of recurrence chain when evaluating the benefit of commuting operands'
'Maximum nesting level for parentheses, brackets, and braces'
'Maximum num basic blocks before debug info dropped'
"Maximum number of 'operator->'s to call for a member access"
'Maximum number of BBs allowed in a function after inlining (compile time constraint)'
'Maximum number of ISL operations to invest for known analysis; 0=no limit'
'Maximum number of base-updates to check generating postindex.'
'Maximum number of basic blocks in a function to run ext-TSP block placement.'
'Maximum number of branches in the accumulator tree'
'Maximum number of call targets per call site to enable branch funnels'
'Maximum number of comparisons done when trying to merge runtime memory checks. (default = 100)'
'Maximum number of conditions in MC/DC coverage'
'Maximum number of cycles in the timeline view, or 0 for unlimited. Defaults to 80 cycles'
'Maximum number of dataflow edges to traverse when evaluating the benefit of commuting operands'
'Maximum number of dependences collected by loop-access analysis (default = 100)'
'Maximum number of instruction to generate when lowering constant multiplication instead of calling library function [default=14]'
'Maximum number of instructions for ObjectSizeOffsetVisitor to look at'
'Maximum number of instructions per speculated block.'
'Maximum number of isl operations to invest for lifetime analysis; 0=no limit'
'Maximum number of iterations SCEV will symbolically execute a constant derived loop'
'Maximum number of iterations to go through when propagating sample block/edge weights through the CFG.'
'Maximum number of iterations to print in timeline view'
'Maximum number of iterations we keep dismantling potential values.'
'Maximum number of load-store instructions that should be handled in the dependency matrix. Higher value may lead to more interchanges at the cost of compile-time'
'Maximum number of memory instructions to place in the same hard clause'
'Maximum number of parameters for a split function'
'Maximum number of physical registers which can be used for register mappings'
'Maximum number of potential values to be tracked for each position.'
'Maximum number of predicated jumps to be converted to New Value Jump'
'Maximum number of prefixes to use for padding'
'Maximum number of ptr states the optimizer keeps track of'
'Maximum number of replacements'
"Maximum number of results to stream as a response to single request. Limit is to keep the server from being DOS'd. Defaults to 10000."
'Maximum number of rows to keep in constraint system'
'Maximum number of simplification steps in HLIR'
'Maximum number of split partitions'
'Maximum number of test vectors in MC/DC coverage'
'Maximum number of threads (for emulation thread-local storage)'
'Maximum number of threads to use to process chunks. Set to 1 to disable parallelism.'
'Maximum number of times to run the full set of delta passes (default=5)'
'Maximum number of undroppable users for instruction sinking'
'Maximum number phis to handle in intptr/ptrint folding'
'Maximum of xors'
'Maximum optimization to perform'
'Maximum predecessors (maximum successors at the same time) to consider tail duplicating blocks.'
'Maximum recursion depth when finding forked SCEVs (default = 5)'
'Maximum recursion level'
'Maximum search distance for definition of CR bit spill on ppc'
'Maximum size for the name of non-global values.'
'Maximum size of ALL constants to promote into a constant pool'
'Maximum size of IFMap'
'Maximum size of OrderedRegisterList'
'Maximum size of constant to promote into a constant pool'
"Maximum size of range check type for which can be produced runtime overflow check of its limit's computation"
'Maximum stages allowed in the generated scheduled.'
'Maximum successors (maximum predecessors at the same time) to consider tail duplicating blocks.'
'Maximum throughput from the decoders (instructions per cycle)'
'Maximum time a channel may stay idle until server closes the connection, in seconds. Defaults to 480.'
'Maximum users to visit in copy from constant transform'
'Maximum vector size (in 32b registers) to use when promoting alloca'
'May have atomic operations on fine-grained memory'
'May have atomic operations on remote memory'
'Measure the parse tree'
'Medium code model'
'MemProf memory access profile'
'Member.'
'Memory Dependence Analysis'
'Memory SSA'
'Memory reference level analysis that distinguish access instructions in the same statement'
'Memory reference level analysis that distinguish accessed references in the same statement'
'Merge all const globals without looking at uses'
'Merge and hoist M0 initializations'
'Merge clones before assigning functions'
'Merge context profiles before calculating thresholds.'
'Merge context sample profiles whose count is below cold threshold'
'Merge contiguous icmps into a memcmp'
'Merge disjoint stack slots'
'Merge global variables'
"Merge past inlinee's profile to outline version if sample profile loader decided not to inline a call site. It will only be enabled when top-down order of profile loading is enabled. "
'Merge the given AST file into the translation unit being compiled.'
"Method to generate ID's for compilation units for single source offloading languages CUDA and HIP: 'hash' (ID's generated by hashing file path and command line options) | 'random' (ID's generated as random numbers) | 'none' (disabled). Default is 'hash'. This option will be overridden by option '-cuid=[ID]' if it is specified."
'MicroMips instruction size reduce pass'
"Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))"
'Middle half duplicate mode'
'Middle half loop mode'
'Min number of instructions to consider tail merging'
'Min percent of cold bytes at a callsite to discard non-cold contexts'
'Min percent of cold bytes matched to hint allocation cold'
'Min percent of cold bytes to hint alloc cold during cloning'
'Min percent of max cold bytes for critical cold context'
'Min stride to add prefetches'
'MinGW specific. Disable support for automatic dllimport in code generation and linking'
'MinGW specific. Enable code generation support for automatic dllimport, and enable support for it in the linker. Enabled by default.'
'MinInstrCount strategy.'
'Minimal Transform dialect driver\n'
'Minimal common base load/store instructions triggering DS/DQ form preparation'
'Minimal common base load/store instructions triggering chain commoning preparation. Must be not smaller than 4'
'Minimize AVX to SSE transition penalty'
'Minimize number of registers used'
'Minimum BranchProbability to consider a region cold.'
'Minimum block executions to consider its BranchProbabilityInfo valid'
"Minimum block frequency, expressed as a multiple of caller's entry frequency, for a callsite to be hot in the absence of profile information."
'Minimum density for building a jump table in a normal function'
'Minimum density for building a jump table in an optsize function'
'Minimum depth of loop nest considered for the transform'
'Minimum distance between predicate definition and farther of the two predicated uses'
'Minimum gain per loop (in cycles) threshold.'
'Minimum length of accumulator chains required for the optimization to kick in'
'Minimum number of extenders to trigger replacement'
'Minimum number of similar functions with the same hash required for merging.'
'Minimum number of times a block must be executed to be retained.'
"Minimum priority, runs on idle CPUs. May leave 'performance' cores unused."
"Minimum profile count required for an optimization remark to be output. Use 'auto' to apply the threshold from profile summary"
"Minimum profile count required for an optimization remark to be output. Use 'auto' to apply the threshold from profile summary."
'Minimum ratio comparing relative sizes of each outline candidate and original function'
'Minimum relative gain per loop threshold (1/X). Defaults to 12.5%'
'Minimum time granularity (in microseconds) traced by time profiler'
'Minimum type size in bits for breaking large PHI nodes'
'Mips Assembly Printer'
'Mips VR4300 mulmul bugfix'
'Miscellaneous Options'
'Missing debug location (gaps).'
'Mode for reading thread pointer'
'Mode of the RegBankSelect pass'
'Model read-only scalar values in the scop description'
'Model the cost of loop rotation more precisely by using profile data.'
'Modextract Options'
'Module & File Options'
'Module Options'
'Module Summary Analysis'
'Module Verifier'
'Module concatenation'
'Module extractor'
'Module summary index filename'
'Module summary info'
'Module.'
'Modulo Schedule test pass'
'Modulo Software Pipelining'
'Move ARGUMENT instructions for WebAssembly'
'Move contextual profiling roots and the graphs under them in their own module.'
'Move the symbols with the given name. This will delete these symbols wherever they are originally defined, and make sure their linkage is External where they are imported. It is meant to be used with the name of contextual profiling roots.'
'Move/duplicate certain instructions close to their use'
'Multiplier to apply to threshold when determining whether or not to fold branch to common destination when vector operations are present'
'Multiplier to bump up callsite threshold for previous inlining.'
'Multiplier to multiply cycle savings by during inlining'
'Multiply the `import-instr-limit` threshold for cold callsites'
'Multiply the `import-instr-limit` threshold for critical callsites'
'Multiply the `import-instr-limit` threshold for hot callsites'
'Must specify at least '
'My Pass Name'
'N must be a power of two. Align loops to the boundary'
'NVPTX Address space based Alias Analysis'
'NVPTX Address space based Alias Analysis Wrapper'
'NVPTX Assembly Printer'
'NVPTX DAG->DAG Pattern Instruction Selection'
'NVPTX Forward Params'
'NVPTX Peephole'
'NVPTX ProxyReg Erasure'
'NVPTX Specific: 0 use sqrt.approx, 1 use sqrt.rn.'
'NVPTX Specific: Disable generation of f16 math ops.'
"NVPTX Specific: FMA contraction (0: don't do it 1: do it  2: do it aggressively"
'NVPTX Specific: Override the precision of the lowering for f32 fdiv'
'NVPTX Specific: force 4-byte minimal alignment for byval params of device functions.'
'NVPTX Specific: schedule for register pressue'
'NVPTX Specific: whether to use lg2.approx for log2'
'NVPTX Tag Invariant Loads'
'NVPTX target requires CUDA 9.2 or above; CUDA %0 detected'
'NVVM reflection, enabled by default'
'Name for native GCC compiler'
'Name for the section containing cold functions extracted by hot-cold splitting.'
'Name of checks to match against'
'Name of op to match on'
'Name of project.'
'Name of the entry point transform symbol'
'Name of the interesting-ness test to be run'
'Name of the macro to be defined'
'Name of the macro to be defined -- ignored by mlir-pdll'
'Name of the macro to be defined -- ignored by mlir-src-sharder'
'Name of the split dwarf debug info file to encode in the object file'
'Namespace.'
'Narrow LSR complex solution using expectation of registers number'
'Narrow LSR search space by filtering non-optimal formulae with the same ScaledReg and Scale'
'Nary reassociation'
'Natural Loop Information'
'Neon vector size must be 64 or 128 bits'
'Nested profile, the input should be CS flat profile'
'Never'
'Never Step Into.'
'Never detect stack use after return.'
'Never dump input'
'Never emit tail calls'
'Never insert #include directives as part of code completion'
'Never set the bit'
'Never track the overflow bit.'
'New FS discriminators encoding (incompatible with the original encoding)'
'New namespace.'
'New statement.'
'No Vectorization'
'No action'
'No checking'
'No code generation'
'No compression'
'No constructors'
'No destructors'
'No effect'
'No extract instruction with offset 0'
'No implicit externals allowed'
'No implicit typing allowed unless overridden by IMPLICIT statements'
'No offloading entry generated while offloading is mandatory.'
'No optimizer'
'No profile correlation'
'No speculation'
'No vector functions library'
'No verification'
'Non-relocatable code'
'None.'
'Normalize integers in CFI indirect call type signature checks'
"Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file"
'Number limit for gluing ld/st of memcpy.'
'Number of addresses from which to enable MIMG NSA.'
'Number of backend threads'
"Number of blocks in the 'x' dimension"
"Number of blocks in the 'y' dimension"
"Number of blocks in the 'z' dimension"
'Number of compile threads'
'Number of cycles to assume for a call instruction'
'Number of entries in the micro-op queue'
'Number of instructions to allow ahead of the critical path in sched=list-ilp'
'Number of instructions to prefetch ahead'
'Number of interferences after which we declare an interference unevictable and bail out. This is a compilation cost-saving consideration. To disable, pass a very large number.'
'Number of intervals to track'
'Number of iterations to run'
'Number of materialization threads to use'
'Number of merge threads to use (default: autodetect)'
'Number of metadatas above which we emit an index to enable lazy-loading'
'Number of output files'
'Number of partitions to use for parallel full LTO codegen, ld.lld only.'
'Number of registers to limit to when printing regmask operands in IR dumps. unlimited = -1'
'Number of seconds program is allowed to run before it is killed (default is 300s), 0 disables timeout'
"Number of threads in the 'x' dimension"
"Number of threads in the 'y' dimension"
"Number of threads in the 'z' dimension"
'Number of threads to use (0 = auto)'
'Number of times to divide chunks prior to first test'
'Number of times to rerun the outliner after the initial outline'
'Number of times to shuffle and verify use-lists'
'Number of tracked SGPRs before initiating hazard cull on memory wait'
"Number of triangle-shaped-CFG's that need to be in a row for the triangle tail duplication heuristic to kick in. 0 to disable."
'Number of unswitch candidates that are ignored when calculating cost multiplier.'
'Number of uses of a base pointer to check before it is no longer considered for post-indexing.'
'OBJECT_MODE setting %0 is not recognized and is not a valid setting'
'ODS output filename'
'OPTIONS:\n'
'OVERVIEW: '
'ObjC ARC contraction'
'Object file format name.'
'Objective-C GC does not allow weak variables on the stack'
'Objective-C declarations may only appear in global scope'
'Objective-C dispatch method to use'
'Objective-C index expression has incomplete class type %0'
'Objective-C message has incomplete result type %0'
'Objective-C methods as coroutines are not yet supported'
'Objective-C object of type %0 is bridged to %1, which is not valid CF object'
'Objective-C++ Automatic Reference Counting standard library kind'
'Offloading entry for declare target variable %0 is incorrect: the address is invalid.'
'Offloading entry for declare target variable is incorrect: the address is invalid.'
'Offloading entry for target region in %0 is incorrect: either the address or the ID is invalid.'
'Offset element to print.'
'Offsets are in UTF-16 code units'
'Offsets are in UTF-8 bytes'
'Offsets are in unicode codepoints'
'Old namespace.'
'Omit all lfences before branch instructions.'
'Omit all lfences other than the first to be placed in a basic block.'
'Omit frame pointer setup for leaf functions'
'Omit function index section at the expense of single-function patching performance'
'Omit the RTTI component from virtual tables'
"Omit the frame pointer from functions that don't need it. Some stack unwinding cases, such as profilers and sanitizers, may prefer specifying -fno-omit-frame-pointer. On many targets, -O1 and higher omit the frame pointer by default. -m[no-]omit-leaf-frame-pointer takes precedence for leaf functions"
'On AIX, request creation of a build-id string, "0xHEXSTRING", in the string table of the loader section inside the linked binary'
'On Windows, do not emit /defaultlib: directives to link compiler-rt libraries'
'On Windows, emit /defaultlib: directives to link compiler-rt libraries (default)'
'One completion item for each semantically distinct completion, with full type information'
'One shadow type id for each of `float`, `double`, `long double`. `d`,`l`,`q`,`e` mean double, x86_fp80, fp128 (quad) and ppc_fp128 (extended double) respectively. The default is to shadow `float` as `double`, and `double` and `x86_fp80` as `fp128`'
'One statement per basic block'
'Only AST generation'
'Only a certain kind of dependences (all/raw)'
'Only allow instructions before a call, if their cost is below DuplicationThreshold'
'Only check if the module has objective-C defined in it'
"Only comparisons where inputs don't need [sz]ext."
'Only comparisons with sext result.'
'Only comparisons with zext result.'
'Only compile for the offloading device.'
'Only compile for the offloading host.'
'Only consider IR changes for passes whose names match the specified value. No-op without -print-changed'
'Only count the calls that are recursive'
'Only display members that contribute to class size.'
'Only display the basic block whose name matches this for all view-*-dags options'
'Only display whether errors occurred.'
'Only do the coverage check.'
'Only dump files with relative paths or absolute paths with the prefix specified by -s'
'Only emit EH frame entries when compact unwind is not available'
'Only emit checks for arguments of functions whose names match the given regular expression'
'Only enable generating memmove in non-nested loops'
'Only enumerate VLMAX for VL operand'
'Only execute frontend initialization'
'Only functions matching the filter are shown in the output. For overlapping CSSPGO, this takes a function name with calling context.'
"Only fuse 'blessed' FP ops."
"Only fuse FP ops when the result won't be affected."
'Only generate the minimal instruction sequence'
'Only has an effect when specified with -print-pipeline-passes. Disables verifying that the textual pipeline generated by -print-pipeline-passes can be used to create a pipeline.'
'Only i32 comparisons in GPRs.'
'Only i32 comparisons with sext result.'
'Only i32 comparisons with zext result.'
'Only i64 comparisons in GPRs.'
'Only i64 comparisons with sext result.'
'Only i64 comparisons with zext result.'
'Only import first N functions if N>=0 (default -1)'
'Only import functions with less than N instructions'
'Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)'
'Only inline functions explicitly or implicitly marked inline'
'Only instrument 1 of N groups'
'Only keep the intrinsics with the specified substring in their record name'
'Only lfence before groups of terminators where at least one branch instruction has an input to the addressing mode that is a register other than %rip.'
'Only loops with vectorization factor equal to or larger than the specified value are considered for epilogue vectorization.'
'Only match instructions with the given prefix'
'Only output names of functions whose max count values are below the cutoff value'
'Only precompile the input'
'Only print AMD GPUs'
'Only print IR for functions whose name match this for all print-[before|after][-all] options'
'Only print NVIDIA GPUs'
'Only print to a depth of N elements.'
'Only process files that match this filter. This flag only applies to all-TUs.'
'Only read thinlto index and print the index as LLVM assembly.'
'Only record optimization remarks from passes whose names match the given regular expression'
'Only record remark information for passes whose names match the given regular expression'
'Only rename namespaces in files that match the given pattern.'
'Only reorder expressions within a basic block when exposing CSE opportunities'
"Only run on certain regions (The provided identifier must appear in the name of the region's entry block"
'Only run on functions that match a regex. Multiple regexes can be comma separated. Scop detection will run on all functions that match ANY of the regexes provided.'
'Only run ordered assignment scheduling with no codegen'
'Only run preprocess and compilation steps'
'Only run preprocess, compile, and assemble steps'
'Only run scop detection, but no other optimizations'
'Only run the driver.'
'Only run the preprocessor'
'Only schedule this MBB#'
'Only schedule this function'
'Only show debug message if the branch probability is greater than this value (in percentage).'
'Only show debug message if the source branch weight is greater  than this value.'
'Only show error-related paths in the analysis graph'
'Only split jump tables containing functions whose sizes are less or equal than this threshold.'
'Only split jump tables with size less or equal than JumpTableSizeThreshold.'
'Only supported on AArch64, PowerPC, RISC-V, SPARC, SystemZ, and X86'
'Only try to inject loop invariant conditions and unswitch on them to eliminate branches that are not-taken 1/<this option> times or less.'
'Only use DAG-combiner alias analysis in this function'
'Only use warnings from specified component'
'Only vectorize if you gain more than this number '
'Only vectorize small trees if they are fully vectorizable'
'Only view functions that match this pattern'
'Only warn if #include directives are inside extern or namespace blocks if the included header is in the header list.'
'Only write combined global index for ThinLTO backends'
'Only write output if it changed'
'Only write to the output file if it changed'
"OpenACC %select{clause '%1'|directive '%2'|sub-array bound}0 requires expression of integer type (%3 invalid)"
"OpenACC '%0' clause applies to 'device_type' '%1', which conflicts with previous '%0' clause"
"OpenACC '%0' clause cannot appear more than once%select{| in a 'device_type' region}2 on a '%1' directive"
"OpenACC '%0' clause cannot appear on the same '%2' construct as a '%1' clause %select{inside a compute construct with a|and a}3 'num_gangs' clause with more than one argument"
"OpenACC '%0' clause on a 'declare' directive is not allowed at global or namespace scope"
"OpenACC '%0' construct can only be applied to a 'for' loop"
"OpenACC '%0' construct must have a terminating condition"
"OpenACC '%0' construct must have at least one %1 clause"
"OpenACC '%0' construct must have initialization clause in canonical form ('var = init' or 'T var = init')"
"OpenACC '%0' modifier not valid on '%1' clause"
"OpenACC '%0' variable must monotonically increase or decrease ('++', '--', or compound assignment)"
"OpenACC '%1' clause %select{|with more than 1 argument }0may not appear on a '%2' construct with a '%3' clause%select{ with more than 1 argument|}0"
"OpenACC '%1' clause cannot appear more than once on a '%0' directive"
"OpenACC '%1' clause is not valid on '%0' directive"
"OpenACC 'bind' clause on a declaration must bind to the same name as previous 'bind' clauses"
"OpenACC 'collapse' clause loop count must be a %select{constant expression|positive integer value, evaluated to %1}0"
"OpenACC 'device_type' clause on a 'set' construct only permits one architecture"
"OpenACC 'gang' clause may have at most one %select{unnamed or 'num'|'dim'|'static'}0 argument"
"OpenACC 'reduction' composite variable must not have non-scalar field"
"OpenACC 'reduction' variable must be a composite of scalar types; %1 %select{is not a class or struct|is incomplete|is not an aggregate}0"
"OpenACC 'reduction' variable must be of scalar type, sub-array, or a composite of scalar types;%select{| sub-array base}1 type is %0"
"OpenACC 'reduction' variable must have the same operator in all nested constructs (%0 vs %1)"
"OpenACC 'routine' construct must have at least one 'gang', 'seq', 'vector', or 'worker' clause that applies to each 'device_type'"
"OpenACC 'routine' directive with a name refers to a function with the same name as the function on the following line; this may be unintended"
"OpenACC 'tile' clause size expression must be %select{an asterisk or a constant expression|positive integer value, evaluated to %1}0"
"OpenACC 'update' construct may not appear in place of the statement following a%select{n if statement| while statement| do statement| switch statement| label statement}0"
"OpenACC clause '%0' after 'device_type' clause on a 'routine' conflicts with the '%1' clause before the first 'device_type'"
"OpenACC clause '%0' may not appear on the same construct as a '%1' clause on a '%2' construct"
"OpenACC clause '%0' may not follow a '%1' clause in a '%2' construct"
"OpenACC clause '%0' on a 'routine' directive conflicts with the '%1' clause applying to the same 'device_type'"
"OpenACC clause name '%0' is a deprecated clause name and is now an alias for '%1'"
"OpenACC construct '%0' cannot be used here; it can only be used in a statement context"
"OpenACC construct 'routine' with implicit function not yet implemented, pragma ignored"
"OpenACC construct 'self' has no effect when an 'if' clause evaluates to true"
'OpenACC directives will result in no runtime behavior; use -fclangir to enable runtime effect'
'OpenACC integer expression has incomplete class type %0'
'OpenACC integer expression requires explicit conversion from %0 to %1'
'OpenACC routine name %0 does not name a function'
'OpenACC routine name %0 names a set of overloads'
'OpenACC sub-array %select{lower bound|length}0 evaluated to a value (%1) that would be out of the range of the subscripted array size of %2'
'OpenACC sub-array %select{lower bound|length}0 evaluated to negative value %1'
'OpenACC sub-array base is of incomplete type %0'
'OpenACC sub-array cannot be of function type %0'
'OpenACC sub-array length is unspecified and cannot be inferred because the subscripted value is %select{not an array|an array of unknown bound}0'
'OpenACC sub-array specified range [%0:%1] would be out of the range of the subscripted array size of %2'
'OpenACC sub-array subscripted value is not an array or pointer'
"OpenACC variable %select{in 'use_device' clause|on 'declare' construct}0 is not a valid variable name or array name"
'OpenACC variable in cache directive is not a valid sub-array or array element'
'OpenACC variable is not a valid variable name, sub-array, array element,%select{| member of a composite variable,}0 or composite variable member'
'OpenCL extension %0 is core feature or supported optional core feature - ignoring'
'OpenCL extension %0 unknown or does not require pragma - ignoring'
'OpenCL language standard to compile for.'
'OpenCL only. Allow denormals to be flushed to zero.'
'OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.'
'OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.'
'OpenCL only. Allow use of less precise MAD computations in the generated binary.'
'OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.'
'OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel'
'OpenCL only. Disables all standard includes containing non-native compiler types and functions.'
"OpenCL only. Enable or disable OpenCL extensions/optional features. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'."
'OpenCL only. Generate kernel argument metadata.'
'OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.'
'OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.'
'OpenCL only. This option disables all optimizations. By default optimizations are enabled.'
'OpenCL only. This option is added for compatibility with OpenCL 1.0.'
'OpenCL only. Treat double precision floating-point constant as single precision constant.'
'OpenMP array shaping operation is not allowed here'
'OpenMP captured regions are not yet supported in %select{streaming functions|functions with ZA state|functions with ZT0 state}0'
"OpenMP clause '%0' is only available as extension, use '-fopenmp-extensions'"
'OpenMP constructs may not be nested inside a simd region%select{| except for ordered simd, simd, scan, or atomic directive}0'
'OpenMP constructs may not be nested inside an atomic region'
"OpenMP extension clause '%0' only allowed with '#pragma omp %1'"
'OpenMP iterator is not allowed here'
'OpenMP loop iteration variable cannot have more than 64 bits size and will be narrowed'
"OpenMP offloading target '%0' is similar to target '%1' already specified; will be ignored"
'OpenMP only allows an ordered construct with the simd clause nested in a simd construct'
'OpenMP standard version'
'OpenMP support in flang is still experimental'
"OpenMP target architecture '%0' pointer size is incompatible with host '%1'"
"OpenMP target is invalid: '%0'"
'Optimise without changing ABI'
'Optimization level 0. Similar to clang -O0. Same as -passes="default<O0>"'
'Optimization level 1. Similar to clang -O1. Same as -passes="default<O1>"'
'Optimization level 2. Similar to clang -O2. Same as -passes="default<O2>"'
'Optimization level 3. Similar to clang -O3. Same as -passes="default<O3>"'
'Optimization level for NVVM compilation'
"Optimization level. [-O0, -O1, -O2, or -O3] (default = '-O2')"
'Optimization remarks file containing inline remarks to be replayed by cgscc inlining.'
'Optimization remarks file containing inline remarks to be replayed by inlining from sample profile loader.'
'Optimizations available (use "-passes=" for the new pass manager)'
'Optimize AArch64 selected instructions'
'Optimize LiveIntervals for WebAssembly'
'Optimize SCoPs using ISL'
'Optimize addressing mode'
'Optimize callbacks'
'Optimize calls with "returned" attributes for WebAssembly'
'Optimize for code generation'
'Optimize for size'
'Optimize for size  (like /Og     /Os /Oy /Ob2 /GF /Gy)'
'Optimize for size (like clang -Os)'
'Optimize for speed'
'Optimize for speed (like /Og /Oi /Ot /Oy /Ob2 /GF /Gy)'
'Optimize for speed (like clang -O3)'
'Optimize instrumentation'
'Optimize machine instruction PHIs'
'Optimize memory intrinsic result values for WebAssembly'
'Optimize selects'
'Optimize spill slots'
'Optimize the memop size <= this value'
'Optimizer Pipeline'
'Option passed to ISL'
'Optional function name to filter collection by'
'Optional function name to filter collection by (accepts regular expressions)'
'Optional remark arg to filter collection by (accepts regular expressions).'
'Optional remark arg to filter collection by.'
'Optional remark name to filter collection by (accepts regular expressions).'
'Optional remark name to filter collection by.'
'Optional remark pass name to filter collection by (accepts regular expressions).'
'Optional remark pass name to filter collection by.'
'Optional remark type to filter collection by.'
'Options for -gen-(attrdef|typedef|enum|op|dialect)-doc'
'Options for -gen-asm-matcher'
'Options for -gen-asm-parser'
'Options for -gen-asm-writer'
'Options for -gen-attrdef-*'
'Options for -gen-bytecode'
'Options for -gen-dag-isel'
'Options for -gen-dialect-*'
'Options for -gen-disassembler'
'Options for -gen-global-isel'
'Options for -gen-global-isel-combiner'
'Options for -gen-instr-info'
'Options for -gen-intrinsic-enums'
'Options for -gen-irdl-dialect'
'Options for -gen-pass-capi-header and -gen-pass-capi-impl'
'Options for -gen-pass-decls'
'Options for -gen-python-op-bindings'
'Options for -gen-register-info'
'Options for -gen-sdnode-info'
'Options for -gen-typedef-*'
'Options for -print-enums'
'Options for gen-directive-decl'
'Options for op definition generators'
'Options to disable Loop Idiom Recognize Pass.'
'Options to pass to the fuzzer'
'Options: <empty>'
'Options: <empty>|Legal|Discard|Convert. If non-empty, ignore TargetTransformInfo and always use this transformation for the %evl parameter (Used in testing).'
'Orc JIT'
'Orc-based lazy JIT.'
'Orc-specific linker'
'Order local stack symbols.'
'Other Options'
'Outline loop blocks from loop chain if (frequency of loop) / (frequency of block) is greater than this ratio'
'Output'
'Output .gcov in intermediate text format'
'Output Filename'
'Output Options'
'Output a side-by-side diff in HTML.'
'Output assembly code file during compilation'
'Output assembly listing file'
'Output dwarf accelerator tables.'
'Output file'
'Output file for export'
'Output file. Can be specified multiple times for multiple output files.'
'Output filename'
'Output filename for pass remarks'
'Output filename for the reduced test case'
'Output format for line-based coverage reports'
'Output format for timing data'
'Output graphs with edge colors determined by this field'
'Output graphs with edges colored by this field'
'Output graphs with edges labeled with this field'
'Output graphs with vertex colors determined by this field'
'Output graphs with vertices colored by this field'
'Output graphs with vertices labeled with this field'
"Output in chrome's trace event format. May be visualized with the Catapult trace viewer."
'Output input source as HTML'
'Output instructions per ScopStmt'
'Output object file'
'Output options'
'Output profile file'
'Output replacements as XML.'
'Output resource usage of launched kernels'
'Output the total number corresponding to the count for the provided input file.'
"Output trace to the given file name or '-' for stdout."
'Outputs for view.'
'Overapproximation of dependences'
'Overlay the virtual filesystem described by file over the real file system'
'Overlay the virtual filesystem described by file over the real file system. Additionally, pass this overlay file to the linker if it supports it'
'Override cost based safe divisor widening for div/rem instructions'
'Override default dump names'
'Override host target triple'
'Override inferred gcda file'
'Override inferred gcno file'
'Override optimization level for codegen hooks, legacy PM only'
'Override output filename'
'Override record layouts with those in the given file'
"Override source file's content (in the overlaying\nvirtual file system) with input from <stdin> and run\nthe tool on the new content with the compilation\noptions of the source file. This mode is currently\nused for editor integration."
'Override target triple detection'
'Override target triple for module'
"Override the 'argv[0]' value passed into the executing program"
'Override the behaviour of '
'Override the behaviour of expand-variadics'
'Override the default ABI to return all structs on the stack'
'Override the default ABI to return small structs in registers'
'Override the path to the output spec json file. See -ml-inliner-model-under-training documentation for the specification of that file.'
'Override the processor dispatch width'
'Override the profitability heuristics for Machine CSE'
'Override the variant of check applied to authenticated LR during tail call'
'Override the vector register size in bits, which is otherwise found by querying TTI.'
'Override the visibility of globals based on their final DLL storage class.'
'Override unique ID of ctor/dtor globals.'
'Override use of color (default = isatty)'
'Override validator version for module. Format: <major.minor>;Default: DXIL.dll version or current internal version'
'Overrides result used for getMaximumVF query which is used exclusively by SLP vectorizer.'
'Overrides the _OPENACC macro value for experimental testing during OpenACC support development'
'Overwrite edited files.'
'PASSED'
'PBQP register allocator'
'PCH was compiled with different VFS overlay files than are currently in use'
'PDB Stream Options'
'PDLL Frontend'
'PDLL LSP Language Server'
'PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.\n'
'PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.\n'
'POSIX thread model'
'Pack non-contiguous assumed shape dummy arrays into contiguous memory'
'Pack non-contiguous assummed shape arrays into contiguous memory'
'Pad previous instructions to implement align directives'
'Pad previous instructions to implement branch alignment'
'Pair of function name and filename, where function should be imported from bitcode in filename'
'Parameter.'
'Parse OpenMP pragmas and generate parallel code.'
'Parse and pretty-print the input'
'Parse templated function definitions at the end of the translation unit'
'Partially inline calls to library functions'
'Partition data sections using profile information.'
'Partition functions into N groups and select only functions in group i to be instrumented using -fprofile-selected-function-group'
'Partition functions into N groups using -fprofile-function-groups and select only functions in group i to be instrumented. The valid range is 0 to N-1 inclusive'
'Pascal string is too long'
'Pass -b <arg> to the linker on AIX'
'Pass -z <arg> to the linker'
'Pass <arg> to clang -cc1'
'Pass <arg> to clang -cc1as'
'Pass <arg> to fatbinary invocation'
'Pass <arg> to plugin <name>'
'Pass <arg> to the CUDA/HIP device compilation'
'Pass <arg> to the CUDA/HIP host compilation'
'Pass <arg> to the assembler'
'Pass <arg> to the clang driver'
'Pass <arg> to the compilation if the target matches <arch>'
'Pass <arg> to the flang compiler'
'Pass <arg> to the linker'
'Pass <arg> to the offload linkers or the ones identified by -<triple>'
'Pass <arg> to the preprocessor'
'Pass <arg> to the ptxas assembler'
'Pass <arg> to the static analyzer'
'Pass <arg> to the target offloading toolchain identified by <triple>.'
'Pass <arg> to the target offloading toolchain.'
'Pass a workload definition. This is a file containing a JSON dictionary. The keys are root functions, the values are lists of functions to import in the module defining the root. It is assumed -funique-internal-linkage-names was used, to ensure local linkage functions have unique names. For example: \n{\n  "rootFunction_1": ["function_to_import_1", "function_to_import_2"], \n  "rootFunction_2": ["function_to_import_3", "function_to_import_4"] \n}'
'Pass all reduction arguments by reference'
'Pass the comma separated arguments in <arg> to the assembler'
'Pass the comma separated arguments in <arg> to the linker'
'Pass the comma separated arguments in <arg> to the preprocessor'
'Passes available:'
'Path and name to DWP file.'
'Path of .dwp file. When not specified, it will be <binary>.dwp in the same directory as the main binary.'
'Path of debug info binary, llvm-profgen will load the DWARF info from it instead of the executable binary.'
'Path of perf-script trace created by Linux perf tool with `script` command(the raw perf.data should be profiled with -b)'
'Path of profiled executable binary.'
'Path of raw perf data created by Linux perf tool (it should be profiled with -b)'
'Path of the LLVM sample profile'
'Path of the unsymbolized profile created by `llvm-profgen` with `--skip-symbolization`'
'Path to CSV file containing lines of function names and attributes to add to them in the form of `f1,attr1` or `f2,attr2=str`.'
'Path to SavedModel from the previous training iteration.\nThe directory is also expected to contain a JSON specification of the \noutputs expected to be logged, where the first entry must be the \ninlining decision. The file containing the specification should be \ncalled output_spec.json. The expected JSON value is an array of \ndictionaries. Each dictionary should have 2 keys: \n\n- "tensor_spec, followed by the TensorSpec description of the\noutput; and \n- "logging_name", a string indicating the name to use when\nlogging the output values. \n\nExample:\n[\n  {\n    "logging_name" : "some_name", \n    "tensor_spec" : { \n      "name" : "model_name", \n      "port" : 0,\n      "shape" : [2, 3],\n      "type" : "float"\n      }\n  }\n]\n\nThe first value must always correspond to the decision.'
'Path to a directory containing a .clang-format file\ndescribing a formatting style to use for formatting\ncode when -style=file.\n'
'Path to a system assembler, picked up on AIX only'
'Path to binary from which the profile was collected.'
'Path to file containing newline-separated [<weight>,]<filename> entries'
'Path to file containing the list of function symbols used to populate profile symbol list'
'Path to ignorelist file for sanitizers'
'Path to libomptarget-amdgcn bitcode library'
'Path to libomptarget-nvptx bitcode library'
'Path to libomptarget-spirv bitcode library'
"Path to opt. (default: search path for 'opt'.)"
'Path to ptxas (used for compiling CUDA code)'
'Path to saved model evaluating native size from IR.'
'Path to system headers on z/OS'
'Path to system ignorelist file for sanitizers'
'Path to the DIA SDK'
'Path to the IR file produced by the frontend for the host.'
'Path to the VCToolChain'
'Path to the Windows SDK'
'Path to the YAML configuration file to be used for multilib selection'
'Path to the file where tracer logs will be stored'
'Path to the instrumented context sensitive profile.'
'Path to the memory profile.'
'Path to the prefetch hints profile. See also -x86-discriminate-memops'
'Path to the profile remapping file.'
'Path to the profile.'
'Path to the project. Required when connecting using remote index.'
'Path to the vocabulary file for IR2Vec'
'Path to where .dwo files will be written out to.'
'Path where the development - mode inlining log is saved.'
'Pathname where the element is defined.'
'Peephole Optimizations'
'Penalty of calling a function that requires a change to PSTATE.SM'
'Penalty of inlining a call that requires a change to PSTATE.SM'
'Percentage of prologue execution count to use as threshold when evaluating whether a block is cold enough to be profitable to move eligible spills there'
'Percentage threshold for splitting single-instruction critical edge. If the branch threshold is higher than this threshold, we allow speculative execution of up to 1 instruction to avoid branching to splitted critical edge'
'Percentage threshold of matched basic blocks at which stale profile inference is executed.'
'Percentile of profile quality distributions over hottest functions to report.'
'Percentile profile summary cutoff used to determine cold blocks. Unused if set to zero.'
'Perform ODR checks for decls in the global module fragment.'
'Perform SME peephole optimization'
'Perform ThinLTO end-to-end'
'Perform ThinLTO importing using provided function summary index'
'Perform ThinLTO optimizations.'
'Perform a single ThinLTO stage:'
'Perform both promotion and cross-module importing (requires -thinlto-index).'
'Perform branch folding during placement. Reduces code size.'
'Perform context sensitive PGO instrumentation'
'Perform dummy load from authenticated address'
'Perform expensive assert validation on every query to Instruction Precedence Tracking'
"Perform extra assertion checking to verify that PHINodes's hash function is well-behaved w.r.t. its isEqual predicate"
"Perform extra assertion checking to verify that SimpleValue's hash function is well-behaved w.r.t. its isEqual predicate"
'Perform frequent verification checks on nodes.'
'Perform internalization driven by -exported-symbol (requires -thinlto-index).'
'Perform link through clang-sycl-linker via the target offloading toolchain.'
'Perform mandatory inlinings module-wide, before performing inlining'
'Perform optimizations based on pattern matching'
'Perform optimizations of matrix multiplications based on pattern matching'
'Perform optimizations of tensor contractions based on pattern matching'
'Perform pre-import promotion (requires -thinlto-index).'
'Perform tail duplication during placement. Creates more fallthrough opportunities in outline branches.'
'Perform verification checks on CallingContextGraph.'
'Performs lazy compilation on whole module boundaries rather than individual functions'
'Permit merging of identical functions when optimizing.'
'Phi Values Analysis'
'Place ASan constructors in comdat sections'
'Place Backedge Safepoints'
'Place MSan constructors in comdat sections'
'Place all main program variables in static memory (otherwise scalars may be placed on the stack)'
'Place constant objects with relocatable address values in the RO data section and add -bforceimprw to the linker flags (AIX only)'
'Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)'
'Place debug types in their own section (ELF Only)'
'Place each data in its own section'
'Place each function in its own section'
"Place each function's basic blocks in unique sections (ELF Only)"
'Place uninitialized global variables in a common block'
'Platform to use with LLJIT'
'Pointer to member.'
'Pointer.'
'Polly - Calculate dependences'
'Polly - Calculate dependences for all the SCoPs of a function'
'Polly - Create LLVM-IR from SCoPs'
'Polly - Create polyhedral description of Scops'
'Polly - Create polyhedral description of all Scops of a function'
'Polly - DeLICM/DePRE'
'Polly - Detect static control parts (SCoPs)'
'Polly - Dump Function'
'Polly - Dump Module'
'Polly - Dump polyhedral description of Scops optimized with the isl scheduling optimizer and the set of post-scheduling transformations is applied on the schedule tree'
'Polly - Export Scops as JSON (Writes a .jscop file for each Scop)'
'Polly - Flatten schedule'
'Polly - Forward operand tree'
'Polly - Generate an AST from the SCoP (isl)'
'Polly - Generate an AST of the SCoP (isl)'
'Polly - Import Scops from JSON (Reads a .jscop file for each Scop)'
'Polly - Interface to polyhedral analysis engine'
'Polly - Maximal static expansion of SCoP'
'Polly - Optimize schedule of SCoP'
'Polly - Prepare code for polly'
'Polly - Print DeLICM/DePRE'
'Polly - Print Scop import result'
'Polly - Print Scops of function'
'Polly - Print Scops of function (with no function bodies)'
'Polly - Print Simplify actions'
'Polly - Print dependences'
'Polly - Print dependences for all the SCoPs of a function'
'Polly - Print flattened schedule'
'Polly - Print forward operand tree result'
'Polly - Print interface to polyhedral analysis engine analysis'
'Polly - Print optimizer schedule of SCoP'
'Polly - Print polyhedral description of Scops'
'Polly - Print polyhedral description of all Scops of a function'
'Polly - Print static control parts (SCoPs)'
'Polly - Print the AST from a SCoP (isl)'
'Polly - Prune unprofitable SCoPs'
'Polly - Remove dead iterations'
'Polly - Run canonicalization passes'
'Polly - Simplify'
'Polly - View Scops of function'
'Polly - View Scops of function (with no function bodies)'
'Polly Options'
'Pop up a window to show MISched dags after they are processed'
'Pop up a window to show SUnit dags after they are processed'
'Pop up a window to show a dag displaying MBP layout and associated block frequencies of the CFG.'
'Pop up a window to show a dag displaying how block frequencies propagation through the CFG.'
'Pop up a window to show a dag displaying how machine block frequencies propagate through the CFG.'
'Pop up a window to show dags before legalize'
'Pop up a window to show dags before legalize types'
'Pop up a window to show dags before the first dag combine pass'
'Pop up a window to show dags before the post legalize types dag combine pass'
'Pop up a window to show dags before the second dag combine pass'
'Pop up a window to show edge bundle graphs'
'Pop up a window to show isel dags as they are selected'
'Pop up a window to show sched dags as they are processed'
'Populate profile symbol list (only meaningful for -extbinary)'
'Position independent'
'Post RA hazard recognizer'
'Post RA top-down list latency scheduler'
'Post reg-alloc list scheduling direction'
'Post-Dominator Tree Construction'
'Post-RA pseudo instruction expansion pass'
'PostRA Machine Instruction Scheduler'
'PostRA Machine Sink'
'Postfix to append to the import .jsop files.'
'Potential PHI threshold per loop for PPC loop prep of DQ form'
'Potential PHI threshold per loop for PPC loop prep of DS form'
'Potential PHI threshold per loop for PPC loop prep of update form'
'Potential common base number threshold per function for PPC loop prep'
'PowerPC Branch Selector'
'PowerPC CTR Loops Verify'
'PowerPC CTR loops generation'
'PowerPC DAG->DAG Pattern Instruction Selection'
'PowerPC Early-Return Creation'
'PowerPC Expand Atomic'
'PowerPC MI Peephole Optimization'
'PowerPC Pre-Emit Peephole'
'PowerPC Reduce CR logical Operation'
'PowerPC TLS Dynamic Call Fixup'
'PowerPC TOC Register Dependencies'
'PowerPC VSX Copy Legalization'
'PowerPC VSX FMA Mutation'
'PowerPC VSX Swap Removal'
'Pre reg-alloc list scheduling direction'
'Pre-ISel Intrinsic Lowering'
'Pre-RA optimizations'
'Pre-load dynamic libraries (e.g. language runtimes required by the ORC runtime)'
'Predicate conditions in read only loops'
'Prefer add+cnt over addvl/inc/dec'
'Prefer aligned allocation for C++ Coroutines'
'Prefer hex format for immediate values'
'Prefer hex format when printing immediate values'
'Prefer in-loop vector reductions, overriding the targets preference.'
'Prefer post-indexed addressing mode'
'Prefer pre-indexed addressing mode'
'Prefer predicated Move to CSEL'
'Prefer predicating a reduction operation over an after loop select.'
'Prefer translating all intrinsics into llvm.call_intrinsic instead of using dialect supported intrinsics'
'Prefer whole register move for vector registers.'
'Prefetch write addresses'
'Prefix filenames with the main file'
'Prefix for feature names.'
'Prefix for memory access callbacks'
'Prefix of line code for repository.'
"Prefix to use for outputs (default: 'bugpoint')"
"Prefix to use from check file (defaults to 'CHECK')"
"Prefixes for aliases that don't need to be renamed, separated by a comma"
"Prefixes for functions that don't need to be renamed, separated by a comma"
"Prefixes for global values that don't need to be renamed, separated by a comma"
"Prefixes for structs that don't need to be renamed, separated by a comma"
'Preload commands from file and start interactive mode'
"Prepare '-aux-triple' only without populating '-aux-target-cpu' and '-aux-target-feature'."
'Prepare DWARF exceptions'
'Prepare SjLj exceptions'
'Prepare WebAssembly exceptions'
'Prepare Windows exceptions'
'Prepare callbr'
'Prepares for basic block sections, by splitting functions into clusters of basic blocks.'
'Prepend header file paths with this prefix. If not specified, the files are considered to be relative to the header list file.'
'Preprocess to file'
'Preprocess to stdout'
'Preserve Comments in outputted assembly'
'Preserve canonical loop structure (default = true)'
'Preserve debug info in thunk when mergefunc transformations are made.'
'Preserve expressions in AST rather than dropping them when encountering semantic errors'
'Preserve line and column number when merging locations.'
'Preserve line numbers'
'Preserve order of LLVM use-lists when serializing'
'Preserve path components'
'Preserve subregisters in tied operands'
'Preserve the type for recovery expressions when possible'
'Preserve use-list order when writing LLVM assembly.'
'Preserve use-list order when writing LLVM bitcode.'
'Pretend that scalable vectors are supported, even if the target does not support them. This flag should only be used for testing.'
'Pretty print debug locations of instructions when dumping'
'Pretty print perf data (branch weights, etc) when dumping'
'Pretty-print JSON'
'Pretty-print JSON output'
'Pretty-print JSON output in the trace'
'Prevent expanding floating point division in AMDGPUCodeGenPrepare'
'Prevent expanding integer division in AMDGPUCodeGenPrepare'
'Prevent function(s) from being devirtualized'
'Prevent misexpect diagnostics from being output if the profile counts are within N% of the expected. '
"Prevent optimization remarks from being output if they do not have at least this profile count. Use 'auto' to apply the threshold from profile summary"
'Prevents emitting diagnostics when profile counts are within N% of the threshold..'
'Primary key when ordering logical view (default: line).'
'Print (but do not run) the commands to run for this compilation'
"Print Attributor's internal call graph"
'Print DenseElementsAttrs with a hex string that have more elements than the given upper limit (use -1 to disable)'
'Print Enum list for this class'
'Print ExecutionSession state after resolving entry point'
'Print ExecutionSession state before resolving entry point'
'Print IR after each pass'
'Print IR after specified passes'
'Print IR after the pass with this number as reported by print-pass-numbers'
'Print IR before each pass'
'Print IR before specified passes'
'Print IR before the pass with this number as reported by print-pass-numbers'
'Print IR to path when opt-bisect-limit is reached'
'Print LLVM IR input to isel pass'
'Print MIR debug-locations'
'Print Machine Cycle Info Analysis'
'Print Machine Uniformity Info Analysis'
'Print Options'
'Print SSA IDs using NameLocs as prefixes'
"Print a '-passes' compatible string describing the pipeline (best-effort only)."
'Print a template comparison tree for differing templates'
'Print absolute paths in diagnostics'
'Print addresses of MachineInstrs when dumping'
'Print addresses of instructions when dumping'
'Print all GPUs (default)'
'Print all cost kinds'
'Print all hardware statistics'
"Print all of Clang's warning options"
'Print all option values after command line parsing'
'Print all records to stdout (default)'
'Print all results from files matching this regular expression.'
'Print all views including hardware statistics'
'Print allocation requests made to the memory manager by RuntimeDyld'
'Print any external commands that are to be executed instead of actually executing them - for testing purposes.\n'
'Print architectural register names rather than the ABI names (such as r14 instead of sp)'
'Print assembly as linked'
'Print assembly as parsed'
'Print attribute dependencies'
'Print available passes that can be specified in -passes=foo and exit'
'Print before passes that change them'
'Print binary blobs using hex escapes'
'Print binary load events.'
"Print call graph to 'dot' file"
'Print canonical function name.'
'Print changed IRs'
'Print cl.exe style /showIncludes to stdout'
'Print command line.'
'Print critical path length to stdout'
'Print debug info in MLIR output'
'Print debug information.\n'
'Print demangled function name'
'Print detailed output about what is being run to stderr.'
'Print diagnostic category'
'Print directive pattern matches, or add them to the input dump\nif enabled.\n'
'Print disassembled code.'
'Print dispatch statistics'
"Print dominance tree of function to 'dot' file"
"Print dominance tree of function to 'dot' file (with no function bodies)"
'Print embed directives in -E mode in addition to normal output'
'Print encoding information in the instruction info view'
'Print extra debugging information'
'Print extra information about adaptors and pass managers'
'Print final code'
'Print fix-its in machine parseable form'
'Print function to stderr'
'Print graphs around indirect CF instructions in DOT format.'
'Print imported functions'
'Print include directives in -E mode in addition to normal output'
'Print index-based devirtualization messages'
'Print info about included files to stderr'
'Print information about actions taken'
'Print information about the activities of Polly'
'Print information for functions rejected for importing'
'Print information helpful in diagnosing internal FileCheck\nissues, or add it to the input dump if enabled.  Implies\n-v.\n'
'Print instruction latencies as verbose asm comments'
'Print instruction tables'
'Print instruction tables with additional information: bypass latency, LLVM opcode, used resources'
"Print instructions that the allocator wants to fuse, but the X86 backend currently can't"
'Print internal analyzer statistics.'
'Print legacy PassManager debugging information'
'Print list of delta passes, passable to --delta-passes as a comma separated list'
'Print machine instrs after ISel'
'Print machine verifier errors on invalid reduction attempts triple'
'Print macro definitions in -E mode in addition to normal output'
'Print macro definitions in -E mode instead of normal output'
"Print matching stats for each allocation context in this module's profiles"
'Print memory access functions'
'Print memory barrier information in the instruction info view'
'Print module to stderr'
'Print more information to dbgs about GlobalISel legalizer rules being verified'
'Print name of local stack variable'
'Print non-default options after command line parsing'
'Print numeric register names rather than the ABI names (such as $r0 instead of $zero)'
'Print only the CFG without blocks body'
'Print option name with mappable diagnostics'
'Print out debug counter info after all counters accumulated'
'Print out debug counter information after all counters have been accumulated'
'Print out mismatched BFI counts after setting profile metadata The print is enabled under -Rpass-analysis=pgo, or internal option -pass-remarks-analysis=pgo.'
'Print out the non-match BFI count if a hot raw profile count becomes non-hot, or a cold raw profile count becomes hot. The print is enabled under -Rpass-analysis=pgo, or internal option -pass-remarks-analysis=pgo.'
'Print out the parsed ODS information from the input file'
'Print pass management debugging information'
'Print pass names and their ordinals'
'Print performance metrics and statistics'
"Print postdominance tree of function to 'dot' file"
"Print postdominance tree of function to 'dot' file (with no function bodies)"
'Print pretty debug info in MLIR output'
'Print pseudo probe section and disassembled info.'
"Print regions of function to 'dot' file"
"Print regions of function to 'dot' file (with no function bodies)"
'Print register file statistics'
'Print registered symbol, section, got and stub addresses'
'Print retire control unit statistics'
'Print schedule DAGs'
'Print scheduler statistics'
'Print setting flow sensitive branch probabilities'
'Print source locations.'
'Print source range spans in numeric form'
'Print statistic for the index in every input files'
'Print subprocess statistics'
'Print summary view (enabled by default)'
'Print supported -march extensions (RISC-V, AArch64 and ARM only)'
'Print supported cpu models for the given target (if target is not specified,it will print the supported cpus for the default target)'
'Print symbolic changes'
'Print the "preamble" of a file, which is a candidate for implicit precompiled headers.'
'Print the blame context (if possible) for BAD instructions. This specifies the number of lines of context to include, where zero disables this feature.'
'Print the block frequency info.'
'Print the branch probability info.'
'Print the canonical YAML for this file.'
'Print the compiler version'
'Print the current module after OpenMP optimizations.'
'Print the current module before OpenMP optimizations.'
"Print the directory pathname containing Clang's runtime libraries"
'Print the effective target triple'
'Print the extensions enabled by the given target and -march/-mcpu options. (AArch64 and RISC-V only)'
'Print the flags used for selecting multilibs (experimental)'
'Print the full library path of <file>'
'Print the full program path of <name>'
'Print the generic op form'
'Print the global id for each value when reading the module summary'
'Print the instruction info view (enabled by default)'
'Print the internal representation of the AST as JSON.'
'Print the internal representation of the AST.'
'Print the last form of the IR before crash (use -print-on-crash-path to dump to a file)'
'Print the last form of the IR before crash to a file'
'Print the library path for the currently used compiler runtime library ("libgcc.a" or "libclang_rt.builtins.*.a")'
'Print the list of headers to insert and remove'
'Print the list of registered dialects and exit'
'Print the list of registered passes and exit'
'Print the machine block frequency info.'
'Print the matched nodes.'
'Print the name of each compiled file'
'Print the normalized target triple'
'Print the output in json format'
'Print the output of crashing program'
'Print the output of the dependency directives source minimizer'
'Print the overhead of checks matching this glob'
'Print the path for the C++ Standard library module manifest'
'Print the paths used for finding ROCm installation'
'Print the paths used for finding libraries and programs'
'Print the pipeline that will be run'
'Print the registered targets'
'Print the resource directory pathname'
'Print the resource directory pathname that contains lib and include directories with the runtime libraries and MODULE files.'
'Print the resource pressure view (enabled by default)'
'Print the summary only.'
'Print the symbol being queried and all its relevant headers in\nJSON format to stdout:\n  {\n    "FilePath": "/path/to/foo.cc",\n    "QuerySymbolInfos": [\n       {"RawIdentifier": "foo",\n        "Range": {"Offset": 0, "Length": 3}}\n    ],\n    "HeaderInfos": [ {"Header": "\\"foo_a.h\\"",\n                      "QualifiedName": "a::foo"} ]\n  }'
'Print the timeline view'
'Print the tokenization of the file.'
'Print to stdout'
'Print type inference debug logs'
'Print unique SSA ID numbers for values, block arguments and naming conflicts across all regions'
'Print unique element ID'
'Print users of operation results and block arguments as a comment'
'Print version information'
'Print warnings as well as errors'
'Print with local scope and inline information (eliding aliases for attributes, types, and locations)'
'Printing a logical representation of low-level debug information.\n'
"Prints 'unknown' instructions that were handled heuristically. Use -msan-dump-strict-instructions to print instructions that could not be handled explicitly nor heuristically."
'Prints comments for instruction based on inline cost analysis'
'Prints debug information for the new pass manager'
'Prints full register names with percent'
'Prints full register names with vs{31-63} as v{0-31}'
'Prints the blame context (if possible) for ALL instructions. This specifies the number of lines of context for non-BAD instructions (see --blame-context). If --blame-context is unspecified, it prints this number of contextual lines for BAD instructions as well.'
'Prints the combined library module before the output'
'Prints the pass pipeline and returns.'
'Prioritize loop cache cost'
'Prioritize the IVs order of each instruction'
'Prioritize vectorization'
'Probability value in the range [0.0, 1.0] of unconditional pseudo-random checks.'
'Probability value in the range [0.0, 1.0] to keep instrumentation of a function. Note: instrumentation can be skipped randomly OR because of the hot percentile cutoff, if both are supplied.'
'Proceed with Loop Idiom Vectorize Pass, but do not convert byte-compare loop(s).'
'Proceed with loop idiom recognize pass, but do not convert loop(s) to memcpy.'
'Proceed with loop idiom recognize pass, but do not convert loop(s) to memset.'
'Proceed with loop idiom recognize pass, but do not convert loop(s) to strlen.'
'Proceed with loop idiom recognize pass, enable conversion of loop(s) to wcslen.'
'Process Id for the profiled executable binary.'
'Process Implicit Definitions'
'Process functions in a top-down order defined by the profiled call graph when -sample-profile-top-down-load is on.'
'Process scops that are unlikely to benefit from Polly optimizations.'
'Process source files in fixed form'
'Process source files in free form'
'Process trigraph sequences'
'Processor register names.'
'Produce a faster access sequence for local-dynamic TLS variables where the offset from the TLS base is encoded as an immediate operand (AIX 64-bit only). This access sequence is not used for variables larger than 32KB.'
'Produce a faster access sequence for local-exec TLS variables where the offset from the TLS base is encoded as an immediate operand (AIX 64-bit only). This access sequence is not used for variables larger than 32KB.'
'Produce gcov notes files (*.gcno)'
'Produce progress indicator when performing measurements'
'Produce relaxation hints for linkers to try optimizing PIC call sequences into direct calls (MIPS only)'
"Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26."
"Produced object files can use all ELF features supported by this binutils version and newer.If -no-integrated-as is specified, the generated assembly will consider GNU as support.'none' means that all ELF features can be used, regardless of binutils support"
'Produces individual indexes for distributed backends.'
'ProfGen Options'
"Profile action execution to a file, or stderr if  '-' is passed"
'Profile file loaded by -sample-profile'
'Profile kind supported by show:'
'Profile kind:'
'Profile remapping file loaded by -sample-profile'
'Profile summary info'
'Profile uses flow sensitive discriminators'
'Profile with nested inlinee flatten out'
'Prologue end.'
'Prologue/Epilogue Insertion'
'Prologue/Epilogue Insertion & Frame Finalization'
'Promote Memory to Register'
'Promote all vector constants'
'Propagate attributes in index'
'Propagate labels from condition values of select instructions to results.'
'Propagate non floating-point const stores as floating point values.For debugging purposes only'
'Provide additional constraints on the context parameters'
'Provide information about a particular module file'
'Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF'
'Provide the index produced by a ThinLink, required to perform the promotion and/or importing.'
'Prune dependences between unrelated Phi nodes.'
'Prune loop carried order dependences.'
'Put MODULE files in <dir>'
'Put crash-report files in <dir>'
'Put each data item in its own section'
'Put each function in its own section'
'Put global and static data smaller than the limit into a special section'
'Put objects of at most <size> bytes into small data section (MIPS / Hexagon)'
'Putting Jump Table in function section'
'Qualified name of the symbol being queried.'
'Qualified name to look up.'
'Queries LTOModule::hasCtorDtor() on each IR file'
'Query a given symbol (e.g. "a::b::foo") in\ndatabase directly without parsing the file.'
'Query string to be fuzzy-matched'
'Quotient that is obtained by dividing Nc, the parameter of themacro-kernel, by Nr, the parameter of the micro-kernel'
'R600 Clause Merge'
'R600 Control Flow Finalizer'
'R600 Emit Clause Markers'
'R600 Expand Special Instrs'
'R600 Packetizer'
'R600 Vector Reg Merger'
'R600ExpandSpecialInstrs'
"RISC-V 'interrupt' attribute '%0' requires extension '%1'"
"RISC-V 'interrupt' attribute contains invalid combination of interrupt types"
'RISC-V Assembly Printer'
'RISC-V CodeGenPrepare'
'RISC-V DAG->DAG Pattern Instruction Selection'
'RISC-V Dead register definitions'
'RISC-V Fold Masks'
'RISC-V Fold Memory Offset'
'RISC-V Indirect Branch Tracking'
'RISC-V Insert Read/Write CSR Pass'
'RISC-V Insert VSETVLI pass'
'RISC-V Insert Write VXRM Pass'
'RISC-V Landing Pad Setup'
'RISC-V Late Branch Optimisation Pass'
'RISC-V Load / Store Optimizer'
'RISC-V Make Compressible'
'RISC-V Merge Base Offset'
'RISC-V Optimize W Instructions'
'RISC-V Redundant Copy Elimination'
'RISC-V VL Optimizer'
'RISC-V VMV0 Elimination'
'RISC-V Zacas ABI fix'
'RISC-V Zcmp Push/Pop optimization pass'
'RISC-V Zcmp move merging pass'
'RISC-V atomic pseudo instruction expansion pass'
'RISC-V gather/scatter lowering pass'
'RISC-V post-regalloc pseudo instruction expansion pass'
'RISC-V pseudo instruction expansion pass'
"RISC-V type %0 requires the '%1' extension"
'ROCm device library path. Alternative to rocm-path.'
'ROCm installation path, used for finding and automatically linking required bitcode libraries.'
'ROPI is not compatible with c++'
'RTDyld Options'
'Random hotness seed to use (0 to generate new seed)'
'Range reduction is disabled for complex arithmetic operations'
'Range reduction is enabled for complex arithmetic operations.'
'Range to search for II'
'Ratio of VGPRs to budget for promoting alloca to vectors'
'Re-materialize load from stub in PIC mode'
'ReachingDefAnalysis'
'Read commands from file'
'Read function map names in indexed CodeGenData. Can be disabled to save memory and time for final consumption of the indexed CodeGenData in production.'
'Read specified document from input (default = 1)'
'Read summary from given YAML file before running pass'
'Read summary from given bitcode or YAML file before running pass'
'Read-write data relocatable, accessed relative to static base'
'Reads and parses a basic block sections profile.'
'Realign stack to the value of this flag (power of two)'
'Reassociate expressions'
'Rebalance address calculation trees to improve instruction selection'
'Rebalance address tree only if it is imbalanced'
'Rebalance address tree only if this allows optimizations'
'Reciprocal throughput'
'Recognize Hexagon-specific loop idioms'
'Recognize and construct Pascal-style string literals'
'Recognize reduction patterns.'
'Record GlobalISel rule coverage files of this prefix if instrumentation was generated'
'Record stack frames with tagged allocations in a thread-local ring buffer'
'Record time trace'
'Recursively extract all called functions'
'Redirect output to the specified file.'
'Reduce named metadata without taking its type into account'
'Reduce terminal output'
'Reduce the number of instrumented blocks'
'Reduced priority compared to interactive work.'
'Refactoring options'
'Reference type.'
'Refrain from using FP whenever possible'
'Regalloc eviction policy'
'Regalloc priority policy'
'Regard unreachable functions as possible devirtualize targets.'
"Regex of name of op's to exclude (no filter if empty)"
"Regex of name of op's to include (no filter if empty)"
'Register Allocation Scoring Pass'
'Register Coalescer'
'Register Usage Information Collector'
'Register Usage Information Propagation'
'Register Usage Information Storage'
'Register allocator to use'
'Register allocator to use for RVV register.'
'Register allocator to use for SGPRs'
'Register allocator to use for VGPRs'
'Register allocator to use for WWM registers'
'Register allocator to use for new pass manager'
'Reject specializations whose codesize savings are less than this much percent of the original function size'
'Reject specializations whose inlining bonus is less than this much percent of the original function size'
'Reject specializations whose latency savings are less than this much percent of the original function size'
'Reject the profile if the mismatch percent is higher than the given number.'
'Relation kind for the predicate.'
'Relative error tolerated'
'Relative frequency of outline region to the entry block'
'Relative hotness percentage threshold for indirect call promotion in proirity-based sample profile loader inlining.'
'Relax checks of new-value validity'
"Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions"
'Relax occupancy targets for kernels which are memory bound (amdgpu-membound-threshold), or Wave Limited (amdgpu-limit-wave-threshold).'
'Relax out of range conditional branches'
'Relocatable external references, non-relocatable code'
'Remapping file'
'Remark file utilities\n'
'Remote execution (rsh/ssh) extra options'
'Remote execution (rsh/ssh) host'
'Remote execution (rsh/ssh) port'
'Remote execution (rsh/ssh) user id'
'Remote execution client (rsh/ssh)'
'Remove .symtab section'
"Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value."
'Remove Loads Into Fake Uses'
'Remove Redundant DEBUG_VALUE analysis'
'Remove Sign and Zero Extends for Args'
"Remove an attribute from a function. This can be a pair of 'function-name:attribute-name' to remove an attribute from a specific function. For example -force-remove-attribute=foo:noinline. Specifying only an attribute will remove the attribute from all functions in the module. This option can be specified multiple times."
'Remove dead machine instructions'
'Remove duplicate DecoderTable entries generated due to HwModes'
'Remove pseudo-probe after sample profile annotation.'
'Remove redundant Address-Size override prefix'
'Remove redundant instructions'
'Remove the change description files regardless of successful\nmerging/replacing.'
'Remove unreachable blocks from the CFG'
'Remove unreachable machine basic blocks'
'Removes debug compile units which reference to non-existing global constants'
'Removes empty basic blocks and redirects their uses to their fallthrough blocks.'
'Removes irreducible control flow'
'Removes range checks and sets br_table default targets'
'Rename Independent Subregisters'
'Rename Register Operands'
'Rename Register Operands Canonically'
'Rename counter variable of a comdat function based on cfg hash'
'Reorder instructions to use the WebAssembly value stack'
'Reorders blocks in topological order'
'Repack arrays that are non-contiguous in any dimension. If set to false, only the arrays non-contiguous in the leading dimension will be repacked'
'Repeat compilation N times for timing'
"Replace 'mul x, Const' with more effective instructions like SHIFT, LEA, etc."
'Replace ARM non-local ADR instructions with ADRP'
'Replace PHIs by their incoming values'
'Replace all memory allocation / deallocation calls with hipManagedMalloc / hipFree equivalents'
'Replace intrinsics with calls to vector library'
'Replace narrow shifts with wider shifts.'
'Replace occurrences of __nvvm_reflect() calls with 0/1'
'Replace physical registers with virtual registers'
'Replace pointer out arguments with struct returns for non-private address space'
'Replace returns with jumps to ``__x86_return_thunk`` (x86 only, error otherwise)'
'Replace string for rename'
'Replace target triples in input files with this triple'
'Replace the contents of the <from> file with the contents of the <to> file'
'Replace unspecified target triples in input files with this triple'
'Replacement Options'
'Replay on functions that have remarks associated with them (default)'
'Replay on the entire module'
'Replay previous inlining and adjust context profile accordingly'
'Report Options'
'Report host JIT support'
'Report missed transformations by optimization passes whose name matches the given POSIX regular expression'
'Report top stacks within each thread id'
'Report top/bottom cycles when dumping SUnit instances'
'Report total allocation sizes of hinted allocations'
'Report transformation analysis from optimization passes whose name matches the given POSIX regular expression'
'Report transformations performed by optimization passes whose name matches the given POSIX regular expression'
'Reports layout used for print, compare and select.'
'Require & in extract patterns'
'Require all positive matches to cover an entire input line.\nAllows leading and trailing whitespace if --strict-whitespace\nis not also passed.'
'Require declaration of modules used within a module'
'Require math functions to indicate errors by setting errno'
'Require member pointer base types to be complete if they would be significant under the Microsoft ABI'
'Require target function definition when promoting indirect calls'
'Reserve application registers (%g2-%g4)'
"Reserve physical registers, so they can't be used by register allocator. Should only be used for testing register allocator."
'Reserve register r19 (Hexagon only)'
'Reserve the G1 register (SPARC only)'
'Reserve the G2 register (SPARC only)'
'Reserve the G3 register (SPARC only)'
'Reserve the G4 register (SPARC only)'
'Reserve the G5 register (SPARC only)'
'Reserve the G6 register (SPARC only)'
'Reserve the G7 register (SPARC only)'
'Reserve the I0 register (SPARC only)'
'Reserve the I1 register (SPARC only)'
'Reserve the I2 register (SPARC only)'
'Reserve the I3 register (SPARC only)'
'Reserve the I4 register (SPARC only)'
'Reserve the I5 register (SPARC only)'
'Reserve the L0 register (SPARC only)'
'Reserve the L1 register (SPARC only)'
'Reserve the L2 register (SPARC only)'
'Reserve the L3 register (SPARC only)'
'Reserve the L4 register (SPARC only)'
'Reserve the L5 register (SPARC only)'
'Reserve the L6 register (SPARC only)'
'Reserve the L7 register (SPARC only)'
'Reserve the O0 register (SPARC only)'
'Reserve the O1 register (SPARC only)'
'Reserve the O2 register (SPARC only)'
'Reserve the O3 register (SPARC only)'
'Reserve the O4 register (SPARC only)'
'Reserve the O5 register (SPARC only)'
'Reserve the a0 register (M68k only)'
'Reserve the a1 register (M68k only)'
'Reserve the a2 register (M68k only)'
'Reserve the a3 register (M68k only)'
'Reserve the a4 register (M68k only)'
'Reserve the a5 register (M68k only)'
'Reserve the a6 register (M68k only)'
'Reserve the d0 register (M68k only)'
'Reserve the d1 register (M68k only)'
'Reserve the d2 register (M68k only)'
'Reserve the d3 register (M68k only)'
'Reserve the d4 register (M68k only)'
'Reserve the d5 register (M68k only)'
'Reserve the d6 register (M68k only)'
'Reserve the d7 register (M68k only)'
'Reserve the r9 register (ARM only)'
'Reserve the x1 register (AArch64/RISC-V only)'
'Reserve the x10 register (AArch64/RISC-V only)'
'Reserve the x11 register (AArch64/RISC-V only)'
'Reserve the x12 register (AArch64/RISC-V only)'
'Reserve the x13 register (AArch64/RISC-V only)'
'Reserve the x14 register (AArch64/RISC-V only)'
'Reserve the x15 register (AArch64/RISC-V only)'
'Reserve the x16 register (AArch64/RISC-V only)'
'Reserve the x17 register (AArch64/RISC-V only)'
'Reserve the x18 register (AArch64/RISC-V only)'
'Reserve the x19 register (AArch64/RISC-V only)'
'Reserve the x2 register (AArch64/RISC-V only)'
'Reserve the x20 register (AArch64/RISC-V only)'
'Reserve the x21 register (AArch64/RISC-V only)'
'Reserve the x22 register (AArch64/RISC-V only)'
'Reserve the x23 register (AArch64/RISC-V only)'
'Reserve the x24 register (AArch64/RISC-V only)'
'Reserve the x25 register (AArch64/RISC-V only)'
'Reserve the x26 register (AArch64/RISC-V only)'
'Reserve the x27 register (AArch64/RISC-V only)'
'Reserve the x28 register (AArch64/RISC-V only)'
'Reserve the x29 register (AArch64/RISC-V only)'
'Reserve the x3 register (AArch64/RISC-V only)'
'Reserve the x30 register (AArch64/RISC-V only)'
'Reserve the x31 register (AArch64/RISC-V only)'
'Reserve the x4 register (AArch64/RISC-V only)'
'Reserve the x5 register (AArch64/RISC-V only)'
'Reserve the x6 register (AArch64/RISC-V only)'
'Reserve the x7 register (AArch64/RISC-V only)'
'Reserve the x8 register (AArch64/RISC-V only)'
'Reserve the x9 register (AArch64/RISC-V only)'
'Reset machine function if ISel failed'
'Resolution-based LTO test harness'
'Resolve file paths relative to the specified directory'
'Restore original linkage of globals prior to CodeGen'
'Restore the default behavior of not embedding source text in DWARF debug sections'
'Restore the default behaviour of not generating long calls'
'Restrict DWARF features to those defined in the specified version, avoiding features from later versions.'
'Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path'
'Restrict code to those available for App Extensions'
'Restrict range of B instructions (DEBUG)'
'Restrict range of BPcc/FBPfcc instructions (DEBUG)'
'Restrict range of BPr instructions (DEBUG)'
'Restrict range of Bcc instructions (DEBUG)'
'Restrict range of CB instructions (DEBUG)'
'Restrict range of CB[N]Z instructions (DEBUG)'
'Restrict range of TB[N]Z instructions (DEBUG)'
'Restrict range of branch instructions (DEBUG)'
'Restrict range of loopN instructions (testing only)'
'Restrict remat for statepoint operands'
'Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones'
'Restrict specifier.'
'Restrict to vendor:'
'Resume compilation after a specific pass'
'Resume compilation before a specific pass'
'Retain macro definitions in /E mode'
'Return all structs in memory (PPC32 only)'
'Return small structs in registers (PPC32 only)'
'Reverse allocation order of local live ranges, such that shorter local live ranges will tend to be allocated first'
'Rewrite Legacy Objective-C source to C++'
'Rewrite Objective-C source to C++'
'Rewrite Partial Register Uses'
'Rewrite unaligned loads as a pair of aligned loads'
'Rewrite undef for PHI'
'Rewriter playground'
'Rewriter to run'
'Right before the vectorizer'
'Root for relative input paths'
'Root.'
"Roughly estimate the number of cycles that 'long latency' instructions take for targets with no itinerary"
'Round section sizes up to the section alignment'
'Round-trip the IR after parsing and ensure it succeeds'
'Run GCN iterative scheduler for ILP scheduling (experimental)'
'Run GCN iterative scheduler for minimal register usage (experimental)'
'Run GCN scheduler to maximize ilp'
'Run GCN scheduler to maximize memory clause'
'Run GCN scheduler to maximize occupancy'
'Run GCN scheduler to maximize occupancy (experimental)'
"Run Hexagon's custom scheduler"
'Run MachineScheduler post regalloc (independent of preRA sched)'
'Run PGO context sensitive IR instrumentation'
'Run Partial inlining pass'
'Run PowerPC PostRA specific scheduler'
'Run PowerPC PreRA specific scheduler'
"Run R600's custom scheduler"
"Run SI's custom scheduler"
'Run SimplifyCFG after expanding atomic operations to make use of cmpxchg flow-based information'
'Run a global pre-inliner to merge context profile based on estimated global top-down inline decisions'
'Run a quick verification useful for regression testing'
'Run all passes twice, re-using the same pass manager (legacy PM only).'
'Run amdgpu-regbankselect and amdgpu-regbanklegalize instead of regbankselect'
'Run an early inliner pass before Polly'
'Run analysis on specific function (for C++ include parameters in name)'
'Run asan instrumentation on LDS instructions lowered to global memory'
'Run cc1 in-process'
'Run cleanup optimization passes after vectorization'
'Run code-completion at each point (slow)'
'Run compiler only for specified passes (comma separated list)'
'Run early if-conversion'
'Run everything twice, re-using the same pass manager and verify the result is the same.'
'Run in quiet mode'
'Run indirect-call promotion for call instructions only'
'Run indirect-call promotion for invoke instruction only'
'Run indirect-call promotion in LTO mode'
'Run indirect-call promotion in SamplePGO mode'
'Run instrumented parse and dump the parsing log'
'Run live interval analysis earlier in the pipeline'
'Run loop-rotation in the prepare-for-lto stage. This option should be used for testing only.'
'Run many different optimization sequences on program to find bugs'
'Run on all functions guaranteed to be beneficial'
'Run only CodeGen passes and translate FIR to LLVM IR'
'Run opt passes and codegen at O0'
'Run opt passes and codegen at O1'
'Run opt passes and codegen at O2'
'Run opt passes and codegen at O3'
'Run optimizations through valgrind'
'Run pre-RA exec mask optimizations'
'Run pre-emit peephole optimizations.'
'Run preprocessor, dump internal rep of tokens'
'Run program Just-In-Time'
'Run static analysis engine'
'Run the Fast mode (default mapping)'
'Run the InputOuputTest action. Use for development and testing only.'
'Run the LLVM verifier after every LLVM pass'
'Run the Loop vectorization passes'
'Run the NewGVN pass'
'Run the SLP vectorization passes'
'Run the dead code elimination'
'Run the loop rotation transformation after PGO instrumentation'
'Run the pipeline stored in the reproducer'
'Run the preprocessor, parser and semantic analysis stages'
'Run the static analyzer'
"Run the vectorizer only on file paths that match any in the list of comma-separated regex's."
'Run the verifier after each transformation pass'
'Runs certain features (e.g. hover) at each point in the file. Somewhat slow.'
'Runtime determined (OMP_SCHEDULE)'
'RuntimeDyld'
'Rvalue reference.'
'SCE targets (e.g. PS4)'
"SDK does not contain 'libarclite' at the path '%0'; try increasing the minimum deployment target"
"SDK settings were ignored as 'SDKSettings.json' could not be parsed"
"SEH '__try' is not supported on this target"
'SI Fix SGPR copies'
'SI Fix VGPR copies'
'SI Fold Operands'
'SI Form memory clauses'
'SI Insert Hard Clauses'
'SI Insert Waitcnts'
'SI Load Store Optimizer'
'SI Lower WWM Copies'
'SI Lower i1 Copies'
'SI Memory Legalizer'
'SI Optimize VGPR LiveRange'
'SI Peephole SDWA'
'SI Pre-allocate WWM Registers'
'SI Shrink Instructions'
'SI Whole Quad Mode'
'SI insert s_cbranch_execz instructions'
'SI lower SGPR spill instructions'
'SI lower control flow'
'SI optimize exec mask operations'
'SI optimize exec mask operations pre-RA'
'SI peephole optimizations'
'SI post-RA bundler'
'SIMD Library for Evaluating Elementary Functions'
'SME Peephole Optimization'
'SOURCEFILE'
'SPARC DAG->DAG Pattern Instruction Selection'
'SPIR-V Regularizer'
'SPIR-V Shader capability'
'SPIR-V Translator compatibility mode'
'SPIR-V capabilities to avoid if there are other options enabling a feature'
'SPIRV Assembly Printer'
'SPIRV NonSemantic.Shader.DebugInfo.100 emitter'
'SPIRV convergence regions analysis'
'SPIRV emit intrinsics'
'SPIRV legalize bitcast pass'
'SPIRV module analysis'
'SPIRV post legalizer'
'SPIRV pre legalizer'
'SPIRV prepare functions'
'SPIRV split region exit blocks'
'SPIRV strip convergent intrinsics'
'STOKE pass options'
"SUBCOMMAND '"
'SUBCOMMANDS:\n\n'
'SVE vector type %0 cannot be used in a non-streaming function'
'SVE vector type %0 cannot be used in a target without sve'
'SYCL host compilation'
'SYCL language standard to compile for.'
'Safe Stack instrumentation pass'
'Safepoint IR Verifier'
'Salvage stale MemProf profile'
'Salvage stale profile by fuzzy matching and use the remapped location for sample profile query.'
'Salvage unused profile by matching with new functions on call graph.'
'Same as "/diasdkdir <dir>/DIA SDK" /vctoolsdir <dir>/VC/Tools/MSVC/<vctoolsversion> "/winsdkdir <dir>/Windows Kits/10"'
'Same as /Ob2'
'Same as prepare-and-assemble-snippet, but also creates the full sequence that can be dumped to a file using --dump-object-to-disk'
'Same as prepare-measured-code, but also runs the measurement (default)'
'Same as prepare-snippet, but also dumps an excerpt of the sequence (hex encoded)'
'Same priority as other clangd work.'
'Sample profile'
'Sanitize loads from memory.'
'Sanitize loads from memory. When disable, no significant security is provided.'
'Sanitizer Coverage. 0: none, 1: entry block, 2: all blocks, 3: all blocks and critical edges'
'Sanitizer Statistics Processing Tool'
'Sanitizer coverage type'
'Save ThinLTO generated object files using filenames created in the given directory.'
'Save ThinLTO temp files using filenames created by adding suffixes to the given file path prefix.'
'Save arguments passed by registers to ABI-defined stack positions'
"Save intermediate compilation results. <arg> can be set to 'cwd' for current working directory, or 'obj' which will save temporary files in the same directory as the final output file"
'Save intermediate module file results when compiling a standard C++ module unit.'
'Save llvm statistics.'
'Save selected temporary files. Cannot be specified together with -save-temps'
'Save statistics to the specified file'
'Save subprocess statistics to the given file'
'Save temp files'
'Save temporary files'
"Save temporary labels in the symbol table. Note this may change .s semantics and shouldn't generally be used on compiler-generated code."
'Save the IR before running optimizations'
'Save the device memory output of the replayed kernel execution.'
'Scalable vectorization is available and favored when the cost is inconclusive.'
'Scalable vectorization is disabled.'
'Scalar Evolution Analysis'
'Scalar Replacement Of Aggregates'
'Scalar independence heuristic'
'ScalarEvolution-based Alias Analysis'
'Scalarize unsupported masked memory intrinsics'
'Scalarize vector operations'
'Scale the memop size counts using the basic  block count value'
'Scale to limit the cost of inline deferral'
'Scavenge virtual registers inside basic blocks'
'Schedule VSX FMA instruction mutation early'
'Schedule bottom-up for max ILP'
'Schedule bottom-up for min ILP'
'Scheduling type of parallel OpenMP for loops'
'Scope contributions to the debug information.'
'Scope kind to use when printing scopes.'
'Scope of graph to export to dot'
'Scoped NoAlias Alias Analysis'
'Scopes.'
'Search $prefix$file for executables, libraries, and data files. If $prefix is a directory, search $prefix/$file'
'Search elements matching the given pattern.'
'Search even non-imported modules to resolve references'
'Search for the GCC installation with the specified triple.'
'Section-specific Dump Options'
'Seed for the random number generator'
'Seed used for randomness'
'Select DPP or Iterative strategy for scan'
'Select Options'
'Select Windows run-time library'
'Select custom AMDGPU scheduling strategy.'
'Select label scheme for branch control-flow architecture protection'
"Select math operations' runtime behavior:"
'Select return address signing scope'
'Select straight-line speculation hardening scope (ARM/AArch64/X86 only). <arg> must be: all, none, retbr(ARM/AArch64), blr(ARM/AArch64), comdat(ARM/AArch64), nocomdat(ARM/AArch64), return(X86), indirect-jmp(X86)'
'Select target instructions out of generic instructions'
'Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.'
"Select the SIMD extension(s) to be enabled in LoongArch either 'none', 'lsx', 'lasx'."
'Select the asm variant (integer) to use for output (3: unspecified)'
'Select the assembly style for input'
"Select the container format for clang modules and PCH. Supported options are 'raw' and 'obj'."
'Select the frame chain model used to emit frame records (Arm only).'
'Select the kind of output desired'
'Select the mode of detecting stack use-after-return in AddressSanitizer'
'Select the scheduling optimizer'
'Select the vectorization strategy'
'Select tutorial version'
'Select underlying type for wchar_t'
"Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'.  'function' includes both 'function-entry' and 'function-exit'."
'Select which denormal numbers the code is permitted to require'
'Select which denormal numbers the code is permitted to require for float'
'Selected elements are displayed in a tabular format.'
'Selected elements are displayed in a tree view (Include children)'
'Selected elements are displayed in a tree view. (Include parents)'
'Selects the execution mode to use for running snippets'
'Serialize compiler diagnostics to a file'
'Set CPU for optimization without affecting instruction set'
'Set DWARF fission mode'
'Set EABI type (default depends on triple):'
'Set EABI type. Default depends on triple)'
'Set Fuchsia API level'
'Set Hexagon Vector Length'
'Set LTO mode'
'Set LTO mode for offload compilation'
'Set OpenMP version (e.g. 45 for OpenMP 4.5, 51 for OpenMP 5.1). Default value is 31 for Flang'
'Set OpenMP version (e.g. 45 for OpenMP 4.5, 51 for OpenMP 5.1). Default value is 51 for Clang'
'Set ThinLTO cache entry expiration time.'
'Set ThinLTO cache pruning directory maximum number of files.'
'Set ThinLTO cache pruning directory maximum size in bytes.'
'Set ThinLTO cache pruning interval.'
'Set __cdecl as a default calling convention'
'Set __fastcall as a default calling convention'
'Set __regcall as a default calling convention'
'Set __regcall4 as a default calling convention to respect __regcall ABI v.4'
'Set __stdcall as a default calling convention'
'Set __vectorcall as a default calling convention'
'Set architecture for code generation'
'Set assembly output file name (with /FA)'
'Set build target to arm64ec'
'Set default AMDHSA Code Object Version (module flag or asm directive still take priority if present)'
"Set default MTE mode to 'sync' (default) or 'async'"
'Set default calling convention'
'Set default maximum struct packing alignment'
'Set default maximum struct packing alignment to 1'
'Set directory to SYSTEM include search path with prefix'
'Set directory to include search path with prefix'
'Set endian conversion of data for unformatted files'
'Set exception handling model'
'Set filename used to determine the language and to find\n.clang-format file.\nOnly used when reading from stdin.\nIf this is not passed, the .clang-format file is searched\nrelative to the current working directory when reading stdin.\nUnrecognized filenames are treated as C++.\nsupported:\n  CSharp: .cs\n  Java: .java\n  JavaScript: .js .mjs .cjs .ts\n  Json: .json .ipynb\n  Objective-C: .m .mm\n  Proto: .proto .protodevel\n  TableGen: .td\n  TextProto: .txtpb .textpb .pb.txt .textproto .asciipb\n  Verilog: .sv .svh .v .vh'
'Set hexagon hvx loop upper bound align limit'
'Set hexagon loop align bundle limit'
'Set hexagon loop align edge threshold'
'Set hexagon loop lower bound align limit'
'Set hexagon loop upper bound align limit'
'Set hexagon tiny-core loop align bundle limit'
'Set hexagon tiny-core loop upper bound align limit'
'Set how to use window scheduling algorithm.'
'Set iOS deployment target'
'Set inclusive limit count of TLS local-dynamic access(es) in a function to use initial-exec'
'Set language version (c++14,c++17,c++20,c++23preview,c++latest,c11,c17)'
'Set lazy loading to pretend to import a module'
'Set level of crash diagnostic reporting, (option: off, compiler, all)'
'Set macOS deployment target'
'Set max number of processed functions per pass.'
'Set maximum number of loads used in expanded memcmp'
'Set maximum number of loads used in expanded memcmp for -Os/Oz'
'Set maximum offset for global merge pass'
'Set maximum runtime in seconds. Defaults to infinite.'
'Set maximum size of jump tables.'
'Set minimum jump tables'
'Set minimum mem intrinsic size to expand in IR'
'Set minimum number of entries to use a jump table on AArch64'
'Set minimum number of entries to use a jump table on PPC'
'Set minimum number of entries to use a jump table on RISCV'
'Set minimum number of entries to use a jump table.'
"Set multiple /O flags at once; e.g. '/O2y-' for '/O2 /Oy-'"
'Set output executable file name'
'Set output object file (with /c)'
'Set page size for slab (requires -slab-allocate and -noexec)'
'Set pch file name (with /Yc and /Yu)'
'Set preprocess output file name (with /P)'
'Set project title for the coverage report'
'Set runtime encoding, supports only UTF-8'
'Set slab target address (requires -slab-allocate and -noexec)'
'Set source and runtime encoding to UTF-8 (default)'
'Set source encoding, supports only UTF-8'
'Set stack probe size (default 4096)'
'Set tab expansion size for html coverage reports (default = 2)'
'Set target profile'
'Set the -iwithprefix/-iwithprefixbefore prefix'
'Set the Data Stream Control Register.'
'Set the case probability threshold for peeling the case from a switch statement. A value greater than 100 will void this optimization'
'Set the count value cutoff. Functions with the maximum count less than this value will not be printed out. (Default is 0)'
'Set the default double precision kind to an 8 byte wide type'
'Set the default integer and logical kind to an 8 byte wide type'
'Set the default most-general representation to multiple inheritance'
'Set the default most-general representation to single inheritance'
'Set the default most-general representation to virtual inheritance'
'Set the default real kind to an 8 byte wide type'
'Set the default structure layout to be compatible with the Microsoft compiler standard'
'Set the default symbol visibility for all global definitions'
'Set the deployment target to be the specified OS and OS version'
'Set the device id.'
"Set the driver mode to either 'gcc', 'g++', 'cpp', 'cl' or 'flang'"
'Set the kind of module destructors emitted by AddressSanitizer instrumentation. These destructors are emitted to unregister instrumented global variables when code is unloaded (e.g. via `dlclose()`).'
'Set the loop counter bitwidth'
'Set the loop decrement value'
'Set the lower bound of a trip count to decide on vectorization while tail-folding.'
'Set the max unroll count for full unrolling, for testing purposes'
'Set the max unroll count for partial and runtime unrolling, fortesting purposes'
'Set the maximum bitwidth for _BitInt (this option is expected to be removed in the future)'
'Set the maximum depth of recursive constexpr function calls'
'Set the maximum depth of recursive template instantiation'
'Set the maximum number of clang-format errors to emit\nbefore stopping (0 = no limit).\nUsed only with --dry-run or -n'
'Set the maximum number of entries to print in a constexpr evaluation backtrace (0 = no limit)'
'Set the maximum number of entries to print in a macro expansion backtrace (0 = no limit)'
'Set the maximum number of entries to print in a template instantiation backtrace (0 = no limit)'
'Set the maximum number of errors to emit before stopping (0 = no limit).'
'Set the maximum number of outgoing blocks for using a boolean value to record the exiting block in the ControlFlowHub.'
'Set the maximum number of source lines to show in a caret diagnostic (0 = no limit).'
'Set the maximum number of steps in constexpr function evaluation'
'Set the maximum number of times to perform spell checking on unrecognized identifiers (0 = no limit)'
'Set the maximum path length when checking whether a basic block is followed by a block that either has a terminating deoptimizing call or is terminated with an unreachable'
'Set the minimum number of repetitions of a divisor to allow transformation to multiplications by the reciprocal'
'Set the mode for address space map based mangling; OpenCL testing purposes only'
'Set the number of scavenger slots'
'Set the number of teams.'
'Set the number of threads.'
'Set the out-of-process executor'
'Set the output <file> for debug infos'
'Set the p2align operands for WebAssembly loads and stores'
'Set the parallelization strategy'
"Set the profile instrumentation burst duration, which can range from 1 to the value of 'sampled-instr-period' (0 is invalid). This number of samples will be recorded for each 'sampled-instr-period' count update. Setting to 1 enables simple sampling, in which case it is recommended to set 'sampled-instr-period' to a prime number."
"Set the profile instrumentation sample period. A sample period of 0 is invalid. For each sample period, a fixed number of consecutive samples will be recorded. The number is controlled by 'sampled-instr-burst-duration' flag. The default sample period of 65536 is optimized for generating efficient code that leverages unsigned short integer wrapping in overflow, but this is disabled under simple sampling (burst duration = 1)."
"Set the rsp quoting to either 'posix', or 'windows'"
'Set the stack alignment'
'Set the stack probe size'
'Set the system root directory (usually /)'
'Set the tab stop distance.'
'Set the target triple'
'Set the threshold for pgo-verify-bfi:  only print out mismatched BFI if the difference percentage is greater than this value (in percentage).'
'Set the threshold for pgo-verify-bfi: skip the counts whose profile count value is below.'
'Set the unroll peeling count, for testing purposes'
'Set the z/OS release of the runtime environment'
'Set up preprocessor for static analyzer (done automatically when static analyzer is run).'
'Set update method of profile counters'
'Set upper limit for the number of transformations performed during a single round of hoisting the reassociated expressions.'
'Set wave priority'
'Set width of the columns showing resource booking.'
'Set width of the columns with the resources and schedule units'
'Sets the ASan constructor kind'
'Sets the ASan destructor kind. The default is to use the value provided to the pass constructor'
'Sets the IEEE bit in the expected default floating point  mode register. Floating point opcodes that support exception flag gathering quiet and propagate signaling NaN inputs per IEEE 754-2008. This option changes the ABI. (AMDGPU only)'
'Sets the SIMD width. Zero is autoselect.'
'Sets the bias which adds weight to occupancy vs latency. Set it to 100 to chase the occupancy only.'
'Sets the cost threshold for when multiple conditionals will be merged into one branch versus be split in multiple branches. Merging conditionals saves branches at the cost of additional instructions. This value sets the instruction cost limit, below which conditionals will be merged, and above which conditionals will be split. Set to -1 to never merge branches.'
'Sets the default matrix layout'
'Sets the maximum allowed output size (0 means no limit) [ELF only]'
'Sets the minimum function size to instrument with XRay'
'Sets the mode of detection for stack-use-after-return.'
'Sets the preferable loop alignment for experiments (as log2 bytes) for innermost loops only. If specified, this option overrides alignment set by x86-experimental-pref-loop-alignment.'
'Sets the vectorization interleave count. Zero is autoselect.'
'Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)'
'Shadow Stack GC Lowering'
'Should __STATIC__ be defined'
'Should a closed world be assumed, or not. Default if not set.'
'Should enable CSE in Legalizer'
'Should enable CSE in irtranslator'
'Should mir-strip-debug only strip debug info from debugified modules by default'
'Should we attempt to sink negations?'
'Show FailedToMaterialize errors'
'Show MCDC statistics in summary table'
'Show True/False counts'
'Show True/False percent'
'Show binary counters (1/0) in lines and branches instead of integer execution counts'
'Show binary ids in the profile. '
'Show bindings of tools to actions'
'Show branch condition statistics in summary table'
'Show call-multigraph (do not remove parallel edges)'
'Show code coverage only for functions listed in the given file'
'Show code coverage only for functions that match the given regular expression'
'Show code coverage only for functions with line coverage greater than the given threshold'
'Show code coverage only for functions with line coverage less than the given threshold'
'Show code coverage only for functions with region coverage greater than the given threshold'
'Show code coverage only for functions with region coverage less than the given threshold'
'Show code coverage only for functions with the given name'
'Show commands to run and use verbose output'
'Show context sensitive counts'
'Show counter values for shown functions'
'Show coverage for branch conditions'
'Show coverage for each function'
'Show coverage summaries for each function'
'Show created time for each page.'
'Show detailed profile summary'
'Show detailed warning message.'
'Show details of invoking getNextResoufceCycle.'
'Show directory coverage'
'Show edges labeled with weights'
'Show encoding in .s output'
'Show expanded source regions'
'Show function instantiations'
'Show header includes and nesting depth'
'Show heat colors in CFG'
'Show heat colors in call-graph'
'Show indirect call site target values for shown functions'
'Show instantiation statistics in summary table'
'Show instr profile data in text dump format'
'Show instruction encoding information in transliterate mode'
'Show instruction encodings'
'Show instructions operands as parsed'
'Show internal debug dump'
'Show internal instruction representation'
'Show internal instruction representation in transliterate mode'
'Show lexical and class parents'
'Show line numbers in diagnostic code snippets'
'Show only simple regions in the graphviz viewer'
'Show only the configs matching this regex'
'Show only the functions that have been executed.'
'Show profile summary of a list of hot functions'
'Show profile symbol list if it exists in the profile. '
'Show profile version. '
'Show region statistics in summary table'
'Show sample profile data in the JSON format (deprecated, please use --show-format=json)'
'Show skipped includes in -H output.'
'Show temporal profile traces in the profile.'
'Show the MCDC Coverage for each applicable boolean expression'
'Show the Polly CFG right after code generation'
'Show the collected coverage object files'
'Show the collected paths to source files'
'Show the execution counts for each line'
'Show the execution counts for each line, or the execution counts for each region on lines that have multiple regions'
'Show the execution counts for each region'
'Show the information of each section in the sample profile. The flag is only usable when the sample profile is in extbinary format'
'Show the list of functions with the largest internal counts'
'Show the profiled sizes of the memory intrinsic calls for shown functions'
'Show the sizes of all debug sections, expressed in bytes.'
'Show the sources across all compilation units.'
'Show times for llvm-jitlink phases'
'Show times for llvm-rtdyld phases'
'Show verbose output when opt-bisect-limit is set'
'Show vtable names for shown functions'
'Shrink Wrap Pass'
'Shuffle machine instructions alternating directions'
'Silence ObjC rewriting warnings'
'Similar completion items (e.g. function overloads) are combined. Type information shown where possible'
'Similar to -ftime-trace. Specify the JSON file or a directory which will contain the JSON file'
'Similar to data-and-control, but remove the runtime check'
'Similar to list-burr but schedules in source order when possible'
'Simple speculation'
'Simplify DDG by merging nodes that have less interesting edges.'
'Simplify SCoP after optimizations'
'Simplify the CFG'
'Simplify the CFG after atomic expansion pass'
'Simply drop type test sequences'
'Simulate installation in the given directory'
'Single thread model'
'Sink common instructions (default = false)'
'Sink common instructions down to the end block'
'Sink instructions into cycles to avoid register spills'
'Size limit for the MII.'
'Size limit in Hexagon early if-conversion'
'Size of the expression which is considered huge'
'Size of the load queue'
'Size of the store queue'
'Size-specialize memcmp and bcmp calls'
'SjLj exception handling'
'Skip 64-bit divide for dynamic 32-bit values'
'Skip Callsite up to this number for this compilation'
'Skip Cost Analysis'
'Skip ODR checks for decls in the global module fragment.'
'Skip checks for relocated modules when loading PCM files'
"Skip emitting basic block entries in the SHT_LLVM_BB_ADDR_MAP section. It's used to save binary size when BB entries are unnecessary for some PGOAnalysisMap features."
'Skip function bodies when possible'
'Skip instructions on input which lack scheduling information'
'Skip instructions or lines on input which are unsupported for any reason'
'Skip lines on the input which fail to parse for any reason'
'Skip merging empty blocks if (frequency of empty block) / (frequency of destination block) is greater than this ratio'
'Skip merging functions with no parameters.'
'Skip op verification when using custom printers'
'Skip pass list reduction steps'
'Skip printing info about analyses'
'Skip regions when printing ops.'
'Skip relative hotness check for ICP up to given number of targets.'
'Skip setting up RAX register when passing variable arguments (x86 only)'
'Skip source code files with file paths that match the given regular expression'
'Skip the check if the number of hot functions is smaller than the specified number.'
'Skip the dependency check for pragma-based transformations'
'Slot index numbering'
'Small code model'
'Small data and bss section threshold size (default=0)'
'Small data and bss section threshold size (default=8)'
'Soft float ABI (implied by -soft-float)'
'Sort by element kind.'
'Sort by element line number.'
'Sort by element name.'
'Sort by element offset.'
'Sort classes by amount of immediate padding'
'Sort classes by amount of padding'
'Sort classes by name'
'Sort classes by percentage of space consumed by immediate padding'
'Sort classes by percentage of space consumed by padding'
'Sort classes by size'
'Sort profiled recursion by edge weights.'
'Sort symbols by name'
'Sort symbols by size'
'Sort the resources printed in the dump trace'
'Source Code Analysis - Dead Symbol Removal Frequency'
'Source Code Analysis - Output Options'
'Source Code Analysis - Symbolic Constraint Engines'
'Source language name.'
'Source prefix to elide'
"Source-level compatibility for Altivec vectors (for PowerPC targets). This includes results of vector comparison (scalar for 'xl', vector for 'gcc') as well as behavior when initializing with a scalar (splatting for 'xl', element zero only for 'gcc'). For 'mixed', the compatibility is as 'gcc' for 'vector bool/vector pixel' and as 'xl' for other types. Current default is 'mixed'."
'SourceLocation in file %0 at offset %1 is invalid'
'Sparc Assembly Printer'
'Spawn a separate process for each cc1'
'Spawns a subprocess for each snippet execution, allows for the use of memory annotations'
'Specifies PowerPC native vector element order (default)'
'Specifies PowerPC non-native vector element order'
'Specifies a list of variables to be exempt from the TOC data transformation.'
'Specifies a list of variables to which the TOC data transformation will be applied.'
"Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions."
'Specifies that the sample profile is accurate'
'Specifies the JITDylib to be used for any subsequent -extra-module arguments.'
'Specifies the JITDylib to be used for any subsequent input file, -L<seacrh-path>, and -l<library> arguments'
"Specifies the debug info's compilation dir"
'Specifies the evaluation method to use for floating-point arithmetic.'
'Specifies the exception behavior of floating-point operations.'
"Specifies the largest alignment guaranteed by '::operator new(size_t)'"
'Specifies the name we should consider the input file'
'Specifies the size of batches for processing CUs. Higher number has better performance, but more memory usage. Default value is 1.'
'Specify "safe" i.e. known-good backend:'
"Specify <function, basic block1[;basic block2...]> pairs to extract.\nEach pair will create a function.\nIf multiple basic blocks are specified in one pair,\nthe first block in the sequence should dominate the rest.\nIf an unnamed basic block is to be extracted,\n'%' should be added before the basic block variable names.\neg:\n  --bb=f:bb1;bb2 will extract one function with both bb1 and bb2;\n  --bb=f:bb1 --bb=f:bb2 will extract two functions, one with bb1, one with bb2.\n  --bb=f:%1 will extract one function with basic block 1;"
'Specify <script> as linker script'
'Specify CU wavefront execution mode (AMDGPU only)'
'Specify O2(not Os) spill func threshold'
'Specify Os spill func threshold'
'Specify WGP wavefront execution mode (AMDGPU only)'
'Specify a SamplePGO profile file'
'Specify a context sensitive PGO profile file'
"Specify a default target triple when it's not available in the module"
"Specify a directory where Clang can find 'include' and 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Clang will use the GCC installation with the largest version"
"Specify a directory where Flang can find 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Flang will use the GCC installation with the largest version"
'Specify a plugin to optimize LFENCE insertion'
'Specify a reference program output (for miscompilation detection)'
'Specify a symbol resolution: filename,symbolname,resolution\nwhere "resolution" is a sequence (which may be empty) of the\nfollowing characters:\n p - prevailing: the linker has chosen this definition of the\n     symbol\n l - local: the definition of this symbol is unpreemptable at\n     runtime and is known to be in this linkage unit\n x - externally visible: the definition of this symbol is\n     visible outside of the LTO unit\nA resolution for each symbol must be specified'
'Specify alias to extract'
'Specify alias(es) to extract using a regular expression'
"Specify an offloading device architecture for CUDA, HIP, or OpenMP. (e.g. sm_35). If 'native' is used the compiler will detect locally installed architectures. For HIP offloading, the device architecture can be followed by target ID features delimited by a colon (e.g. gfx908:xnack+:sramecc-). May be specified more than once."
'Specify an output filename for an HTML report. This describes both recommendations and reasons for changes.'
'Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)'
'Specify code object ABI version. Defaults to 6. (AMDGPU only)'
'Specify comma-separated list of offloading target triples (CUDA and HIP only)'
'Specify comma-separated list of triples OpenMP offloading targets to be supported'
'Specify command to run'
'Specify configuration file'
"Specify default stream. The default value is 'legacy'. (CUDA/HIP only)"
'Specify file to retrieve coverage information from'
'Specify file to retrieve the list of functions to apply CHR to'
'Specify file to retrieve the list of modules to apply CHR to'
'Specify frame pointer elimination optimization'
'Specify function to extract'
'Specify function(s) to extract using a regular expression'
'Specify global to extract'
'Specify global(s) to extract using a regular expression'
'Specify gotol lower bound'
'Specify how to interpret the input file'
'Specify input format'
'Specify list of enabled SPIR-V extensions'
'Specify lowering strategy for function LDS access:'
'Specify maximum number of prefixes to use for padding'
'Specify name of main file output in depfile'
'Specify name of main file output to quote in depfile'
'Specify output filename'
'Specify remark argument/s to count (accepts regular expressions).'
'Specify remark argument/s to count by.'
'Specify target SDNode namespace (default=<Target>ISD)'
'Specify target triple (e.g. i686-apple-darwin9)'
'Specify that backslash in string introduces an escape character'
'Specify that floating-point optimizations are not allowed that assume arguments and results are not +-inf.'
'Specify that floating-point optimizations are not allowed that assume arguments and results are not NANs.'
'Specify that kernel argument names are preserved (HIP only)'
'Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded (HIP device compilation only)'
'Specify that the assembler should encode SSE instructions with VEX prefix'
'Specify the "test" i.e. suspect back-end:'
'Specify the BPF stack size limit'
'Specify the Swift version to use when filtering API notes'
'Specify the available SPIR-V extensions. If this option is not specified, then all extensions are available.'
"Specify the boundary's size to align branches"
'Specify the class to use for constant Objective-C string objects.'
'Specify the compression level (integer)'
'Specify the current profile is used as a partial profile.'
'Specify the darwin target variant triple'
'Specify the default character set for source files'
'Specify the default maximum struct packing alignment'
"Specify the entry function (default = 'main') of the executable"
'Specify the filename of the process to launch for remote MCJIT execution.  If none is specified,\n\tremote execution will be simulated in-process.'
'Specify the function selection heuristic used during inlining'
'Specify the function to be called on overflow'
'Specify the interval (in seconds) after which a module file will be considered unused'
'Specify the interval (in seconds) between attempts to prune the module cache'
'Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.'
'Specify the maximum alignment to enforce on pointers lacking an explicit alignment'
'Specify the maximum amount of instructions to inspect when searching for a conditional branch from an indirect control flow.'
'Specify the maximum amount of instructions to inspect when searching for an undefined instruction from a conditional branch.'
'Specify the module cache path'
'Specify the module user build path'
'Specify the name of an IR file to load for function definitions'
'Specify the name of the .dwo file to encode in the DWARF output'
'Specify the name of the module to build'
'Specify the name of the root module.'
'Specify the number of threads to use for device offloading tasks during compilation.'
"Specify the output file type ('asm', 'null', or 'obj')"
'Specify the output file. default: reduced.ll|.bc|.mir'
'Specify the output filename'
'Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.'
'Specify the overflow patterns to exclude from arithmetic sanitizer instrumentation'
'Specify the path of profile data file. This is mainly for test purpose.'
'Specify the path of profile remapping file. This is mainly for test purpose.'
'Specify the path prefix of the MemProf dot files.'
'Specify the path to the "safe" backend program'
'Specify the prebuilt module path'
'Specify the printf lowering scheme (AMDGPU only), allowed values are "hostcall"(printing happens during kernel execution, this scheme relies on hostcalls which require system to support pcie atomics) and "buffered"(printing happens after all kernel threads exit, this uses a printf buffer and does not rely on pcie atomic support)'
'Specify the profile path in PGO use compilation'
'Specify the property to collect remarks by.'
'Specify the property to group remarks by.'
'Specify the size in bits of an RVV vector register'
'Specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)'
'Specify the source file identifier for -funique-source-file-names; uses the source file path if not specified'
'Specify the stackmap encoding version (default = 3)'
'Specify the target Objective-C runtime kind and version'
'Specify the target environment'
'Specify the type of coverage instrumentation for Sanitizers'
'Specify the type of metadata to emit for binary analysis sanitizers'
'Specify the types of comparisons to emit GPR-only code for.'
'Specify the version of the memprof format to use'
'Specify the vscale maximum. Defaults to the vector length agnostic value of "0". (AArch64/RISC-V only)'
'Specify the vscale minimum. Defaults to "1". (AArch64/RISC-V only)'
'Specify time trace file destination'
'Specify types of branches to align'
'Specify types of branches to align (plus separated list of types):\njcc      indicates conditional jumps\nfused    indicates fused conditional jumps\njmp      indicates direct unconditional jumps\ncall     indicates direct and indirect calls\nret      indicates rets\nindirect indicates indirect unconditional jumps'
'Specify wavefront size 32 mode (AMDGPU only)'
'Specify wavefront size 64 mode (AMDGPU only)'
'Specify where to find the compiled intrinsic modules'
'Specify which frame pointers to retain.'
'Speculate that non-constant strides are unit in LAA'
'Speculate unpredictable branches (default = false)'
'Speculative execution is applied only to targets with divergent branches, even if the pass was configured to apply only to all targets.'
'Speculative execution is not applied to basic blocks where the cost of the instructions to speculatively execute exceeds this limit.'
'Speculative execution is not applied to basic blocks where the number of instructions that would not be speculatively executed exceeds this limit.'
'SpeculativeJIT'
'Speculatively execute instructions'
'Spill Code Placement Analysis'
'Spill mode for splitting live ranges'
'Split GEPs to a variadic base and a constant offset for better CSE'
'Split Options'
'Split all critical edges during PHI elimination'
'Split all partitions'
'Split critical edges during machine sinking'
'Split machine functions using profile information'
'Split marker to use for merging the ouput'
'Split out cold basic blocks from machine functions based on profile information'
'Split out cold blocks from machine functions based on profile information.'
'Split static data'
'Split static data sections into hot and cold sections using profile information'
'Split the input file into chunks using the given or default marker and process each chunk independently'
'Split the output by Compile Units.'
'Split the profile to two sections with one containing sample profiles with inlined functions and the other without (only meaningful for -extbinary)'
'Split without externalizing locals'
"Splits all EH code and it's descendants by default."
'Stable  ABI instrumentation for sanitizer runtime. Default: Conventional'
'Stack Frame Layout'
'Stack Slot Coloring'
'StackMap Liveness Analysis'
'Standard converging scheduler.'
'Start each pass with collecting and end it with checking of debug info preservation.'
'Start each pass with debugify and end it with check-debugify'
'Start emitting warnings for unused driver arguments'
'Start the pipeline with collecting and end it with checking of debug info preservation.'
'Start the pipeline with debugify and end it with check-debugify'
'Statement-level analysis'
'Static Data Annotator'
'Static Data Profile Info'
'Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|sarif-html|text).'
'Static scheduling'
'Statically link the sanitizer runtime (Not supported for ASan, TSan or UBSan on darwin)'
'Statically resolve calls to versioned functions from non-versioned callers.'
'Stop PCH generation after including this file.  When using a PCH, skip tokens until after this file is included.'
'Stop compilation after a specific pass'
'Stop compilation before a specific pass'
'Stop inferring nofree attribute during function-attrs pass'
'Stop inferring nounwind attribute during function-attrs pass'
'Stop initializing trivial automatic stack variables after the specified number of instances'
'Stop initializing trivial automatic stack variables if var size exceeds the specified number of instances (in bytes)'
'Stop processing after parsing rules and dump state'
'Stop removing an empty block if removing it will introduce more than this number of phi entries in its successor'
'Stop scheduling after N instructions'
'Store string literals as writable data'
'Store-level granularity'
'Straight line strength reduction'
'Stress Options'
'Stress test LSR IV chains'
'Stress test ext(promotable(ld)) -> promoted(ext(ld)) optimization in CodeGenPrepare'
'Stress test instruction scheduling'
'Stress test store(extract) optimizations in CodeGenPrepare'
'String Table (DEBUG_S_STRINGTABLE subsection) (not typically present in PDB file)'
'String to initialize the database'
'Strip (or keep only, if negative) a given number of path components when emitting check metadata.'
'Strip debugger symbol info from translation unit'
'Strip module-level named metadata'
'Strip names from Value during LTO (other than GlobalValue).'
'Strip prefix of the fully qualified names'
'Strip specified level of directory name from source path in the profile counter name for static functions.'
'Strip-mine outer loops for the loop-vectorizer to trigger'
'Structure.'
'Structurize the CFG'
'Stuff'
'Subprogram.'
'Subrange encoding information for arrays.'
'Summary of elements missing/added/matched/printed.'
'Supplement an instr profile with sample profile, to correct the profile unrepresentativeness issue. The sample profile is the input of the flag. Output will be in instr format (The flag only works with -instr)'
'Support POSIX threads in generated code'
'Suppress STP for AArch64'
'Suppress all deprecated warnings'
'Suppress all linking warnings'
'Suppress all warnings'
'Suppress counter promotion if exit blocks contain ret.'
'Suppress duplication of instrs into per-HwMode decoder tables'
'Suppress inlining of functions whose stack size exceeds the given value'
'Suppress output of running passes (both stdout and stderr)'
'Suppress rematerialization of dynamic shadow address by passing it through inline asm in prologue.'
'Suppress slot sharing during stack coloring'
'Suppress type errors (Wasm)'
'Suppress verbose debugify output'
'Swap add and addi in cases where the add may be combined with a shift'
'Swap target blocks of a conditional branch for MVE expander'
'Switch to fast cluster algorithm with the lost of some fusion opportunities'
'Symbol ID of the symbol being queried (hex).'
'Symbol ID to look up (hex)'
'Symbol Options'
'Symbol Rewrite Map'
'Symbol Type Options'
'Symbol kind to use when printing symbols.'
'Symbol location coverage.'
'Symbol remapping file'
'Symbol to call as main entry point'
'Symbol to put in the symtab in the resulting dso'
'Symbols (DEBUG_S_SYMBOLS subsection) (not typically present in PDB file)'
'Symbols (Variable, Members, etc.).'
'Symbols.'
'Syntax variant to use for output printing'
'Synthesize retain and release calls for Objective-C pointers'
'System directory for configuration files'
'SystemZ Assembly Printer'
'SystemZ Comparison Elimination'
'SystemZ Copy Physregs'
'SystemZ DAG->DAG Pattern Instruction Selection'
'SystemZ Instruction Shortening'
'SystemZ Local Dynamic TLS Access Clean-up'
'SystemZ Long Branch'
'SystemZ Post Rewrite pass'
'SystemZ Test Data Class optimization'
'TableGen LSP Language Server'
'Tail Call Elimination'
'Tail Duplication'
'Tail-folding and predication preferences over creating a scalar epilogue loop.'
'Take more precise inbounds assumptions (do not scale well)'
'Take raw hexadecimal bytes as input for disassembly. Whitespace is ignored'
'Takes a posix regex and prints the link graphs of all files matching that regex after fixups have been applied'
'Target CPU, ignored if --mtriple is not used'
'Target Library Information'
'Target Pass Configuration'
'Target Transform Information'
'Target a particular ABI type'
'Target a specific auxiliary cpu type'
'Target a specific cpu type'
'Target a specific cpu type (-mcpu=help for details)'
'Target arch to assemble for, see -version for available targets'
'Target architecture. See -version for available targets'
'Target cost kind'
'Target default float ABI type'
'Target linker version'
'Target specific attributes'
'Target specific attributes (-mattr=help for details)'
'Target specific auxiliary attributes'
'Target triple for disassembler'
'Target triple to assemble for, see -version for available targets'
'Target triple. See -version for available targets'
'Target triple. When present, a TargetMachine is created and TargetMachine::splitModule is used instead of the common SplitModule logic.'
'Template Parameter.'
'Template alias.'
'Template arguments encoded in the template name.'
'Template functions or specializations without host, device and global attributes have implicit host device attributes (CUDA/HIP only)'
'Template pack.'
'Template parameters replaced by its arguments.'
'Template template parameter.'
'Template type parameter.'
'Template value parameter.'
'Template.'
'Temporary development switch used to gradually uplift SimplifyCFG into preserving DomTree,'
'Terminate process if it loads user32.dll.'
'Test harness files'
'Text encoding'
'Text output'
'Textual description of the function type to be called'
'Textual description of the pass pipeline to run'
'The CPU number that the benchmarking process should executon on'
'The InteractiveModelRunner will echo back to stderr the data received from the host (for debugging purposes).'
'The LMUL to use for getRegisterBitWidth queries. Affects LMUL used by autovectorized code. Fractional LMULs are not supported.'
'The OOO window for processor resources during scheduling.'
'The alignment to use when accessing the buffers\nDefault is unaligned\nUse 0 to disable address randomization'
'The amount of branches that we are willing to explore withthe exact algorithm before giving up.'
'The associativity of the first cache level.'
'The associativity of the second cache level.'
'The average lifetime (s) for an allocation to be considered cold'
'The average number of profile counters allocated per value profiling site.'
'The base class for the ops in the dialect we are planning to emit'
'The bonus weight of users of allocas within loop when sorting profitable allocas'
'The clause simdlen must fit the %0-bit lanes in the architectural constraints for SVE (min is 128-bit, max is 2048-bit, by steps of 128-bit)'
'The clause simdlen(1) has no effect when targeting aarch64.'
'The code working set size is considered huge if the number of blocks required to reach the -profile-summary-cutoff-hot percentile exceeds this count.'
'The code working set size is considered large if the number of blocks required to reach the -profile-summary-cutoff-hot percentile exceeds this count.'
'The coefficient used when initializing II in the window algorithm.'
'The compilation directory to embed in the coverage mapping.'
'The compilation directory to embed in the debug info'
'The compilation directory to embed in the debug info and coverage mapping.'
'The cost of a histcnt instruction'
"The cost of a loop that is considered 'small' by the interleaver."
'The cost of a step in a different basic block than the killing MemoryDef(default = 5)'
'The cost of a step in the same basic block as the killing MemoryDef(default = 1)'
'The cost of decreasing a block count by one.'
"The cost of decreasing a block's count by one."
'The cost of decreasing a jump count by one.'
"The cost of decreasing the entry block's count by one."
'The cost of increasing a block count by one.'
"The cost of increasing a block's count by one."
'The cost of increasing a count of zero-weight block by one.'
'The cost of increasing a jump count by one.'
'The cost of increasing an unknown block count by one.'
"The cost of increasing an unknown block's count by one."
'The cost of increasing an unknown fall-through jump count by one.'
'The cost of increasing an unknown jump count by one.'
"The cost of increasing the entry block's count by one."
'The cost threshold for call sites that get inlined without the cost-benefit analysis'
'The cost threshold for loop unrolling'
'The cost threshold for loop unrolling when optimizing for size'
'The cost threshold for partial loop unrolling'
'The cost threshold for unswitching a loop.'
'The current shard index'
'The default 2nd-level tile size (if not enough were provided by --polly-2nd-level-tile-sizes)'
'The default address space is assumed as the flat address space. This is mainly for test purpose.'
'The default associativity of the first cache level (if not enough were provided by the TargetTransformInfo).'
'The default associativity of the second cache level (if not enough were provided by the TargetTransformInfo).'
'The default maximum header size for automatic loop rotation'
'The default memprof options'
'The default register tile size (if not enough were provided by --polly-register-tile-sizes)'
'The default size of the first cache level specified in bytes (if not enough were provided by the TargetTransformInfo).'
'The default size of the second cache level specified in bytes (if not enough were provided by the TargetTransformInfo).'
'The default tile size (if not enough were provided by --polly-tile-sizes)'
'The desired fields order.'
'The dialect to gen for'
'The dialect to run the generator for'
'The directory to import the .jscop files from.'
'The directory which holds the compiler resource files'
'The element type include parents in its name.'
'The estimated size of the generated function (# of instrs)'
'The exception model'
'The file offset to explain'
'The file to write the stream to'
'The float ABI to use'
'The format of the remarks.'
'The format that output stacks should be output in. Only applies with all-stacks.'
'The format used for serializing remarks (default: YAML)'
'The function to be called'
'The gcc binary to use.'
'The index or name of the stream whose contents to export'
'The isl scheduling optimizer'
'The kind of context sensitive profile guided optimization'
'The kind of dependence analysis to use'
'The kind of profile guided optimization'
'The level of dependence analysis'
'The limit on recursion depth for LSRs setup cost'
'The limit to use while constructing the DAG prior to scheduling, at which point a trade-off is made to avoid excessive compile time.'
'The list of function names in which Emscripten-style exception handling is enabled (see emscripten EMSCRIPTEN_CATCHING_ALLOWED options)'
'The list of the names of classes being moved, e.g. "Foo,a::Foo,b::Foo".'
'The lower bound of size growth limit for proirity-based sample profile loader inlining.'
'The lower limit of the difference between best II and base II in the window algorithm. If the difference is smaller than this lower limit, window scheduling will not be performed.'
'The lower limit of the scheduling region in the window algorithm.'
'The max number of exiting blocks of a loop to allow  speculative counter promotion'
'The max number of instructions to consider hoisting loads over (the algorithm is quadratic over this number)'
'The max number of iteration for converge'
'The max of trip count upper bound that is considered in unrolling'
'The max version for the optimized memory  intrinsic calls'
'The maximal coefficient allowed (-1 is unlimited)'
'The maximal constant term allowed (-1 is unlimited)'
'The maximal number of arrays to compare in each alias group.'
'The maximal number of disjunts allowed in memory accesses to to build RTCs.'
'The maximal number of parameters allowed in RTCs.'
"The maximum 'boost' (represented as a percentage >= 100) applied to the threshold when aggressively unrolling a loop due to the dynamic cost savings. If completely unrolling a loop will reduce the total runtime from X to Y, we boost the loop unroll threshold to DefaultThreshold*std::min(MaxPercentThresholdBoost, X/Y). This limit avoids excessive code bloat."
'The maximum LMUL value to use for fixed length vectors. Fractional LMUL values are not supported.'
'The maximum allowed number of runtime memory checks'
'The maximum cost used for building integers.'
'The maximum distance (in bytes) of a backward jump for ExtTSP'
'The maximum distance (in bytes) of a forward jump for ExtTSP'
'The maximum distance (in bytes) of backward jumps for ExtTSP value'
'The maximum interleave count to use when interleaving a scalar reduction in a nested loop.'
'The maximum length of a constant string for a builtin string cmp call eligible for inlining. The default value is 3.'
'The maximum length of a constant string to inline a memchr call.'
'The maximum length of a single temporal profile trace (default: 10000)'
'The maximum levels the DFS-based missing frame search should go with'
'The maximum look-ahead depth for operand reordering scores'
'The maximum look-ahead depth for searching best rooting option'
'The maximum nesting depth allowed for assembly macros.'
'The maximum number candidates that only partially overwrite the killing MemoryDef to consider (default = 5)'
'The maximum number of SCEV checks allowed for Loop Distribution'
'The maximum number of SCEV checks allowed for Loop Distribution for loop marked with #pragma clang loop distribute(enable)'
'The maximum number of SCEV checks allowed for Loop Load Elimination'
'The maximum number of SCEV checks allowed with a vectorize(enable) pragma'
'The maximum number of SCEV checks allowed.'
'The maximum number of blocks to check when trying to prove that all paths to an exit go through a killing block (default = 50)'
'The maximum number of callsites in a function, above which stale profile matching will be skipped.'
'The maximum number of clones allowed for a single function specialization'
'The maximum number of functions to track per lattice value'
'The maximum number of heap allocations to consider in one function before skipping (to save compilation time). Set to 0 for no limit.'
'The maximum number of incoming values a PHI node can have to be considered during the specialization bonus estimation'
'The maximum number of instructions considered for cycle sinking.'
'The maximum number of iterations allowed when searching for transitive phis'
'The maximum number of iterations function specialization is run'
'The maximum number of parameters allowed when merging functions.'
'The maximum number of predecessors a basic block can have to be considered during the estimation of dead code'
'The maximum number of scheduling group conflicts which we attempt to solve with the exponential time exact solver. Problem sizes greater than this willbe solved by the less accurate greedy algorithm. Selecting solver by size is superseded by manually selecting the solver (e.g. by amdgpu-igrouplp-exact-solver'
'The maximum number of steps while walking upwards to find MemoryDefs that may be killed (default = 90)'
'The maximum number of stored temporal profile traces (default: 100)'
'The maximum number of stores/phis MemorySSAwill consider trying to walk past (default = 100)'
'The maximum number of times a live range can be evicted before preventing it from being evicted'
'The maximum number of times the analyzer will go through a loop'
'The maximum number of vtable for the last candidate.'
'The maximum number of warnings to emit when correlating profile from debug info (0 = no limit)'
'The maximum ratio between densities of two chains for merging'
"The maximum size of a callee that get's inlined without sufficient cycle savings"
'The maximum size of a chain to apply splitting'
'The maximum size of a chain to create'
'The maximum size of a function to consider for inference.'
'The maximum size of an object in the sdata section'
'The maximum size to use in sweep-mode'
'The maximum stride, considered to be profitable.'
'The maximum total number of memory locations alias sets may contain before degradation'
'The minimal number of cycles between issuing two dependent consecutive vector fused multiply-add instructions.'
'The minimal number of per-loop instructions before a single loop region is considered profitable'
'The minimum TotalLifetimeAccessDensity / AllocCount for an allocation to be considered hot'
'The minimum count to optimize memory intrinsic calls'
'The minimum instruction count required when merging functions.'
'The minimum number of arguments a function call must have before it is considered having many arguments.'
'The minimum number of basic blocks required for a function to run stale profile call graph matching.'
'The minimum number of call anchors required for a function to run stale profile call graph matching.'
'The minimum number of instructions a basic block should contain before being considered big.'
'The minimum number of instructions a basic block should contain before being considered medium-sized.'
'The minimum number of instructions that are outlined in a frame helper (default = 2)'
'The minimum number of instructions that should be included in the snippet'
'The minimum number of loads, which should be considered strided, if the stride is > 1 or is runtime value'
'The minimum size in bytes before an outlining candidate is accepted'
'The minimum size in bytes of each global that should considered in merging.'
'The minimum size to use in sweep-mode'
'The model being trained for register allocation eviction'
'The model being trained for register allocation priority'
'The name for this study'
'The name of a function (or its substring) whose CFG is viewed/printed.'
'The name of a validation counter to run concurrently with the main counter to validate benchmarking assumptions'
'The name of the ABI to be targeted from the backend.'
'The name of the distribution to use'
'The name of the executor to use.'
"The name of the predefined style used as a\nfallback in case clang-format is invoked with\n-style=file, but can not find the .clang-format\nfile to use. Defaults to 'LLVM'.\nUse -fallback-style=none to skip formatting."
'The name of the struct/class.'
'The name of this group of passes'
'The number of MemoryDefs we consider as candidates to eliminated other stores per basic block (default = 5000)'
'The number of benchmarks run to perform'
'The number of blocks to scan during memory dependency analysis (default = 200)'
'The number of instructions to scan in a block in memory dependency analysis (default = 100)'
'The number of instructions to search for a redundant dmb'
'The number of loads per basic block for inline expansion of memcmp that is only being compared against zero.'
'The number of loop iterations to strip-mine for pre-vectorization'
'The number of memory instructions to scan for dead store elimination (default = 150)'
'The number of precise steps between two approximating iterations. (A value of -1 schedules another approximation stage before the actual dead code elimination.'
'The number of predecessors to search for a stronger condition to use to thread over a weaker condition'
'The number of searches per loop in the window algorithm. 0 means no search number limit.'
'The number of shards into which the op classes will be divided'
'The number of threads used to process all files in parallel. Set to 0 for hardware concurrency. This flag only applies to all-TUs.'
'The number of times to repeat measurements on the benchmark k before aggregating the results'
'The option is used to turn on/off warnings about hash mismatch for comdat or weak functions.'
'The option to specify the name of the function whose CFG will be displayed.'
'The option to specify the name of the function whose block frequency info is printed.'
'The option to specify the name of the function whose branch probability info is printed.'
'The option to specify the name of the functions to verify.'
'The overhead cost associated with each function call when merging functions.'
'The overhead cost associated with each instruction when lowering to machine instruction.'
'The overhead cost associated with each parameter when merging functions.'
'The page size of the target in bytes'
'The percentage threshold against remaining unpromoted indirect call count for the promotion'
'The percentage threshold against remaining unpromoted indirect call count for the promotion for calls'
'The percentage threshold against remaining unpromoted indirect call count for the promotion for jump tables'
'The percentage threshold against total count for the promotion'
'The percentage threshold against total count for the promotion for calls'
'The percentage threshold against total count for the promotion for jump tables'
'The percentage threshold for the memory intrinsic calls optimization'
'The percentage threshold of vtable-count / function-count for cost-benefit analysis.'
'The position of the cursor when invoking\nclang-format from an editor integration'
'The power exponent for the distance-based locality'
'The prefix of the dialect extension'
'The prefix to use for this group of passes. The form will be mlirCreate<prefix><passname>, the prefix can avoid conflicts across libraries.'
'The prefix used for the CFG dot file names.'
'The prefix used for the CallGraph dot file names.'
'The prefix used for the DDG dot file names.'
'The prefix used for the Machine CFG dot file names.'
'The probability of a guard failing is assumed to be the reciprocal of this value (default = 1 << 20)'
'The probability threshold of enabling branch hint.'
'The profile guided size optimization profile summary cutoff for instrumentation profile.'
'The profile guided size optimization profile summary cutoff for sample profile.'
'The ratio of searches per loop in the window algorithm. 100 means search all positions in the loop, while 0 means not performing any search.'
'The relative/absolute file path of new cc.'
'The relative/absolute file path of new header.'
'The relative/absolute file path of old cc.'
'The relative/absolute file path of old header.'
'The relocation model to use'
'The sample period (nbranches/sample), used for LBR sampling'
'The scale factor for the frequency-based locality'
'The scale factor used to scale the working set size of the partial sample profile along with the partial profile ratio. This includes the factor of the profile counter per block and the factor to scale the working set size to use the same shared thresholds as PGO.'
'The seed used by the randomize structure layout feature'
'The selected source range in which the refactoring should be initiated (<file>:<line>:<column>-<line>:<column> or <file>:<line>:<column>)'
'The size growth ratio limit for proirity-based sample profile loader inlining.'
"The size in bits of a vector register (if not set, this information is taken from LLVM's target information."
'The size of a line in the cache'
'The size of the cache'
'The size of the first cache level specified in bytes.'
'The size of the first level cache line size specified in bytes.'
'The size of the second level specified in bytes.'
'The string to embed in the .LLVM.command.line section.'
'The string to embed in the Dwarf debug AT_producer record.'
'The string to embed in the Dwarf debug flags record.'
'The style name used for reformatting.'
'The style name used for reformatting. Default is "llvm"'
'The summary file to use for function importing.'
'The target Objective-C runtime supports ARC weak operations'
'The text prefix to use for cold basic block clusters'
"The thread model to use. Defaults to 'posix')"
'The threshold (unit M) for flushing LLVM bitcode.'
'The threshold for fast cluster'
'The threshold for splitting a virtual register with a hint, in percentage'
'The threshold the lifetime access density (accesses per byte per lifetime sec) must be under to consider an allocation cold'
'The type of aggregation to do on call stacks.'
'The type of output desired'
'The upper bound of size growth limit for proirity-based sample profile loader inlining.'
'The upper limit of II in the window algorithm.'
'The value specified in simdlen must be a power of 2 when targeting Advanced SIMD.'
'The vectorization factor for byte-compare patterns.'
'The vectorization style for loop idiom transform.'
'The version of darwin target variant SDK used for compilation'
'The version of target SDK used for compilation'
'The visibility for definitions without an explicit DLL storage class. If Keep is specified the visibility is not adjusted [-fvisibility-from-dllstorageclass]'
'The visibility for dllexport definitions. If Keep is specified the visibility is not adjusted [-fvisibility-from-dllstorageclass]'
'The visibility for dllimport external declarations. If Keep is specified the visibility is not adjusted [-fvisibility-from-dllstorageclass]'
'The visibility for external declarations without an explicit DLL storage class. If Keep is specified the visibility is not adjusted [-fvisibility-from-dllstorageclass]'
"The visibility for global C++ operator new and delete declarations. If 'source' is specified the visibility is not adjusted"
'The weight of backward jumps for ExtTSP value'
'The weight of conditional backward jumps for ExtTSP value'
'The weight of conditional fallthrough jumps for ExtTSP value'
'The weight of conditional forward jumps for ExtTSP value'
'The weight of unconditional backward jumps for ExtTSP value'
'The weight of unconditional fallthrough jumps for ExtTSP value'
'The weight of unconditional forward jumps for ExtTSP value'
'These control extra attributes that are added when the element is printed.'
'These control how the elements are printed.'
'These control the generated warnings.'
'These control the output generated.'
'These control the view comparison.'
'These control which elements are printed.'
'These control which elements are selected.'
'These control which sections are dumped. Where applicable these parameters take an optional =<offset> argument to dump only the entry at the specified offset.'
'ThinLink: produces the index by linking only the summaries.'
"This appends the content hash to the globally outlined function name. It's beneficial for enhancing the precision of the stable hash and for ordering the outlined functions."
'This argument does not take a value.\n\tInstead, it consumes any positional arguments until the next recognized option.'
'This checks if there is a fdo instr. profile hash mismatch for this function'
'This compilation is part of building a PCH with corresponding object file.'
'This flag controls the behaviour of fcmp equality comparisons.For equality comparisons such as `x == 0.0f`, we can perform the '
'This is the default. TOC data transformation is not applied to any variables. Only variables specified explicitly in -mtocdata= will have the TOC data transformation.'
'This option is for testing purposes only. It forces BOLT to convert low_pc/high_pc to ranges always.'
"Thread pointer access method. For AArch32: 'soft' uses a function call, or 'tpidrurw', 'tpidruro' or 'tpidrprw' use the three CP15 registers. 'cp15' is an alias for 'tpidruro'. For AArch64: 'tpidr_el0', 'tpidr_el1', 'tpidr_el2', 'tpidr_el3' or 'tpidrro_el0' use the five system registers. 'elN' is an alias for 'tpidr_elN'."
'Threshold (in bytes) for the runtime check guarding the memmove.'
'Threshold (in bytes) to perform the transformation, if the runtime loop count (mem transfer size) is known at compile-time.'
'Threshold (max size of unrolled loop) to use in aggressive (O3) optimizations'
'Threshold for hot callsites '
'Threshold for inlining addition operands into a SCEV'
'Threshold for inlining cold callsites'
'Threshold for inlining functions with cold attribute'
'Threshold for inlining functions with inline hint'
'Threshold for inlining multiplication operands into a SCEV'
'Threshold for locally hot callsites '
'Threshold for partial unrolling'
'Threshold for switching to iteratively computing SCEV ranges'
'Threshold for the size of CSUses'
'Threshold for triggering vextract replacement'
'Threshold to use for inner loop when doing unroll and jam.'
'Thumb IT blocks insertion pass'
'Thumb2 instruction size reduce pass'
'Tile Copy Lowering'
'Tile Register Configure'
'Tile Register Pre-configure'
'Tile size for matrix instruction fusion using square-shaped tiles.'
'Tilikum Crossing Optimizer\n'
'Time each pass run, printing elapsed time for each run on exit'
'Time each pass, printing elapsed time for each on exit'
'Time individual commands'
'Time phases of parser and backend'
'Time to be used in __DATE__, __TIME__, and __TIMESTAMP__ macros'
'Time when the current build session started'
'Tiny code model'
'Tool Options'
'Tool options'
'Tool used for detecting AMD GPU arch in the system.'
'Tool used for detecting NVIDIA GPU arch in the system.'
'Toolchain identification name.'
'Toplevel siblings divisor for cost multiplier.'
'Total samples cutoff for functions used to calculate profile density.'
'Total size of all blocks (including zero-fill) in all graphs (post-fixup)'
'Total size of all blocks (including zero-fill) in all graphs (pre-pruning)'
'Trace global value placement'
'Trace the hash of the function with this name.'
'Traces to enable.'
'Tracing of CMP and similar instructions'
'Tracing of DIV instructions'
'Tracing of GEP instructions'
'Tracing of load instructions'
'Tracing of store instructions'
'Track failure strings in detecting scop regions'
'Track origins (allocation sites) of poisoned memory'
'Track origins of labels'
'Track reg pressure and switch priority to in-depth'
'Track the overflow bit if requested.'
'Training log for the register allocator eviction model'
'Training log for the register allocator priority model'
'Transform functions to use DSP intrinsics'
"Transitional flag to turn off NVPTX's requirement on preserving structured CFG. The requirement should be disabled only when unexpected regressions happen."
'Translations to perform'
'Trap on integer division by zero.'
'Trap on integer overflow'
'Trap when incorrect'
'Treat <file> as C source file'
'Treat <file> as C++ source file'
'Treat INCLUDE lines like #include directives in -E mode'
'Treat all #include paths starting with <prefix> as including a system header.'
'Treat all #include paths starting with <prefix> as not including a system header.'
'Treat all parameters to functions that are pointers as dereferencible. This is useful for invariant load hoisting, since we can generate less runtime checks. This is only valid if all pointers to functions are always initialized, so that Polly can choose to hoist their loads. '
'Treat all source files as C'
'Treat all source files as C++'
'Treat any <pattern> strings as regular expressions when selecting instead of just as an exact string match.'
'Treat each comma separated argument in <arg> as a documentation comment block command'
'Treat editor placeholders as valid source code'
"Treat fixed form lines with 'd' or 'D' in the first column as blank."
"Treat fixed form lines with 'd' or 'D' in the first column as comments."
'Treat hip and hipv4 offload kinds as compatible with openmp kind, and vice versa.\n'
'Treat input as a PDB file (default)'
'Treat input as raw contents of /names named stream'
'Treat input as raw contents of DBI stream'
'Treat input as raw contents of PDB stream'
'Treat input as raw contents of a module stream'
'Treat issues where a fixed-width property is requested from a scalable type as a warning, instead of an error'
"Treat pointer overflow as two's complement"
"Treat signed integer overflow as two's complement"
'Treat source input files as Objective-C inputs'
'Treat source input files as Objective-C++ inputs'
'Treat stack lifetimes as starting on first use, not on START marker.'
'Treat string literals as const'
'Treat subsequent input files as having type <language>'
'Treat the given module as-if it were containing the post-thinlink module containing the root'
'Treat usage of null pointers as undefined behavior (default)'
'Treat warnings as errors'
'Trim cold functions until profile size is below specified limit in bytes. This uses a heursitic and functions may be excessively trimmed'
'Trim context sample profiles whose count is below cold threshold'
'Triple default EABI version'
'Triple to use to serialize to cubin.'
'Try emitting Compact-Unwind for non-canonical entries. Maybe overridden by other constraints'
'Try hoisting constant gep expressions'
'Try to avoid heapifying local blocks'
'Try to avoid reuse of byte array addresses using aliases'
'Try to construct schedules where the outer member of each band satisfies the coincidence constraints (yes/no)'
'Try to delinearize array references.'
'Try to evenly distribute flow when there are multiple equally likely options.'
'Try to map `do concurrent` loops to OpenMP [none|host|device]'
'Try to propagate nonnull argument attributes from callsites to caller functions.'
'Try to simplify all loads.'
'Try to vectorize with non-power-of-2 number of elements.'
'Try wider VFs if they enable the use of vector variants'
'Tune debug info for a particular debugger'
'Tune for a specific cpu type'
'Turn all knobs to 11'
'Turn fastcc calls into tail calls by (potentially) changing ABI.'
'Turn off Type Based Alias Analysis'
'Turn off loop unroller'
'Turn off sparse parallelization.'
'Turn off struct-path aware Type Based Alias Analysis'
'Turn off window algorithm.'
'Turn on DominatorTree and LoopInfo verification after Loop Distribution'
'Turn on loop unroller'
'Turn on module map output and specify output path or file name. If no path is specified and if prefix option is specified, use prefix for file path.'
'Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks'
'Turn on time profiler. Generates JSON file based on output filename.'
'Turns on stale matching with block pseudo probes.'
'Two-Address instruction pass'
'Type Options'
'Type Promotion'
'Type Record Options'
'Type definition.'
'Type kind to use when printing types.'
'Type of checking for incorrect devirtualizations'
'Type of symbols to dump (default all)'
'Type of the files to be bundled/unbundled.\nCurrent supported types are:\n  i    - cpp-output\n  ii   - c++-cpp-output\n  cui  - cuda-cpp-output\n  hipi - hip-cpp-output\n  d    - dependency\n  ll   - llvm\n  bc   - llvm-bc\n  s    - assembler\n  o    - object\n  a    - archive of objects\n  gch  - precompiled-header\n  ast  - clang AST file'
'Type sizes.'
'Type-Based Alias Analysis'
'Types (Pointer, Reference, etc.).'
'Types.'
'UNKOWN'
'USAGE: '
'Unbundle bundled file into several output files.\n'
'Unconditionally apply unchecked-ld-st optimization (even for large stack frames, or in the presence of variable sized allocas).'
'UndName Options'
'Undefine macro'
'Undefine macro <macro>'
'Undefined / no particular sort order'
'Undefines the __DEPRECATED macro'
'Underlying type for type definitions.'
'Unexpected vftable component type %0 for component number %1'
'Uniformity Analysis'
'Unify divergent function exit nodes'
'Unify function instantiations'
'Unify multiple OpenCL metadata due to linking'
'Union.'
'Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path'
'Unpack machine instruction bundles'
'Unparse and stop (skips the semantic checks)'
'Unparse and stop.'
'Unparse with dependent modules and stop.'
'Unparse with symbols and stop.'
'Unroll factor (affecting 4x32-bit operations) to use for memory operations when lowering memcpy as a loop'
'Unroll loops'
'Unroll loops with run-time trip counts'
'Unroll threshold for AMDGPU if local memory used in a loop'
'Unroll threshold for AMDGPU if private memory used in a loop'
'Unroll threshold increment for AMDGPU for each if statement inside loop'
'Unrolled size limit for loops with an unroll(full) or unroll_count pragma.'
'Unrolled size limit for loops with an unroll_and_jam(full) or unroll_count pragma.'
'Unspecified parameter.'
'Unspecified type.'
'Unwind library to use'
'Uop Decomposition'
'Update pseudo probe distribution factor'
'Update total samples by accumulating all its body samples.'
'Use #line in preprocessed output'
"Use 'mips.ccmov' instruction"
'Use -compile-command to define a command to compile the bitcode. Useful to avoid linking.'
'Use -exec-command to define a command to execute the bitcode. Useful for cross-compilation.'
'Use .ctors instead of .init_array.'
'Use .ctors/.dtors instead of .init_array/.fini_array'
'Use .file directives with an explicit directory'
'Use 16-bit hardware multiplier'
'Use 32-bit floating point registers (MIPS only)'
'Use 32-bit hardware multiplier'
'Use 32-bit pointers for accessing const/local/shared address spaces'
'Use 32-bit pointers for accessing const/local/shared address spaces.'
'Use 64-bit floating point registers (MIPS only)'
'Use <dumpfpx> as a prefix to form auxiliary and dump file names'
'Use <suffix> as the suffix for module files (the default value is `.mod`)'
'Use <value> as character line width in fixed mode'
'Use ANSI escape codes for diagnostics'
"Use Apple's kernel extensions ABI"
'Use CREL relocation format for ELF'
"Use ConstantFP's native fixed-length vector splat support."
"Use ConstantFP's native scalable vector splat support."
"Use ConstantInt's native fixed-length vector splat support."
"Use ConstantInt's native scalable vector splat support."
'Use DLL debug run-time'
'Use DLL run-time'
'Use DPP operations for scan'
'Use DWARF base address selection entries in .debug_ranges'
'Use DWARF style exceptions'
'Use Decision Forest model to rank completion items'
'Use EH-safe code when synthesizing retains and releases in -fobjc-arc'
'Use F5 series hardware multiplier'
'Use GC exclusively for Objective-C related memory management'
"Use GCC installation in the specified directory. The directory ends with path components like 'lib{,32,64}/gcc{,-cross}/$triple/$version'. Note: executables (e.g. ld) used by the compiler are not overridden by the selected GCC installation"
'Use GCNDownwardRPTracker for GCNRegPressurePrinter pass'
'Use GOT indirection instead of PLT to make external function calls (x86 only)'
'Use GOT indirection to reference external data symbols'
'Use GP relative accesses for symbols known to be in a small data section (MIPS)'
'Use GPR indexing mode instead of movrel for vector indexing'
'Use GlobalISel desired legality, rather than try to userules compatible with selection patterns'
'Use HLFIR lowering (experimental)'
'Use IEEE 754 quadruple-precision for long double'
'Use IEEE Compliant F32 div.rnd if available (default)'
'Use IEEE Compliant F32 div.rnd if available, no FTZ'
'Use INTEGER(KIND=8) for the result type in size-related intrinsics'
'Use InstrItineraryData for latency lookup'
'Use Intel MCU ABI'
'Use Iterative approach for scan'
'Use JSON as the output format.'
'Use LFENCE along each conditional edge to harden against speculative loads rather than conditional movs and poisoned pointers.'
'Use LLJITGenericIRPlatform'
'Use LLVM-IR names when deriving statement names'
'Use LLVM/Offload as portable offloading runtime.'
'Use MD5 for file checksums in debug info (default)'
'Use ML.'
'Use NMake/Jom format for the depfile'
'Use ORC runtime from given path'
'Use SEH style exceptions'
'Use SHA1 for file checksums in debug info'
'Use SHA256 for file checksums in debug info'
'Use Section instead of __patchable_function_entries'
'Use SjLj style exceptions'
'Use Stable Hashing for MIR VReg Renaming'
'Use Stack Safety analysis results'
'Use StructurizeCFG IR pass'
'Use TLS'
'Use TargetSchedModel for latency lookup'
'Use TargetTransformInfo::getInstructionCost'
'Use TargetTransformInfo::getIntrinsicInstrCost'
'Use VP intrinsics'
'Use WebAssembly style exceptions'
'Use a best-case representation method for member pointers'
'Use a const qualified type for string literals in C and ObjC'
'Use a diagnostic handler to test the handler interface'
'Use a fake address space map; OpenCL testing purposes only'
'Use a free form text output.'
'Use a full speculation fence to harden both call and ret edges rather than a lighter weight mitigation.'
'Use a most-general representation for member pointers'
'Use a rematerializable pseudoinstruction for 2 instruction constant materialization'
'Use a signed type for wchar_t'
'Use a single TBAA tree for all functions and do not use the FIR alias tags pass'
'Use absolute paths for invoking subcommands (default)'
'Use addrx+offset extension form for any address with a prior base address'
'Use all available analyses'
'Use all discriminator bits (default)'
'Use an unsigned type for wchar_t'
'Use approximate transcendental functions'
'Use arc callee save/restore functions'
'Use atexit or __cxa_atexit to register global destructors'
'Use atomic fetch add for first counter in a function (usually the entry counter)'
'Use base address specifiers in debug_ranges'
'Use base and pass 1 discriminators'
'Use base and pass 1-2 discriminators'
'Use base and pass 1-3 discriminators'
'Use base discriminators only'
'Use best guess'
'Use binary to correlate'
'Use block frequency info to find successors to sink'
'Use cache manager to save/load modules'
'Use call site prioritized inlining for sample profile loader. Currently only CSSPGO is supported.'
'Use callback for max stack depth tracing with minimum stack depth M'
'Use callbacks instead of inline instrumentation sequences.'
'Use callee size priority.'
'Use case-insensitive matching'
'Use codegen data read from default.cgdata to optimize the binary'
'Use codegen data read from the specified <path>.'
'Use colors in detailed AST output. If not set, colors\nwill be used if the terminal connected to\nstandard output supports colors.'
'Use colors in output (default=autodetect)'
'Use column-major layout'
'Use compact approach for aligning functions'
'Use compact branches where appropriate (default).'
'Use compressed jump tables in Thumb-1 by synthesizing an equivalent to the TBB/TBH instructions'
'Use constructor homing if we are using limited debug info already'
'Use context'
'Use context-sensitive byte size cost for preinliner decisions'
'Use cost-benefit ratio.'
'Use debug info or binary file to correlate profiles.'
'Use debug info to correlate'
'Use debug info to correlate profiles. (Deprecated, use -profile-correlate=debug-info)'
'Use debug-info or binary correlation to correlate profiles with build id fetcher'
'Use debuginfod to look up object files from profile'
'Use default code inlining logic for the address sanitizer'
'Use development mode (runtime-loadable model)'
'Use directory as the C++ standard library include path'
'Use distinct LTO pipelines'
'Use div.approx'
'Use div.full'
'Use div.w[u] and mod.w[u] instructions with input not sign-extended.'
'Use dot format instead of plain text when dumping VPlans'
'Use dwarf for profile correlation even when binary contains pseudo probe.'
'Use dynamic alloca to represent stack variables'
'Use emulated TLS model'
'Use emutls functions to access thread_local variables'
'Use experimental new value-tracking variable locations'
'Use exprloc addrx+offset expressions for any address with a prior base address'
'Use ext-tsp for size-aware block placement.'
'Use external machine object code emitter.'
'Use fast short rep mov in memcpy lowering'
'Use filesystem locks for implicit modules builds to avoid duplicating work in competing clang invocations.'
'Use first loadable segment address as base address for offsets in unsymbolized profile. By default first executable segment address is used'
'Use full module build paths in the profile counter names for static functions.'
'Use full register names when printing assembly'
'Use full register names when writing assembly output'
'Use global'
'Use global constructors'
'Use global destructors'
'Use hardened lowering for jump-table dispatch'
'Use heuristics to rank code completion items'
'Use if conversion pass'
'Use ifunc global'
'Use indirect register addressing for divergent indexes'
'Use inline cost priority.'
'Use inlined strings rather than string section.'
'Use instruction-ref based LiveDebugValues with normal DBG_VALUE inputs'
'Use instrumentation data for profile-guided optimization'
'Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.'
'Use instrumented (context sensitive) profile to guide PGO.'
'Use instrumented profile to guide PGO.'
'Use internal machine object code emitter.'
'Use jump tables for lowering switches'
'Use large decoder table format. This uses 24 bits for offset\nin the table instead of the default 16 bits.'
'Use large-integer access for consecutive bitfield runs.'
'Use linker features to support dead code stripping of globals'
'Use loop idiom recognition code size heuristics when compiling with -Os/-Oz'
'Use masked vector intrinsics'
'Use md5 to represent function names in the output profile (only meaningful for -extbinary)'
'Use memory profile for profile-guided memory optimization'
'Use more powerful methods of sharpening expression ranges. May be costly in terms of compile time'
'Use native PDB reader instead of DIA'
'Use new kernel launching API for HIP'
'Use odr indicators to improve ODR reporting'
'Use old-style Thumb2 if-conversion heuristics'
'Use one trap block per function'
'Use only doxygen-style comments to generate docs.'
'Use only register numbers when writing assembly output'
"Use optimistic attributes describing 'as-if' properties of runtime calls."
'Use packed stack layout (SystemZ only).'
'Use page aliasing in HWASan'
'Use pipes between commands, when possible'
'Use post increment control-dependent ranges in IndVarSimplify'
'Use predicated EVL instructions for tail folding. If EVL is unsupported, fallback to data-without-lane-mask.'
'Use preferred fixed label for all labels'
'Use prefix for memory intrinsics in KASAN mode'
'Use private aliases for global variables'
'Use profi to infer block and edge counts'
'Use profi to infer block and edge counts.'
'Use profile info to add section prefix for hot/cold functions'
'Use pseudo probes in profile generation'
'Use public LTO visibility for classes in std and stdext namespaces'
'Use raw weights for labels. Use percentages as default.'
'Use register sized accesses to bit-fields, when possible.'
'Use relative paths for invoking subcommands'
'Use release mode (AOT-compiled model)'
'Use ring buffer for stack allocations'
'Use rnglists for contiguous ranges if that allows using a pre-existing base address'
'Use round-robin distribution of functions to modules instead of the default name-hash-based one'
'Use row-major layout'
'Use runtime alias checks to resolve possible aliasing.'
'Use sampled profile to guide PGO.'
'Use sections+offset as references rather than labels.'
'Use segment set for the computation of the live ranges of physregs.'
'Use segmented stack'
'Use separate accesses for consecutive bitfield runs with legal widths and alignments.'
'Use separate unique sections for named sections'
'Use separate unique sections for named sections (ELF Only)'
'Use shared memory to transfer generated code and data'
'Use simple template names in DWARF, or include the full template name with a modified prefix for validation'
'Use smallest entry possible for jump tables'
'Use software floating point'
'Use specified bytecode when generating output'
'Use stack probes (default)'
'Use static debug run-time'
'Use static run-time'
'Use target platform default'
'Use text-based completion if the parser is not ready'
'Use the AMDGPU specific RPTrackers during scheduling'
'Use the AST -> LLVM pipeline to compile'
'Use the BLOCK_INFO from the given file'
'Use the ClangIR pipeline to compile'
'Use the DFA based hazard recognizer.'
'Use the FDPIC ABI'
'Use the Greedy mode (best local mapping)'
'Use the LLVM representation for assembler and object files'
'Use the MVE code generator for software pipelining'
"Use the basic-block-sections profile to determine the text section prefix for hot functions. Functions with basic-block-sections profile will be placed in `.text.hot` regardless of their FDO profile info. Other functions won't be impacted, i.e., their prefixes will be decided by FDO/sampleFDO profiles."
'Use the current working directory as the base directory of compiled module files.'
'Use the current working directory as the home directory of module maps specified by -fmodule-map-file=<FILE>'
'Use the dependence analysis interface'
'Use the experimental C++ class ABI for classes with virtual tables'
'Use the experimental OpenMP-IR-Builder codegen path.'
'Use the experimental peeling code generator for software pipelining'
'Use the first input module as the merged module'
'Use the full schema for serialization'
'Use the given guard (global, tls) for addressing the stack-protector guard'
'Use the given offset for addressing the stack-protector guard'
'Use the given reg for addressing the stack-protector guard'
'Use the given symbol for addressing the stack-protector guard'
'Use the given vector functions library'
'Use the given vector functions library. Note: -fveclib={ArmPL,SLEEF} implies -fno-math-errno'
'Use the gnu89 inline semantics'
"Use the host's platform-specific path separator character when expanding the __FILE__ macro"
'Use the implementation defaults'
'Use the last modification time of <file> as the build session timestamp'
'Use the llvm.experimental.noalias.scope.decl intrinsic during inlining.'
'Use the named plugin action in addition to the default action'
'Use the named plugin action instead of the default action (use "help" to list available options)'
'Use the native __fp16 type for arguments and returns (and skip ABI-specific lowering)'
'Use the native half type for __fp16 instead of promoting to float'
'Use the native platform for the executor.Requires -orc-runtime'
'Use the new driver for OpenMP offloading.'
'Use the new driver for offloading compilation.'
'Use the new method of lowering partial reductions.'
'Use the new offloading linker to perform the link job.'
'Use the old (incorrect) instruction latency calculation'
'Use the preinliner decisions stored in profile context.'
'Use the remappings described in <file> to match the profile data against names in the program'
'Use the scalar evolution interface'
'Use the specified contextual profile file'
'Use the static host OpenMP runtime while linking.'
"Use the target's default scheduler choice."
"Use the target's platform-specific path separator character when expanding the __FILE__ macro"
'Use the unified LTO pipeline'
'Use this option to enable basic block coverage instrumentation'
'Use this option to enable function entry coverage instrumentation.'
'Use this option to enable temporal instrumentation'
'Use this option to turn off/on warnings about function with samples but without debug information to use those samples. '
'Use this option to turn off/on warnings about profile cfg mismatch.'
'Use this option to turn on/off SELECT instruction instrumentation. '
'Use this option to turn on/off memory intrinsic size profiling.'
'Use this option to turn on/off warnings about incorrect usage of llvm.expect intrinsics.'
'Use this option to turn on/off warnings about missing profile data for functions.'
'Use this to override the target cache line size when specified by the user.'
"Use this to override the target's minimum page size."
"Use this to override the target's predictable branch threshold (%)."
'Use this to skip inserting cache invalidating instructions.'
'Use this to specify the default maximum number of instructions to scan backward from a given instruction, when searching for available loaded value'
'Use this to specify the default trip count of a loop'
'Use this to specify the max. distance between array elements accessed in a loop so that the elements are classified to have temporal reuse'
'Use this unroll count for all loops including those with unroll_and_jam_count pragma values, for testing purposes'
'Use this unroll count for all loops including those with unroll_count pragma values, for testing purposes'
'Use together with -emit-llvm to get pristine LLVM IR from the frontend by not running any LLVM passes at all'
'Use undef when generating programs.'
'Use unified LTO piplines. Ignored unless -thinlto-bc is also specified.'
'Use unique names for basic block sections (ELF Only)'
'Use verbose output'
'Use window algorithm after SMS algorithm fails.'
'Use window algorithm instead of SMS algorithm.'
'Use with -ast-dump or -ast-print to dump/print only AST declaration nodes having a certain substring in a qualified name. Use -ast-list to list all filterable declaration node names.'
'Use zlib'
'Use zstd'
'Used for test purpuses'
'User directory for configuration files'
'User specified cold threshold for instr profile which will override the cold threshold got from profile summary. '
'User supplied asset path to override the default css and js files for html output'
'Uses the source file name instead of the Module hash. This requires that the source filename has a unique name / path to avoid name collisions.'
'VALU instruction count threshold for adjusting wave priority'
'VE Assembly Printer'
'VE DAG->DAG Pattern Instruction Selection'
'VLIW scheduler'
'Validate PCH input files based on content if mtime differs'
'Validate PCM input files based on content if mtime differs'
'Validate that all vtables have type infos in LTO'
'Validate the system headers that a module depends on when loading the module'
'Value for __PIC__'
'Value to pass to hot/cold operator new for cold allocation'
'Value to pass to hot/cold operator new for hot allocation'
'Value to pass to hot/cold operator new for notcold (warm) allocation'
'Variable.'
'Vector functions library'
'Vectorization cost threshold.'
'Vectorize if the invocation count is < than this. 0 disables vectorization.'
'Vectorize load and Store instructions'
'Vectorize load and store instructions'
'Vectorize up to this many bundles.'
'Verbosity level of the contextual profile printer pass.'
'Verbosity of log messages written to stderr'
'Verfiy VPlans after VPlan transforms.'
'Verify AMDGPU HSA Metadata'
'Verify Call Frame Information instructions'
'Verify IR correctness when making sensitive SCEV queries (slow)'
'Verify PredicateInfo in legacy printer pass.'
"Verify ScalarEvolution's backedge taken counts (slow)"
'Verify after each transform'
'Verify device memory post execution against the original output.'
'Verify diagnostic output using comment directives that start with prefixes in the comma-separated sequence <prefixes>'
'Verify dominator info (time consuming)'
'Verify domtree after unrolling'
'Verify during register allocation'
'Verify generated machine code'
'Verify legalizations'
'Verify legalizations and artifact combines'
'Verify loop info (time consuming)'
'Verify loop lcssa form (time consuming)'
'Verify loopinfo after unrolling'
'Verify loops generated Loop Idiom Vectorize Pass.'
'Verify machine code after expanding ARM pseudos'
'Verify machine dominator info (time consuming)'
'Verify machine instrs before and after machine scheduling'
'Verify machine instrs before and after register coalescing'
'Verify region info (time consuming)'
'Verify sanity of PHI instructions during taildup'
'Verify that computeKnownBits() and SimplifyDemandedBits() are consistent'
'Verify that debug locations are handled'
'Verify that narrow int args are properly extended per the SystemZ ABI.'
'Verify that the generated patterns are ordered by increasing latency'
'Verify the binary representation of debug output'
'Verify the detected SCoPs after each transformation'
'Verify the function generated by Polly'
'Verify this pass produces no dead code'
'Version loops if flattened loop could overflow'
'View BFI after MIR loader'
'View BFI before MIR loader'
'View Options'
'View call graph'
'View dominance tree of function'
'View dominance tree of function (with no function bodies)'
'View postdominance tree of function'
'View postdominance tree of function (with no function bodies)'
'View regions of function'
'View regions of function (with no function bodies)'
'View the CFG before DFA Jump Threading'
'View the dependency graph.'
'Viewing options'
'Virtual Register Map'
'Virtual Register Rewriter'
'Volatile loads and stores have acquire and release semantics'
'Volatile loads and stores have standard semantics'
'Volatile specifier.'
'Vreg distance cutoff for insert generation.'
'Vreg# cutoff for insert generation.'
'WARNING: This option will replace your input file with the reduced version!'
"WARNING: You're attempting to print out a bitcode file.\nThis is inadvisable as it may cause display problems. If\nyou REALLY want to taste LLVM bitcode first-hand, you\ncan force output with the `-f' option.\n\n"
'Wait for user input before entering JITed code'
'Wait until all forks of instrumented process will finish (use with instrumentation-sleep-time option)'
'Warn for mismatching a signed and unsigned value'
'Warn for missing parenthesis around predicate registers'
"Warn for register names that aren't contigious"
'Warn if a function definition returns or accepts an object larger in bytes than a given value'
'Warn in ARM, emit implicit ITs in Thumb'
'Warn in ARM, reject in Thumb'
'Warn on equivalent symbols in the output symbol list'
'Warn on input symbols missing from output symbol list'
'Warn on language extensions'
'Warn on use'
'Warning Options'
'Warnings about individual formatting changes needed. Used only with --dry-run or -n'
'Warnings detected.'
'Warnings to generate.'
'Weakly link in the blocks runtime'
'WebAssembly Assmebly Printer'
'WebAssembly Clean Code After Trap'
'WebAssembly Emscripten-style exception handling'
'WebAssembly Emscripten-style setjmp/longjmp handling'
'WebAssembly Exception Information'
'WebAssembly Instruction Selection'
'WebAssembly Late Exception Preparation'
'WebAssembly Lower Emscripten Exceptions / Setjmp / Longjmp'
'WebAssembly Lower RefTypes Int-Ptr Conversions'
'WebAssembly Nullify DBG_VALUE_LISTs'
'WebAssembly exception handling'
'WebAssembly exception handling (legacy)'
'WebAssembly peephole optimizations'
'WebAssembly reference type not allowed in exception specification'
'WebAssembly setjmp/longjmp handling'
'WebAssembly table cannot be declared within a function'
'WebAssembly table must be static'
'WebAssembly: Disable EH pad-first sort order. Testing purpose only.'
'WebAssembly: Disable fallthrough-return optimizations.'
'WebAssembly: output implicit locals in instruction output for test purposes only.'
'WebAssembly: output stack registers in instruction output for test purposes only.'
'Weight for argument embeddings'
'Weight for opcode embeddings'
'Weight for type embeddings'
'Weight of the branch likely to be taken (default = 2000)'
'Weight of the branch unlikely to be taken (default = 1)'
'What is the maximal lookup depth when trying to check for viability of negation sinking.'
'What length to truncate vertex labels to '
'What to do with the summary when running this pass'
"When -frepack-arrays is in effect, 'whole' enables repacking for arrays that are non-contiguous in any dimension, 'innermost' enables repacking for arrays that are non-contiguous in the innermost dimension (the default)"
'When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default'
'When a diagnostic is emitted on an operation, also print the operation as an attached note'
'When a diagnostic is emitted, also print the stack trace as an attached note'
'When creating a PCH, stop PCH generation after #pragma hdrstop.'
'When dfsan-combine-offset-labels-on-gep and/or dfsan-combine-pointer-labels-on-load are false, this flag can be used to re-enable combining offset and/or pointer taint when loading specific constant global variables (i.e. lookup tables).'
'When discriminating instructions with memory operands, ignore prefetch instructions. This ensures the other memory operand instructions have the same identifiers after inserting prefetches, allowing for successive insertions.'
'When displaying an injected source, display the file content'
'When dumping a SymIndexId, dump the full details of the corresponding record'
'When dumping debug chunks, show a different section for each chunk'
"When dumping type records for classes, unions, enums, and structs, don't try to resolve forward references"
'When epilogue vectorization is enabled, and a value greater than 1 is specified, forces the given VF for all applicable epilogue loops.'
'When generating a crash reproducer, attempt to generated a reproducer with the smallest pipeline.'
'When generating nested context-sensitive profiles, always generate extra base profile for function with all its context profiles merged into it.'
'When merging conditional stores, do so even if the resultant basic blocks are unlikely to be if-converted as a result'
'When performing SCEV expansion only if it is cheap to do, this controls the budget that is considered cheap (default = 4)'
'When performing memory disambiguation checks at runtime do not generate more than this number of comparisons (default = 8).'
'When printing IR for print-[before|after]{-all} always print a module IR'
'When printing IR for print-[before|after]{-all} for a loop pass, always print function IR'
'When printing IR for print-ir-[before|after]{-all} always print the top-level operation'
'When printing analysis, include information on every instruction'
'When printing machine IR, annotate instructions and blocks with SlotIndexes when available'
'When printing the IR after a pass, only print if the IR changed'
'When printing the IR after a pass, only print if the pass failed'
'When printing the IR before/after a pass, print file tree rooted at this directory. Use in conjunction with mlir-print-ir-* flags'
'When set to true, const objects with relocatable address values are put into the RO data section.'
'When stubbing functions, replace all uses will null'
'When the basic block contains not more than this number of PHI nodes, perform a (faster!) exhaustive search instead of set-driven one.'
'When the option is false, if the target block is in a loop, the promotion will be disallowed unless the promoted counter  update can be further/iteratively promoted into an acyclic  region.'
'When this option is on, the annotated branch probability will be emitted as optimization remarks: -{Rpass|pass-remarks}=pgo-instrumentation'
'When to emit DWARF unwind (EH frame) info'
'When to use colors in diagnostics'
'When true, SLP vectorizer bypasses profitability checks based on heuristics and makes vectorization decision via cost modeling.'
'When used with filetype=obj, emit an object file which can be used with an incremental linker'
'When used with filetype=obj, relax all fixups in the emitted object file'
'When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1'
'When using a PCH, skip tokens until after a #pragma hdrstop.'
'Where to run polly in the pass pipeline'
'Whether has closed-world assumption at link time'
'Whether inline replay should be applied to the entire Module or just the Functions (default) that are present as callers in remarks during cgscc inlining.'
'Whether inline replay should be applied to the entire Module or just the Functions (default) that are present as callers in remarks during sample profile inlining.'
'Whether new header will depend on old header. If true, clang-move will add #include of old header to new header.'
'Whether old header will depend on new header. If true, clang-move will add #include of new header to old header.'
'Whether or not to compute detailed function properties.'
'Whether or not to enable features under development for the ML regalloc advisor'
'Whether or not we should insert assumes of conditions of predicated guards'
'Whether or not we should predicate guards expressed as widenable branches to deoptimize blocks'
'Whether or not we should widen guards  expressed as branches by widenable conditions'
'Whether to apply ext-tsp placement for instances w/o profile'
'Whether to build a relocatable precompiled header'
'Whether to distribute into a loop that may not be if-convertible by the loop vectorizer'
'Whether to emit DWARF EH frame entries.'
'Whether to generate default bounds for arrays.'
'Whether to include the lower dimensions extents in the stride.'
'Whether to minimize added include paths'
'Whether to perform binary concatenation'
'Whether to perform binary extraction'
'Whether to try to emit Compact Unwind for non canonical entries.'
'Whether to use the address from fix.box in data clause operations.'
'Whether to use the bareptr calling convention on the host (warning this should be false until the GPU layering is fixed)'
'Whether to use the bareptr calling convention on the kernel (warning this should be false until the GPU layering is fixed)'
'Whether to use the cost heuristic to make choices as we traverse the search space using the exact solver. Defaulted to on, and if turned off, we will use the node order -- attempting to put the later nodes in the later sched groups. Experimentally, results are mixed, so this should be set on a case-by-case basis.'
'Whether to use the exponential time solver to fit the instructions to the pipeline as closely as possible.'
'Whether we should inject new invariants and unswitch them to eliminate some existing (non-invariant) conditions.'
'Which DWARF linkage-name attributes to emit.'
'Which dependence analysis should loop fusion use?'
"Which overload candidates to show when overload resolution fails. Defaults to 'all'"
'Which thread-local storage dialect to use for dynamic accesses of TLS variables'
'Which unit to use for fp math'
'Widen sub-dword constant address space loads in AMDGPUCodeGenPrepare'
'Widen sub-dword constant address space loads in AMDGPULateCodeGenPrepare'
"Widen the loop induction variables, if possible, so overflow checks won't reject flattening"
'Widen uniform 16-bit instructions to 32-bit in AMDGPUCodeGenPrepare'
'Windows exception model'
'With -globals, only dump globals whose name matches the given value'
'With PGO, include profile count in optimization remarks'
'Work around Cortex-A57 Erratum 1742098 (ARM only)'
'Work around Cortex-A72 Erratum 1655431 (ARM only)'
'Work around VLLDM erratum CVE-2021-35465 (ARM only)'
'Work with `--skip-symbolization` or `--unsymbolized-profile` to write/read the offset instead of virtual address.'
'Workaround Cortex-A53 erratum 835769 (AArch64 only)'
"Wouldn't use segmented stack"
'Write Bitcode'
'Write a compilation database entry per input'
'Write a depfile containing user and system headers'
'Write a depfile containing user headers'
'Write assembly to file for input to assemble jobs'
'Write current time into COFF output (default)'
'Write depfile output from -MMD, -MD, -MM, or -M to <file>'
'Write extracted files to a static archive'
'Write lazy-function executions to a CSV file as (JITDylib, function) pairs'
'Write linked LTO module to file before optimize'
'Write merged LTO module to file before CodeGen'
'Write minimized bitcode to <file> for the ThinLTO thin link only'
'Write out individual imports files via InProcessThinLTO. Has no effect unless specified with -thinlto-emit-indexes or -thinlto-distributed-indexes'
'Write out individual index and import files for the distributed backend case'
'Write out individual index files via InProcessThinLTO'
'Write output as LLVM assembly'
'Write output as ThinLTO-ready bitcode'
'Write output to <file>'
'Write output to <file>.'
'Write relative block frequency to function summary '
'Write summary to given YAML file after running pass'
'Write summary to given bitcode or YAML file after running pass. Output file format is deduced from extension: *.bc means writing bitcode, otherwise YAML'
'Write the previous version of indexed format, to enable some forward compatibility.'
'Writes always set the type'
'X86 Assembly Printer'
'X86 Call Frame Optimization'
'X86 DAG->DAG Instruction Selection'
'X86 Domain Reassignment Pass'
'X86 DynAlloca Expander'
'X86 EFLAGS copy lowering'
'X86 Execution Domain Fix'
'X86 FP Stackifier'
'X86 LVI load hardening'
'X86 LVI ret hardener'
'X86 Partial Reduction'
'X86 Return Thunks'
'X86 Speculative Execution Side Effect Suppression'
'X86 Suppress APX features for relocation'
'X86 cmov Conversion'
'X86 optimize LEA pass'
'X86 pseudo instruction expansion pass'
'X86 speculative load hardener'
'X86: Disable LEA optimizations.'
'X86: Disable Store Forwarding Blocks fixup.'
'X86: Disable Virtual Register Reassignment.'
'X86: Number of instructions backward to inspect for store forwarding blocks.'
'X86: enable AMX scalarizition.'
'XCore Assembly Printer'
'XCore DAG->DAG Pattern Instruction Selection'
'XRay Tools\n\n  This program consolidates multiple XRay trace processing tools for convenient access.\n'
'Xtensa Assembly Printer'
'YAML'
'Yaml database created by find-all-symbols'
'Yaml database, with fuzzy-matched names'
'Zero initialize globals without default initialization'
'Zero initialize globals without default initialization (default)'
'Zero line numbers.'
'Zero out the discriminator bits for the FS discrimiantor pass beyond this value. The enum values are defined in Support/Discriminator.h'
'[<input file>,...] (deprecated)'
'[<offload kind>-<target triple>,...]'
'[<output file>,...] (deprecated)'
'[@<file>] [<file> ...]'
'[LICM & MemorySSA] When MSSA in LICM is disabled, this has no effect. When MSSA in LICM is enabled, then this is the maximum number of accesses allowed to be present in a loop in order to enable memory promotion.'
'[WIP] Tries to hide the latency of host to device memory transfers'
'[[]] attributes are a C++11 extension'
'[[]] attributes are a C23 extension'
'[[]] attributes are incompatible with C standards before C23'
'[[]] attributes are incompatible with C++ standards before C++11'
'[code to run]'
'[ignorelist file]'
'[input bitcode]...'
'[no]neon is not accepted as modifier, please use [no]simd instead'
'\\%0 used with no following hex digits'
"\\%0 used with no following hex digits; treating as '\\' followed by identifier"
'^^ is a reserved operator in OpenCL'
'_Atomic cannot be applied to %select{incomplete |array |function |reference |atomic |qualified |sizeless ||integer |}0type %1 %select{|||||||which is not trivially copyable||in C23}0'
'_GLOBAL_OFFSET_TABLE_'
'_Pragma takes a parenthesized string literal'
'__CUDA_ARCH'
'__DATA'
'__LINKEDIT'
'__VA_ARGS__ can only appear in the expansion of a C99 variadic macro'
'__VA_OPT__ can only appear in the expansion of a variadic macro'
'__VA_OPT__ cannot be nested within its own replacement tokens'
'__arm_agnostic("sme_za_state") cannot share ZA state with its caller'
'__arm_agnostic("sme_za_state") is not supported together with __arm_new("za") or __arm_new("zt0")'
'__asm used with no assembly instructions'
'__block attribute not allowed on declaration with a variably modified type'
'__block attribute not allowed, only allowed on local variables'
'__block variable %0 cannot be captured in a %select{lambda expression|captured statement}1'
'__builtin_btf_type_id argument %0 not a constant'
'__builtin_get_vtable_pointer requires an argument of%select{| polymorphic}0 class pointer type, but %1 %select{was provided|has no virtual methods}0'
'__builtin_get_vtable_pointer requires an argument with a complete type, but %0 is incomplete'
'__builtin_longjmp is not supported for the current target'
"__builtin_mul_overflow does not support 'signed _BitInt' operands of more than %0 bits"
'__builtin_preserve_enum_value argument %0 invalid'
'__builtin_preserve_enum_value argument %0 not a constant'
'__builtin_preserve_field_info argument %0 not a constant'
'__builtin_preserve_field_info argument %0 not a field access'
'__builtin_preserve_type_info argument %0 invalid'
'__builtin_preserve_type_info argument %0 not a constant'
'__builtin_setjmp is not supported for the current target'
'__constant__, __device__, and __managed__ are not allowed on non-static local variables'
'__constant__, __device__, and __shared__ variables must use default address space'
'__declspec attribute %0 is not supported'
'__declspec attributes must be an identifier or string literal'
'__final is a GNU extension, consider using C++11 final'
'__grid_constant__ is only allowed on const-qualified kernel parameters'
'__has_warning expected option name (e.g. "-Wundef")'
'__shared__ local variables not allowed in %select{__device__|__global__|__host__|__host__ __device__}0 functions'
"__shared__ variable %0 cannot be 'extern'"
'__spirv_backend_service_fun'
'__sync builtin operation must have natural alignment (consider using __atomic)'
'__weak attribute cannot be specified on a field declaration'
'__weak attribute cannot be specified on an automatic variable when ARC is not enabled'
'`#pragma const_seg` for section %1 will not apply to %0 due to the presence of a %select{mutable field||non-trivial constructor|non-trivial destructor}2'
'`interrupt_save_fp` only applies to targets that have a VFP unit enabled for this compilation; this will be treated as a regular `interrupt` attribute'
'a %select{function|block}0 declaration without a prototype is deprecated %select{in all versions of C|}0'
"a %select{pack indexing|'decltype'}0 specifier cannot be used in a declarative nested name specifier"
'a concept definition cannot refer to itself'
'a constant expression cannot modify an object that is visible outside that expression'
'a declarative nested name specifier cannot name an alias template'
'a firstprivate variable with incomplete type %0'
'a friend declaration that befriends a template must contain exactly one type-specifier'
'a function %select{declaration|definition}0 without a prototype is deprecated in all versions of C %select{and is not supported in C23|and is treated as a zero-parameter prototype in C23, conflicting with a %select{previous|subsequent}2 %select{declaration|definition}3}1'
'a function type is not allowed here'
'a getter method is needed to perform a compound assignment on a property'
'a lambda expression cannot appear in this context'
'a lambda expression may not appear inside of a constant expression'
'a lambda parameter cannot shadow an explicitly captured entity'
'a lambda with an explicit object parameter cannot be mutable'
'a lastprivate variable with incomplete type %0'
'a linear variable with incomplete type %0'
'a module can only be re-exported as another top-level module'
'a non-type template parameter cannot have type %0'
'a non-type template parameter cannot have type %0 before C++20'
'a parameter list without types is only allowed in a function definition'
'a parameter pack may not be accessed at an out of bounds index'
'a private variable with incomplete type %0'
'a randomized struct can only be initialized with a designated initializer'
'a reduction list item with incomplete type %0'
'a requires expression cannot have an explicit object parameter'
'a requires expression must contain at least one requirement'
"a space is required between a right angle bracket and an equals sign (use '> =')"
"a space is required between consecutive right angle brackets (use '> >')"
'a static lambda cannot have any captures'
'a static_assert declaration cannot be a template'
'a template argument list is expected after a name prefixed by the template keyword'
'a type named %0 is hidden by a declaration in a different namespace'
'a type specifier is required for all declarations'
'a typedef cannot be a template'
'absolute value function %0 given an argument of type %1 but has parameter of type %2 which may cause truncation of value'
"abstract class is marked '%select{final|sealed}0'"
'access declarations are deprecated; use using declarations instead'
'access qualifier %0 cannot be used for %1 %select{|prior to OpenCL C version 2.0 or in version 3.0 and without __opencl_c_read_write_images feature}2'
'access qualifier can only be used for pipe and image type'
'access specifier can only have annotation attributes'
'access specifiers are a clang HLSL extension'
'accessing a member of an atomic structure or union is undefined behavior'
'accessing inaccessible direct base %0 of %1 is a Microsoft extension'
"acquiring %0 '%1' requires negative capability '%2'"
"acquiring %0 '%1' that is already held"
'action %0 not compiled in'
"active '%0' clause defined here"
'add \'__arm_preserves("za")\' to the callee if it preserves ZA'
"add 'constexpr'"
"add 'export' here if this is intended to be a module interface unit"
"add 'module;' to the start of the file to introduce a global module fragment"
"add 'typename' to treat this using declaration as a type"
"add 'u8' prefix to form a 'char8_t' string literal"
"add 'void' to the parameter list to turn an old-style K&R function declaration into a prototype"
"add a '@synthesize' directive"
'add a deduction guide to suppress this warning'
'add a deprecation attribute to the declaration to silence this warning'
'add a pair of parentheses to declare a variable'
'add a super class to fix this problem'
'add a variable name to declare a %0 initialized with %1'
"add an explicit capture of 'this' to capture '*this' by reference"
'add an explicit instantiation declaration to suppress this warning if %q0 is explicitly instantiated in another translation unit'
'add any string to tag this execution in the output binary via bolt info section'
'add basic block instructions as tool tips on nodes'
'add enclosing parentheses to perform a function-style cast'
'add explicit braces to avoid dangling else'
'add masking cost for i1 vectors'
"add parentheses after the '!' to evaluate the %select{comparison|bitwise operator}0 first"
'add parentheses around left hand side expression to silence this warning'
"add the %select{'require_constant_initialization' attribute|'constinit' specifier}0 to the initializing declaration here"
'adding %0 to %1 might cause circular dependency in container'
'adding %0 to a string does not append to the string'
'adding %0 to a string pointer does not append to the string'
'addition of default argument on redeclaration makes this constructor a %select{default|copy|move}0 constructor'
'address argument to %select{atomic|__sync}0 operation must be a pointer to a non address discriminated type (%1 invalid)'
'address argument to atomic builtin cannot be const-qualified (%0 invalid)'
'address argument to atomic builtin must be a pointer %select{|to a non-zero-sized object }1(%0 invalid)'
'address argument to atomic builtin must be a pointer to 1,2,4,8 or 16 byte type (%0 invalid)'
'address argument to atomic builtin must be a pointer to integer or pointer (%0 invalid)'
'address argument to atomic builtin must be a pointer to integer, floating-point or pointer (%0 invalid)'
'address argument to atomic operation must be a pointer to %select{|atomic }0integer (%1 invalid)'
'address argument to atomic operation must be a pointer to %select{|atomic }0integer or pointer (%1 invalid)'
'address argument to atomic operation must be a pointer to %select{|atomic }0integer or supported floating point type (%1 invalid)'
'address argument to atomic operation must be a pointer to %select{|atomic }0integer, pointer or supported floating point type (%1 invalid)'
'address argument to atomic operation must be a pointer to _Atomic type (%0 invalid)'
'address argument to atomic operation must be a pointer to a trivially-copyable type (%0 invalid)'
'address argument to atomic operation must be a pointer to non-%select{const|constant}0 _Atomic type (%1 invalid)'
'address argument to atomic operation must be a pointer to non-const type (%0 invalid)'
'address argument to load or store exclusive builtin must be a pointer to 1,2,4 or 8 byte type (%0 invalid)'
'address argument to nontemporal builtin must be a pointer (%0 invalid)'
'address argument to nontemporal builtin must be a pointer to integer, float, pointer, or a vector of such types (%0 invalid)'
"address of %select{'%1'|function '%1'|array '%1'|lambda function pointer conversion operator}0 will always evaluate to 'true'"
'address of %select{bit-field|vector element|property expression|register variable|matrix element}0 requested'
"address of non-static constexpr variable %0 may differ on each invocation of the enclosing function; add 'static' to give it a constant address"
'address of overloaded function %0 cannot be cast to type %1'
'address of overloaded function %0 cannot be converted to type %1'
'address of overloaded function %0 cannot be static_cast to type %1'
'address of overloaded function %0 does not match required type %1'
'address of overloaded function %0 is ambiguous'
'address space is larger than the maximum supported (%0)'
'address space is negative'
'address taken in non-type template argument for template parameter of reference type %0'
'address-of operator cannot be applied to a call to a function with unknown return type'
'adjust block counts based on outgoing branch counts'
'adjust function counts based on basic blocks execution count'
'adjust function profile after inlining'
"after modifying system headers, please delete the module cache at '%0'"
'aggregate basic samples (without LBR info)'
'aggregate initialization of type %0 from a parenthesized list of values is a C++20 extension'
'aggregate initialization of type %0 with user-declared constructors is incompatible with C++20'
'aggressive strategy'
'aggressively inline everything'
'aggressively split jump tables section based on usage of the tables'
'algorithm used to reorder data sections'
'alias declaration cannot be a pack expansion'
'alias declaration in this context is a C++23 extension'
'alias declaration in this context is incompatible with C++ standards before C++23'
'alias declarations are a C++11 extension'
'alias declarations are incompatible with C++98'
'alias definition of %0 after tentative definition'
'alias for --icp-jump-tables-targets'
'alias for --indirect-call-promotion-calls-topn'
'alias for --indirect-call-promotion-jump-tables-topn'
'alias for --indirect-call-promotion-mispredict-threshold'
'alias for --indirect-call-promotion-topn'
'alias for --indirect-call-promotion-use-mispredicts'
'alias for -aarch64-streaming-hazard-size'
'alias for -data'
'alias for -instr_map'
'alias for -perfdata'
'alias for -symbolize'
'alias to a variable in a common section is not allowed'
'aliases are not supported on darwin'
'align basic blocks'
'align functions at a given value (relocation mode)'
'align only blocks with frequency larger than containing function execution frequency specified in percent. E.g. 1000 means aligning blocks that are 10 times more frequently executed than the containing function.'
"aligned %select{allocation|deallocation}0 function of type '%1' is %select{only|not}4 available on %2%select{ %3 or newer|}4"
'aligned clause will be ignored because the requested alignment is not a power of 2'
'alignment (%0) of thread-local variable %1 is greater than the maximum supported alignment (%2) for a thread-local variable on this target'
"alignment is not a power of 2 in '%0'"
'alignment of .text section'
'alignment of 16 bytes for a struct member is not binary compatible with IBM XL C/C++ for AIX 16.1.0 or older'
'alignof expressions are incompatible with C++98'
'all paths through this function will call itself'
"allocate directive specifies %select{default|'%1'}0 allocator while previously used %select{default|'%3'}2"
'allocated size %0 is not a multiple of size %1 of element type %2'
"allocated with 'new%select{[]|}0' here"
'allocating an object of abstract class type %0'
'allocation of %select{incomplete|sizeless}0 type %1'
'allocation performed here was not deallocated%plural{0:|: (along with %0 other memory leak%s0)}0'
"allocator must be specified in the 'uses_allocators' clause"
"allocator with the 'thread' trait access has unspecified behavior on '%0' directive"
"allocators used in 'uses_allocators' clause cannot appear in other data-sharing or data-mapping attribute clauses"
'allow processing of stripped binaries'
'allow to snippet generator to generate at most that many configs'
"allowable client missing from %0: '%1'"
"allowable clients do not match: '%0' (provided) vs '%1' (found)"
"already inside '#pragma clang arc_cf_code_audited'"
"already inside '#pragma clang assume_nonnull'"
"already inside '#pragma unsafe_buffer_usage'"
'also accessed here'
'also found'
'always apply unchecked-ld-st'
'always perform sctc'
'always replace exit value whenever possible'
'always use long jumps/nops for Linux kernel static keys'
'always_inline function %0 has new za state'
'always_inline function %0 has new zt0 state'
'always_inline function %1 and its caller %0 have mismatching %2 attributes'
'always_inline function %1 and its caller %0 have mismatching %2 attributes, inlining may change runtime behaviour'
"always_inline function %1 requires target feature '%2', but would be inlined into function %0 that is compiled without support for '%2'"
'ambiguity is between a regular call to this operator and a call with the argument order reversed'
'ambiguous candidate function with reversed arguments'
'ambiguous cast from base %0 to derived %1:%2'
'ambiguous constructor call when %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1'
'ambiguous conversion for %select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2'
'ambiguous conversion from derived class %0 to base class %1:%2'
'ambiguous conversion from pointer to member of %select{base|derived}0 class %1 to pointer to member of %select{derived|base}0 class %2:%3'
'ambiguous conversion from type %0 to an integral or unscoped enumeration type'
'ambiguous conversion of array size expression of type %0 to an integral or enumeration type'
'ambiguous conversion of delete expression of type %0 to a pointer'
'ambiguous deduction for template arguments of %0'
'ambiguous expansion of macro %0'
"ambiguous marker '%0' is defined here"
'ambiguous member function specialization %q0 of %q1'
'ambiguous partial specializations of %0'
"ambiguous reference to placeholder '_', which is defined multiple times"
'ambiguous use of internal linkage declaration %0 defined in multiple modules'
'ambiguous vftable component for %0 introduced via covariant thunks; this is an inherent limitation of the ABI'
'an array type is not allowed here'
'an attribute list cannot appear here'
'an attribute specifier sequence attached to a structured binding declaration is a C++2c extension'
'an attribute specifier sequence attached to a structured binding declaration is incompatible with C++ standards before C++2c'
'an explicit object parameter can only appear as the first parameter of a member function'
'an explicit object parameter can only appear as the first parameter of the %select{function|lambda}0'
'an explicit object parameter cannot appear in a %select{constructor|destructor}0'
'an explicit object parameter cannot appear in a %select{static|virtual|non-member}0 %select{function|lambda}1'
"an explicitly-defaulted %select{copy|move}0 assignment operator may not have 'const'%select{, 'constexpr'|}1 or 'volatile' qualifiers"
'an explicitly-defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 cannot be variadic'
'an explicitly-defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 cannot have default arguments'
'an initializer for a delegating constructor must appear alone'
'an inline asm block cannot have an operand which is a bit-field'
'an unevaluated string literal cannot be a user-defined literal'
'an unevaluated string literal cannot have an encoding prefix'
"analyzer constraint manager 'z3' is only available if LLVM was built with -DLLVM_ENABLE_Z3_SOLVER=ON"
"analyzer-config option '%0' has a key but no value"
"analyzer-config option '%0' should contain only one '='"
'angle brackets contain both a %select{type|protocol}0 (%1) and a %select{protocol|type}0 (%2)'
'angle-bracketed include <%0> cannot be aliased to double-quoted include "%1"'
'annotate %select{%1|anonymous %1}0 with an availability attribute to silence this warning'
"annotating the 'if %select{constexpr|consteval}0' statement here"
'annotating the infinite loop here'
'annotation-type remark to collect count for'
'anonymous %select{structs|structs and classes}0 must be %select{struct or union|class}0 members'
'anonymous %select{structs|unions}0 are a Microsoft extension'
'anonymous %select{struct|union}0 can only contain non-static data members'
"anonymous %select{struct|union}0 cannot be '%1'"
'anonymous %select{struct|union}0 cannot contain a %select{private|protected}1 data member'
'anonymous bit-field cannot have a default member initializer'
'anonymous bit-field cannot have qualifiers'
'anonymous bit-field has negative width (%0)'
'anonymous bit-field has non-integral type %0'
'anonymous namespace begins here'
'anonymous namespaces cannot be exported'
'anonymous non-C-compatible type given name for linkage purposes by %select{typedef|alias}0 declaration after its linkage was computed; add a tag name here to establish linkage prior to definition'
'anonymous non-C-compatible type given name for linkage purposes by %select{typedef|alias}0 declaration; add a tag name here'
'anonymous property is not supported'
'anonymous structs are a C11 extension'
'anonymous structs are a GNU extension'
'anonymous types declared in an anonymous %select{struct|union}0 are an extension'
'anonymous union at class scope must not have a storage specifier'
'anonymous unions are a C11 extension'
"anonymous unions at namespace or global scope must be declared 'static'"
'append PID to saved profile file name (default: false)'
"application of '%select{alignof|sizeof}1' to interface %0 is not supported on this architecture and platform"
'apply additional analysis to remove stores (experimental)'
'apply unchecked-ld-st when the target is definitely within range'
'applying attribute %0 to a declaration is deprecated; apply it to the type instead'
"architecture '%0' does not support '%1' execution mode"
"architectures do not match: '%0' (provided) vs '%1' (found)"
'architectures of the coverage mapping binaries'
'argument %0 is not an unqualified class type'
'argument %0 must be constant integer 1 or -1'
'argument %0 of type %1 with mismatched bound'
'argument %0 to %1 must be a 2-bit unsigned literal (i.e. 0, 1, 2 or 3)'
"argument %0 to 'preferred_name' attribute is not a typedef for a specialization of %1"
'argument %0 value should represent a contiguous bit field'
"argument '%0' is deprecated%select{|, use '%2' instead}1"
"argument '%0' is deprecated, %1"
"argument '%0' requires profile-guided optimization information"
"argument '%select{X|Y|Z}0' to numthreads attribute cannot exceed %1"
"argument '-Ofast' is deprecated; use '-O3 -ffast-math -fstack-arrays' for the same behavior, or '-O3 -fstack-arrays' to enable only conforming optimizations"
"argument '-Ofast' is deprecated; use '-O3 -ffast-math' for the same behavior, or '-O3' to enable only conforming optimizations"
"argument may not have 'void' type"
'argument must be a function'
'argument must be a string literal%select{| of char type}0'
"argument not in expected state; expected '%0', observed '%1'"
"argument of OpenMP clause '%0' must reference the same object in all threads"
'argument of a linear clause should be of integral or pointer type, not %0'
'argument of a reduction clause of a %0 construct must not appear in a firstprivate clause on a task construct'
'argument of aligned clause should be array%select{ or pointer|, pointer, reference to array or reference to pointer}1, not %0'
'argument required after attribute'
'argument sensitivity is %select{unspecified|private|public|sensitive}0, but it should be %select{unspecified|private|public|sensitive}1'
'argument should be a multiple of %0'
'argument should be a power of 2'
'argument should be an 8-bit value shifted by a multiple of 8 bits'
'argument should be an 8-bit value shifted by a multiple of 8 bits, or in the form 0x??FF'
'argument should be the value 0, 90, 180 or 270'
'argument should be the value 90 or 270'
'argument to #pragma section is not valid for this target: %0'
'argument to %0 must be a constant integer'
"argument to %select{'code_seg'|'section'}1 attribute is not valid for this target: %0"
"argument to '#pragma unroll' should not be in parentheses in CUDA C/C++"
"argument to '%0' clause must be a %select{non-negative|strictly positive}1 integer value"
"argument to '%0' clause requires a value that can be represented by a 64-bit"
"argument to '%0' is missing (expected %1 value%s1)"
"argument to '__ptrauth' must be an integer constant expression"
"argument to 'gang' clause dimension must be %select{a constant expression|1, 2, or 3: evaluated to %1}0"
"argument to 'operator<=>' %select{cannot be narrowed from type %1 to %2|evaluates to %1, which cannot be narrowed to type %2}0"
"argument to 'sizeof' in %0 call is the same pointer type %1 as the %select{destination|source}2; expected %3 or an explicit length"
'argument to __builtin_longjmp must be a constant 1'
'argument to __builtin_verbose_trap must %select{be a pointer to a constant string|not contain $}0'
"argument to atomic builtin of type '_BitInt' is not supported"
'argument to ptrauth_sign_constant must refer to a global variable or function'
"argument type %0 doesn't match specified %1 type tag %select{that requires %3|}2"
'argument type %0 is incomplete'
'argument type %0 is not a real floating point type'
"argument unused during compilation: '%0'"
'argument value %0 is outside the valid range [%1, %2]'
'argument value %0 will result in undefined behaviour'
'arguments are of different types%diff{ ($ vs $)|}0,1'
"arguments of '#pragma omp %0' cannot be of reference type %1"
"arguments of '#pragma omp %0' must have %select{global storage|static storage duration}1"
"arguments of OpenMP clause '%0' for 'min' or 'max' must be of %select{scalar|arithmetic}1 type"
"arguments of OpenMP clause '%0' in '#pragma omp %2' directive cannot be of variably-modified type %1"
"arguments of OpenMP clause '%0' with bitwise operators cannot be of floating type"
'arguments to __annotation must be wide string constants'
"arithmetic involving unrelated objects '%0' and '%1' has unspecified value"
'arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension'
'arithmetic on a pointer to %select{an incomplete|sizeless}0 type %1'
'arithmetic on addresses of potentially overlapping literals has unspecified value'
'arithmetic on pointer to interface %0, which is not a constant size for this architecture and platform'
'arithmetic on%select{ a|}0 pointer%select{|s}0 to void'
'arithmetic on%select{ a|}0 pointer%select{|s}0 to void is a GNU extension'
'arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2'
'arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2 is a GNU extension'
'array %0 declared here'
"array 'new' cannot have initialization arguments"
'array argument is too small; %select{contains %0 elements|is of size %0}2, callee requires at least %1'
'array backing %select{initializer list subobject of the allocated object|the allocated initializer list}0 will be destroyed at the end of the full-expression'
'array bound cannot be deduced from a default member initializer'
'array designator cannot initialize non-array type %0'
'array designator index (%0) exceeds array bounds (%1)'
'array designator range [%0, %1] is empty'
"array designator value '%0' is negative"
'array designators are a C99 extension'
'array has %select{incomplete|sizeless}0 element type %1'
'array index %0 is before the beginning of the array'
'array index %0 is past the end of the array (that has type %1%select{|, cast to %3}2)'
'array index %0 refers past the last possible element for an array in %1-bit address space containing %2-bit (%3-byte) elements (max possible %4 element%s5)'
'array initializer must be an initializer list%select{| or string literal| or wide string literal}0'
'array is too large (%0 elements)'
'array of %0 type is invalid in OpenCL'
'array of abstract class type %0'
'array of interface %0 is invalid (probably should be an array of pointers)'
'array parameter is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)'
'array section %select{lower bound|length}0 is not an integer'
"array section %select{lower bound|length}0 is of type 'char'"
'array section does not specify contiguous storage'
'array section does not specify length for outermost dimension'
'array section must be a subset of the original array'
'array shaping dimension is evaluated to a non-positive value %0'
'array shaping operation dimension is not an integer'
'array size expression has incomplete class type %0'
'array size expression must have integral or %select{|unscoped }0enumeration type, not %1'
'array size expression of type %0 requires explicit conversion to type %1'
'array size is negative'
'array size must be specified in new expression with no initializer'
'array subscript is not an integer'
"array subscript is of type 'char'"
'array type %0 is not assignable'
'array types cannot be value-initialized'
'array-to-pointer decay of array member without known bound is not supported'
"as specified in %select{'collapse'|'ordered'|'collapse' and 'ordered'}0 clause%select{||s}0"
'ascending'
'asm constraint has an unexpected number of alternatives: %0 vs %1'
'asm operand has incomplete type %0'
'asm operand name "%0" first referenced here'
'asm-specifier for input or output variable conflicts with asm clobber list'
'assertion failed during evaluation of constant expression'
'assigning %select{array literal|dictionary literal|numeric literal|boxed expression|<should not happen>|block literal}0 to a weak %select{property|variable}1; object will be released after assignment'
'assigning %select{field|instance variable}0 to itself'
'assigning retained object to %select{weak|unsafe_unretained}0 %select{property|variable}1; object will be released after assignment'
'assigning retained object to unsafe property; object will be released after assignment'
"assigning to 'readonly' return result of an Objective-C message not allowed"
'assigning value of preferred signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values'
'assigning value of signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values'
'assignment of a weak-unavailable object to a __weak object'
"assignment to Objective-C's isa is deprecated in favor of object_setClass()"
'assignment to cast is illegal, lvalue casts are not supported'
'assignment would change active union member during the initialization of a different member of the same union'
'assume the ABI is never violated'
'assumption evaluated to false'
'assumption is ignored because it contains (potential) side-effects'
'at least one argument of MTE builtin function must be a pointer (%0, %1 invalid)'
'at most one defaultmap clause for each variable-category can appear on the directive'
"at most one overload for a given name may lack the 'overloadable' attribute"
"at most three expressions are allowed in '%0' clause in 'target teams ompx_bare' construct"
'atomic %select{load|store}0 requires runtime support that is not available for this target'
"atomic by default property %0 has a user defined %select{getter|setter}1 (property should be marked 'atomic' if this is intended)"
"atomic constraint must be of type 'bool' (found %0)"
'atomic memory operand must have a power-of-two size'
'atomic property of reference type %0 cannot have non-trivial assignment operator'
"atomic types are not supported in '%0'"
'atomic variable can be %select{assigned|initialized}0 to a variable only in global address space'
'attempt to call %0 on non-heap %select{object %2|object: block expression|object: lambda-to-function-pointer conversion}1'
'attempt to specialize declaration here'
'attempt to use a deleted function%select{|: %1}0'
'attempt to use a poisoned identifier'
'attempting to use the forward class %0 as superclass of %1'
'attribute %0 after definition is ignored'
'attribute %0 can be used only on HLSL intangible type %1'
'attribute %0 can only be applied to @protocol definitions, not forward declarations'
'attribute %0 can only be applied to an OpenCL kernel function'
'attribute %0 cannot appear more than once on a declaration'
'attribute %0 cannot be applied to %1'
'attribute %0 cannot be applied to %select{functions|Objective-C method}1 without return value'
"attribute %0 cannot be applied to a 'void' parameter"
'attribute %0 cannot be used as an attribute pack'
'attribute %0 cannot have an argument list'
'attribute %0 does not support argument pack expansion'
"attribute %0 has no effect when annotating an 'if %select{constexpr|consteval}1' statement"
'attribute %0 has no effect when annotating an infinite loop'
'attribute %0 here'
'attribute %0 ignored, because it cannot be applied to a type'
'attribute %0 ignored, because it cannot be applied to omitted return type'
'attribute %0 ignored, because it is not attached to a declaration'
'attribute %0 is already applied'
'attribute %0 is already applied with different arguments'
'attribute %0 is ignored, place it after "%select{class|struct|interface|union|enum|enum class|enum struct}1" to apply attribute to type declaration'
"attribute %0 is not supported by '#pragma clang attribute'"
'attribute %0 is supported in the OpenCL version %1%select{| onwards}2'
"attribute %0 is unsupported in '%1' shaders, requires %select{|one of the following: }2%3"
'attribute %0 only applies to %1'
"attribute %0 only applies to a field or parameter of type '%1'"
'attribute %0 requires shader model %1 or greater'
'attribute %0 with %1 arguments requires shader model %2 or greater'
'attribute %q0 cannot be applied to a deleted function'
'attribute %q0 cannot be applied to member of %q1 class'
"attribute '%0' on function does not match previous declaration"
"attribute '%0' on overriding function does not match base declaration"
"attribute '%0' should not be added via type conversion"
"attribute '%select{|target|cpu_specific|cpu_dispatch|target_clones|target_version}0' multiversioned functions do not yet support %select{function templates|virtual functions|deduced return types|constructors|destructors|deleted functions|defaulted functions|constexpr functions|consteval function|lambdas}1"
"attribute '%select{|target|cpu_specific|cpu_dispatch|target_clones|target_version}0' multiversioning cannot be combined with attribute %1"
"attribute 'msvc::constexpr' cannot be applied to the %select{constexpr|consteval|virtual}0 function %1"
"attribute 'readonly' of property %0 restricts attribute 'readwrite' of property inherited from %1"
'attribute declaration must precede definition'
'attribute is here'
"attribute is ignored on this statement as it only applies to functions; use '%0' on statements"
'attribute only applies to output parameters'
'attribute with scope specifier cannot follow default scope specifier'
'attributes \'%0("%2")\' and \'%1("%2")\' are mutually exclusive'
'attributes cannot be specified on a nested namespace definition'
'attributes cannot be specified on namespace alias'
'attributes on %select{a namespace|an enumerator}0 declaration are a C++17 extension'
'attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17'
'authenticating a null pointer will almost certainly trap'
'auto property synthesis is synthesizing property not explicitly synthesized'
'auto property synthesis will not synthesize property %0 because it cannot share an ivar with another synthesized property'
"auto property synthesis will not synthesize property %0 because it is 'readwrite' but it will be synthesized 'readonly' via another property"
'auto property synthesis will not synthesize property %0 declared in protocol %1'
'auto property synthesis will not synthesize property %0; it will be implemented by its superclass, use @dynamic to acknowledge intention'
'automatic variable qualified with an%select{| invalid}0 address space'
'autosynthesized property %0 will use %select{|synthesized}1 instance variable %2, not existing instance variable %3'
'availability does not match previous declaration'
'available multilibs are:%0'
"backend data layout '%0' does not match expected target description '%1'"
'backslash and newline separated by space'
'bad receiver type %0'
"base %0 is marked '%select{final|sealed}1'"
'base class %0 has %select{private|protected}1 destructor'
'base class %0 has a flexible array member'
'base class %0 is uninitialized when used here to access %q1'
'base class %0 specified here'
'base class %0 specified more than once as a direct base class'
'base class has incomplete type'
'base class initializer %0 names both a direct base class and an inherited virtual base class'
'base of member reference is a function; perhaps you meant to call it%select{| with no arguments}0?'
'base specifier must name a class'
'basic register allocator'
'basic statistics'
'because %select{base class of |field of |}0type %1 has a user-provided %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}2'
'because %select{base class of |field of |}0type %1 has no default constructor'
'because field %0 has an initializer'
'because it %select{is a reference type|is const|is volatile|has an ARC lifetime qualifier|is a variably-modified type|has a virtual base %1|not %select{a|an array of objects of}1 scalar or class type|has a non-trivially-relocatable base %1|has a non-trivially-relocatable member %1 of type %2|has a non-replaceable base %1|has a non-replaceable member %1 of type %2|has a non-trivially-copyable base %1|has a non-trivially-copyable member %1 of type %2|has a %select{deleted|user-provided}1 destructor|has a user provided %select{copy|move}1 constructor|has a deleted %select{copy|move}1 constructor|has a user provided %select{copy|move}1 assignment operator|has a deleted %select{copy|move}1 assignment operator|is a union with a user-declared %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1|is a function type|is a cv void type|is an incomplete array type}0'
'because it has a default argument'
'because it is a variadic function'
'because its parameter is %diff{of type $, not $|of the wrong type}2,3'
'because no %select{<<ERROR>>|constructor|constructor|assignment operator|assignment operator|<<ERROR>>}2 can be used to %select{<<ERROR>>|copy|move|copy|move|<<ERROR>>}2 %select{base class|field|an object}0 of type %3'
'because of ambiguity in conversion %diff{of $ to $|between types}0,1'
'because substituted constraint expression is ill-formed%0'
'because the function selected to %select{construct|copy|move|copy|move|destroy}2 %select{base class|field}0 of type %1 is not trivial'
'because type %0 has a member with %select{no|no|__strong|__weak|__autoreleasing}1 ownership'
'because type %0 has a virtual %select{member function|base class}1'
"befriending %1 without '%select{struct|interface|union|class|enum}0' keyword is incompatible with C++98"
'binary RIFF format'
'binary fold expression has unexpanded parameter packs in both operands'
'binary integer literals are a C++14 extension'
'binary integer literals are a C23 extension'
'binary integer literals are incompatible with C standards before C23'
'binary integer literals are incompatible with C++ standards before C++14'
'binary operator not supported, only +, *, -, /, &, ^, |, <<, or >> are permitted'
'binary with the instrumentation map, or a separate instrumentation map'
'binary with the instrumentation map, or a separate instrumentation map for graph'
'binary with the instrumentation map, or a separate instrumentation map for graph 1'
'binary with the instrumentation map, or a separate instrumentation map for graph 2'
'binary with the instrumrntation map, or a separate instrumentation map'
'binding %0 cannot appear in the initializer of its own decomposition declaration'
'binding dereferenced null pointer to reference has undefined behavior'
'binding reference %diff{of type $ to value of type $|to value}0,1 %select{drops %3 qualifier%plural{1:|2:|4:|:s}4|changes address space|not permitted due to incompatible qualifiers}2'
'binding reference member %0 to stack allocated %select{variable|parameter}2 %1'
"binding type '%0' is invalid"
"binding type '%select{t|u|b|s|c|i}0' cannot be applied more than once"
"binding type '%select{t|u|b|s|c}0' only applies to %select{SRV resources|UAV resources|constant buffer resources|sampler state|numeric variables in the global scope}0"
"binding type '%select{t|u|b|s|c}0' only applies to types containing %select{SRV resources|UAV resources|constant buffer resources|sampler state|numeric types}0"
"binding type 'b' only applies to constant buffers. The 'bool constant' binding type is no longer supported"
"binding type 'c' ignored in buffer declaration. Did you mean 'packoffset'?"
"binding type 'i' ignored. The 'integer constant' binding type is no longer supported"
"bit fields cannot be used to specify storage in a '%0' clause"
'bit-field %0 has bit-width %1 here'
'bit-field %0 has negative width (%1)'
'bit-field %0 has non-integral type %1'
'bit-field %0 is not wide enough to store all enumerators of %1'
'bit-field %0 is not wide enough to store all enumerators of preferred type %1'
'bit-field %0 of type %1 has a different storage size than the preceding bit-field (%2 vs %3 bytes) and will not be packed under the Microsoft ABI'
'bit-field is declared here'
'bit-fields are not supported in OpenCL'
'bit_cast %select{from|to}0 a %select{|type with a }1%select{union|pointer|member pointer|volatile|reference}2 %select{type|member}1 is not allowed in a constant expression'
'bit_cast involving type %0 is not allowed in a constant expression; element size %1 * element count %2 is not a multiple of the byte size %3'
"bitcode library '%0' does not exist"
'bitmasking for introspection of Objective-C object pointers is strongly discouraged'
'bitwise comparison always evaluates to %select{false|true}0'
"bitwise negation of a boolean expression%select{;| always evaluates to 'true';}0 did you mean logical negation?"
'bitwise or with non-zero value always evaluates to true'
'block cannot return %select{array|function}0 type %1'
'block captures an autoreleasing out-parameter, which may result in use-after-free bugs'
"block could be declared with attribute 'noreturn'"
"block implicitly retains 'self'; explicitly mention 'self' to indicate this is intended behavior"
'block pointer to non-function type is invalid'
'block pointer variable %0 is %select{uninitialized|null}1 when captured by block'
'block type cannot be used as expression in ternary expression in OpenCL'
'block will be retained by %select{the captured object|an object strongly retained by the captured object}0'
'blocks support disabled - compile with -fblocks or %select{pick a deployment target that supports them|for OpenCL C 2.0 or OpenCL C 3.0 with __opencl_c_device_enqueue feature}0'
"blocks used in enqueue_kernel call are expected to have parameters of type 'local void*'"
'blocks with parameters are not accepted in this prototype of enqueue_kernel call'
'body of cpu_dispatch function will be ignored'
"bool literal returned from 'main'"
'both arms of conditional operator are unable to produce a constant expression'
'boundary to use for alignment of basic blocks'
'brace elision for designated initializer is a C99 extension'
'braces around %select{scalar |}0initializer'
'bracket nesting level exceeded maximum of %0'
'brackets are not allowed here; to declare an array, place the brackets after the %select{identifier|name}0'
'branch probability threshold in percentage to be considered very likely'
'branch probability threshold in percentage to be considered very likely when profile is available'
'branch relax asm'
"build a shadowed submodule '%0'"
"building module '%0' as '%1'"
'built-in candidate %0'
'builtin %0 is deprecated; use %1 instead'
'builtin call is not valid when calling from a function without active ZA state'
'builtin call is not valid when calling from a function without active ZT0 state'
'builtin can only be called from a %0 function'
'builtin feature check macro requires a parenthesized identifier'
'builtin functions must be directly called'
'builtin headers belong to system modules, and _Builtin_ modules are ignored for cstdlib headers'
'builtin is not supported on this target'
'builtin requires %select{spirv|spirv32 or spirv64}0 target'
'builtin requires%select{| at least one of the following extensions}0: %1'
"but in %select{'%1'|definition here}0 found %select{%3 referenced %plural{1:protocol|:protocols}3|%ordinal3 referenced protocol with different name %4}2"
"but in %select{'%1'|definition here}0 found %select{%select{method %4|constructor|destructor}3 that has %5 parameter%s5|%select{method %4|constructor|destructor}3 with %ordinal5 parameter of type %6%select{| decayed from %8}7|%select{method %4|constructor|destructor}3 with %ordinal5 parameter named %6}2"
"but in %select{'%1'|definition here}0 found %select{%select{no super class|super class with type %4}3|instance variable '%3' access control is %select{|@private|@protected|@public|@package}4}2"
"but in %select{'%1'|definition here}0 found %select{end of class|public access specifier|private access specifier|protected access specifier|static assert|field|method|type alias|typedef|data member|friend declaration|function template|method|instance variable|property}2"
"but in %select{'%1'|definition here}0 found %select{field %3|field %3 with type %4|%select{non-|}4bit-field %3|bit-field %3 with different width expression|%select{non-|}4mutable field %3|field %3 with %select{no|an}4 initializer|field %3 with a different initializer}2"
"but in %select{'%1'|definition here}0 found %select{method %3 with different return type %4|method %3 as %select{class|instance}4 method|%select{no|'required'|'optional'}3 method control|method %3 with %select{no designated initializer|designated initializer}4|%select{regular|direct}4 method %3|different method %3}2"
"but in %select{'%1'|definition here}0 found %select{property %3|property %3 with type %4|%select{no|'required'|'optional'}3 property control|property %3 with different '%select{none|readonly|getter|assign|readwrite|retain|copy|nonatomic|setter|atomic|weak|strong|unsafe_unretained|nullability|null_resettable|class|direct}4' attribute}2"
"but in %select{'%1'|definition here}0 found %select{||||different static assert|different field|different method|different type alias|different typedef|different data member|different friend declaration|different function template|different method|different instance variable|different property|another unexpected decl}2"
"but in '%0' found %select{%2 base %plural{1:class|:classes}2|%2 virtual base %plural{1:class|:classes}2|%ordinal2 base class with different type %3|%ordinal2 %select{non-virtual|virtual}3 base class %4|%ordinal2 base class %3 with %select{public|protected|private|no}4 access specifier}1"
"but in '%0' found %select{%select{typedef|type alias}2 name %3|%select{typedef|type alias}2 %3 with different underlying type %4}1"
"but in '%0' found %select{data member with name %2|data member %2 with different type %3|data member %2 with%select{out|}3 an initializer|data member %2 with a different initializer|data member %2 %select{is constexpr|is not constexpr}3}1"
"but in '%0' found %select{different return type %2|%ordinal2 parameter with name %3|%ordinal2 parameter with type %3%select{| decayed from %5}4|%ordinal2 parameter with%select{out|}3 a default argument|%ordinal2 parameter with a different default argument|a different body}1"
"but in '%0' found %select{enum that is %select{not scoped|scoped}2|enum scoped with keyword %select{struct|class}2|enum %select{without|with}2 specified type|enum with specified type %2|enum with %2 element%s2|%ordinal2 element has name %3|%ordinal2 element %3 %select{has|does not have}4 an initializer|%ordinal2 element %3 has different initializer|}1"
"but in '%0' found %select{static assert with different condition|static assert with different message|static assert with %select{|no }2message|%select{method %3|constructor|destructor}2|%select{method %3|constructor|destructor}2 is %select{not deleted|deleted}4|%select{method %3|constructor|destructor}2 is %select{not defaulted|defaulted}4|%select{method %3|constructor|destructor}2 is %select{|pure }4%select{not virtual|virtual}5|%select{method %3|constructor|destructor}2 is %select{not static|static}4|%select{method %3|constructor|destructor}2 is %select{not volatile|volatile}4|%select{method %3|constructor|destructor}2 is %select{not const|const}4|%select{method %3|constructor|destructor}2 is %select{not inline|inline}4|%select{method %3|constructor|destructor}2 with %ordinal4 parameter with%select{out|}5 a default argument|%select{method %3|constructor|destructor}2 with %ordinal4 parameter with a different default argument|%select{method %3|constructor|destructor}2 with %select{no |}4template arguments|%select{method %3|constructor|destructor}2 with %4 template argument%s4|%select{method %3|constructor|destructor}2 with %4 for %ordinal5 template argument|%select{method %3|constructor|destructor}2 with %select{no body|body}4|%select{method %3|constructor|destructor}2 with different body|friend %select{class|function}2|friend %2|friend function %2|function template %2 with %3 template parameter%s3|function template %2 with %ordinal3 template paramter being a %select{type|non-type|template}4 template parameter|function template %2 with %ordinal3 template parameter %select{with no name|named %5}4|function template %2 with %ordinal3 template parameter with %select{no |}4default argument|function template %2 with %ordinal3 template parameter with default argument %4|function template %2 with %ordinal3 template parameter with different type|function template %2 with %ordinal3 template parameter %select{not |}4being a template parameter pack|}1"
"but in '%0' found %select{unnamed template parameter %2|template parameter %3|template parameter with %select{no |}2default argument|template parameter with different default argument}1"
"by value capture of '*this' is incompatible with C++ standards before C++17"
'by-copy capture of value of abstract type %0'
'by-copy capture of variable %0 with %select{incomplete|sizeless}1 type %2'
'cache-aware duplication strategy'
'calculate and print various metrics for instruction cache'
'call to %0 implicitly required by coroutine function here'
'call to %0 is ambiguous'
'call to %select{immediate|consteval}1 function %q0 is not a constant expression'
'call to %select{non-static|explicit}0 member function without an object argument'
'call to %select{placement|class-specific}0 %1'
"call to '%0' declared with 'error' attribute: %1"
"call to '%0' declared with 'warning' attribute: %1"
"call to '%select{__builtin_operator_new|__builtin_operator_delete}0' selects non-usual %select{allocation|deallocation}0 function"
"call to '%select{initial_suspend|final_suspend}0' implicitly required by the %select{initial suspend point|final suspend point}0"
"call to 'await_transform' implicitly required by 'co_await' here"
"call to a function that shares state other than 'za' from a function that has live 'za' state requires a spill/fill of ZA, which is not yet implemented"
'call to a shared ZA function requires the caller to have ZA state'
'call to a shared ZT0 function requires the caller to have ZT0 state'
"call to a streaming function requires 'sme'"
'call to constructor of %0 is ambiguous'
'call to deleted constructor of %0%select{|: %2}1'
'call to deleted function call operator in type %0%select{|: %2}1'
'call to deleted%select{| member}0 function %1%select{|: %3}2'
'call to function %0 that is neither visible in the template definition nor found by argument-dependent lookup'
'call to global function %0 not configured'
'call to implicitly-deleted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}0 of %1'
'call to member function %0 is ambiguous'
'call to object of type %0 is ambiguous'
"call to pointer to member function of type %0 drops '%1' qualifier%s2"
'call to pseudo-destructor cannot have any arguments'
'call to pure virtual member function %0 has undefined behavior; overrides of %0 in subclasses are not available in the %select{constructor|destructor}1 of %2'
'call to subscript operator of type %0 is ambiguous'
'call to undeclared function %0; ISO C99 and later do not support implicit function declarations'
"call to undeclared library function '%0' with type %1; ISO C99 and later do not support implicit function declarations"
'call to unsupported expression with unknown type'
'called by %0'
'called object type %0 is not a function or function pointer'
'callee declares array parameter as static here'
"calling %0 is a violation of trusted computing base '%1'"
'calling %0 with incomplete return type %1'
"calling '%0' with a nonzero argument is unsafe"
'calling a %select{private|protected}0 constructor of class %2'
'calling a %select{private|protected}1 destructor of class %0'
"calling function %0 requires negative capability '%1'"
"calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3"
'calling function with incomplete return type %0'
'calls the given entry-point on a new thread (jit-kind=orc-lazy only)'
'calls to OpenMP runtime API are not allowed within a region that corresponds to a construct with an order clause that specifies concurrent'
'can only access this member on an object of type %0'
'can only poison identifier tokens'
'can only provide an explicit specialization for a class template, function template, variable template, or a member function, static data member, %select{or member class|member class, or member enumeration}0 of a class template'
"can only use 'init_priority' attribute on file-scope definitions of objects of class type"
'candidate %select{constructor|template}0 ignored: inherited constructor cannot be used to %select{copy|move}1 object'
'candidate %select{constructor|template}0 ignored: instantiation %select{takes|would take}0 its own class type by value'
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 has been %select{explicitly made unavailable|explicitly deleted|implicitly deleted}3"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %ordinal5 argument (%3) would lose %select{const|restrict|const and restrict|volatile|const and volatile|volatile and restrict|const, volatile, and restrict}4 qualifier%select{||s||s|s|s}4"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %ordinal8 argument (%3) has %select{no '__ptrauth'|%5}4 qualifier, but parameter has %select{no '__ptrauth'|%7}6 qualifier"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{%ordinal7|'this'}6 argument (%3) has %select{no|__unsafe_unretained|__strong|__weak|__autoreleasing}4 ownership, but parameter has %select{no|__unsafe_unretained|__strong|__weak|__autoreleasing}5 ownership"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{%ordinal7|'this'}6 argument (%3) has %select{no|__weak|__strong}4 ownership, but parameter has %select{no|__weak|__strong}5 ownership"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{cannot convert initializer list|too few initializers in list|too many initializers in list}7 argument to %4"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: %select{requires at least|allows at most single|requires single}3 %select{|non-object }6argument %4, but %plural{0:no|:%5}5 arguments were provided"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: 'this' argument has type %3, but method is not marked %select{const|restrict|const or restrict|volatile|const or volatile|volatile or restrict|const, volatile, or restrict}4"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: 'this' object is in %3, but method expects object in %4"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: call to %select{__device__|__global__|__host__|__host__ __device__|invalid}3 function from %select{__device__|__global__|__host__|__host__ __device__|invalid}4 function"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot %select{convert from|convert from|bind}3 %select{base class pointer|superclass|base class object of type}3 %4 to %select{derived class pointer|subclass|derived class reference}3 %5 for %ordinal6 argument"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot %select{pass pointer to|bind reference in}5 %3 %select{as a pointer to|to object in}5 %4 in %ordinal6 argument"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot convert argument of incomplete type %diff{$ to $|to parameter type}3,4 for %select{%ordinal6 argument|object argument}5%select{|; dereference the argument with *|; take the address of the argument with &|; remove *|; remove &}7"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: cannot implicitly convert argument %diff{of type $ to $|type to parameter type}3,4 for %select{%ordinal6 argument|object argument}5 under ARC"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: constraints not satisfied"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: expects an %select{lvalue|rvalue}5 for %select{%ordinal4 argument|object argument}3"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: no known conversion %diff{from $ to $|from argument type to parameter type}3,4 for %select{%ordinal6 argument|object argument}5%select{|; dereference the argument with *|; take the address of the argument with &|; remove *|; remove &}7"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: no overload of %4 matching %3 for %ordinal5 argument"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %2}1 not viable: requires%select{ at least| at most|}3 %4 %select{|non-object }6argument%s4, but %5 %plural{1:was|:were}5 provided"
"candidate %select{function|function|function (with reversed parameter order)|constructor|constructor (the implicit default constructor)|constructor (the implicit copy constructor)|constructor (the implicit move constructor)|function (the implicit copy assignment operator)|function (the implicit move assignment operator)|function (the implicit 'operator==' for this 'operator<=>)'|inherited constructor}0%select{| template| %3}1%select{| has different class%diff{ (expected $ but has $)|}5,6| has different number of parameters (expected %5 but has %6)| has type mismatch at %ordinal5 parameter%diff{ (expected $ but has $)|}6,7| has different return type%diff{ ($ expected but has $)|}5,6| has different qualifiers (expected %5 but found %6)| has different exception specification}4"
'candidate address cannot be taken because parameter %0 has pass_object_size attribute'
'candidate constructor ignored: cannot be used to construct an object in address space %0'
'candidate disabled: %0'
'candidate found by name lookup is %q0'
'candidate function made ineligible by enable_if'
'candidate function with non-reversed arguments'
'candidate ignored: %select{not a function template|not a member of the enclosing %select{class template|namespace; did you mean to explicitly qualify the specialization?}1}0'
'candidate template ignored: cannot deduce a type for %0 that would make %2 equal %1'
'candidate template ignored: constraints not satisfied%0'
'candidate template ignored: could not match %diff{$ against $|types}0,1'
'candidate template ignored: could not match %q0 against %q1'
"candidate template ignored: couldn't infer template argument %0"
'candidate template ignored: deduced %select{conflicting types|conflicting values|conflicting templates|packs of different lengths}0 for parameter %1%diff{ ($ vs. $)|}2,3'
'candidate template ignored: deduced too few arguments for expanded pack %0; no argument for %ordinal1 expanded parameter in deduced argument pack %2'
'candidate template ignored: deduced type %diff{$ of %select{|element of }4%ordinal0 parameter does not match adjusted type $ of %select{|element of }4argument|of %select{|element of }4%ordinal0 parameter does not match adjusted type of %select{|element of }4argument}1,2%3'
'candidate template ignored: deduced values %diff{of conflicting types for parameter %0 (%1 of type $ vs. %3 of type $)|%1 and %3 of conflicting types for parameter %0}2,4'
'candidate template ignored: disabled by %0%1'
'candidate template ignored: failed template argument deduction'
'candidate template ignored: invalid explicitly-specified argument for %ordinal0 template parameter'
'candidate template ignored: invalid explicitly-specified argument for template parameter %0'
"candidate template ignored: requirement '%0' was not satisfied%1"
'candidate template ignored: substitution exceeded maximum template instantiation depth'
'candidate template ignored: substitution failure%0%1'
'candidate template ignored: target attributes do not match'
"cannot %select{#include files|import headers}0 inside '#pragma clang arc_cf_code_audited'"
"cannot %select{#include files|import headers}0 inside '#pragma clang assume_nonnull'"
'cannot %select{access base class of|access derived class of|access field of|access array element of|ERROR|access real component of|access imaginary component of}0 pointer past the end of object'
'cannot %select{access base class of|access derived class of|access field of|access array element of|perform pointer arithmetic on|access real component of|access imaginary component of}0 null pointer'
"cannot %select{assign to %select{object|'%1'}2 with|pass argument to %select{parameter|parameter '%1'}2 with|return|convert to|%select{|implicitly }3initialize %select{object|'%1'}2 with|pass argument to parameter with|cast to|pass argument to parameter with}0 '%5' attributed type %4 because the pointee type %6 is incomplete"
'cannot %select{assign|return|throw|subscript}0 a WebAssembly table'
'cannot %select{capture|take address of}0 WebAssembly reference'
'cannot %select{decrement|increment}0 expression of enum type %1'
'cannot %select{decrement|increment}1 value of type %0'
'cannot %select{throw|catch}0 a WebAssembly reference type'
"cannot %select{use '%1' with '%4' attributed|call '%1' with '%4' attributed return}0 type %2 because the pointee type %3 is incomplete"
"cannot %select{use builtin operator '<=>'|default 'operator<=>'}1 because type '%0' was not found; include <compare>"
'cannot %select{use type %1 for a function/method parameter|use type %1 for function/method return|default-initialize an object of type %1|declare an automatic variable of type %1|copy-initialize an object of type %1|assign to a variable of type %1|construct an automatic compound literal of type %1|capture a variable of type %1|cannot use volatile type %1 where it causes an lvalue-to-rvalue conversion}3 since it %select{contains|is}2 a union that is non-trivial to %select{default-initialize|destruct|copy}0'
'cannot %select{||reinterpret_cast||C-style cast||}0 from member pointer type %1 to member pointer type %2 of different size'
"cannot add 'abi_tag' attribute in a redeclaration"
'cannot add a default template argument to the definition of a member of a class template'
'cannot allocate %select{function|reference}1 type %0 with new'
"cannot allocate array of 'auto'"
"cannot allocate array; evaluated array bound %0 exceeds the limit (%1); use '-fconstexpr-steps' to increase this limit"
'cannot allocate array; evaluated array bound %0 is negative'
'cannot allocate array; evaluated array bound %0 is too large'
'cannot allocate array; evaluated array bound %0 is too small to hold %1 explicitly initialized elements'
'cannot allocate memory of %select{incomplete|function}0 type %1'
"cannot allocate untyped memory in a constant expression; use 'std::allocator<T>::allocate' to allocate memory of type 'T'"
"cannot apply AST actions to LLVM IR file '%0'"
'cannot apply asm label to %select{variable|function}0 after its first use'
"cannot assign to 'self' in a class method"
"cannot assign to 'self' outside of a method in the init family"
'cannot assign to a variable captured by copy in a non-mutable lambda'
'cannot assign to class object (%0 invalid)'
"cannot assign to this %select{dictionary|array}1 because assigning method's 2nd parameter of type %0 is not an Objective-C pointer type"
'cannot befriend target of using declaration'
'cannot bind non-lvalue argument %0 to %select{|in}1out paramemter'
'cannot build range expression with array function parameter %0 since parameter with array type %1 is treated as pointer type %2'
"cannot call function '%1' while %0 '%2' is held"
'cannot call operator __uuidof on a type with multiple GUIDs'
'cannot call operator __uuidof on a type with no GUID'
'cannot capture __autoreleasing variable in a %select{block|lambda by copy}0'
'cannot cast %0 to %1 via virtual base %2'
'cannot cast %0 to its %select{private|protected}2 base class %1'
'cannot cast %select{private|protected}2 base class %1 to %0'
'cannot cast %select{to|from}0 a WebAssembly table'
"cannot cast 'super' (it isn't an expression)"
"cannot cast an object of type %select{'nullptr_t' to %1|%1 to 'nullptr_t'}0"
'cannot cast from lvalue of type %1 to rvalue reference type %2; types are not compatible'
'cannot cast from rvalue of type %1 to rvalue reference type %2; types are not compatible'
'cannot cast from type %1 to member pointer type %2'
'cannot cast from type %1 to pointer type %2'
"cannot cast non-zero value '%0' to 'event_t'"
'cannot cast object of dynamic type %0 to type %1'
"cannot cast to '__ptrauth'-qualified type %0"
'cannot catch %select{|reference to }0sizeless type %1'
'cannot catch an Objective-C object by value'
'cannot catch an exception thrown with @throw in C++ in the non-unified exception model'
'cannot catch exceptions by rvalue reference'
'cannot catch incomplete type %0'
'cannot catch pointer to incomplete type %0'
'cannot catch reference to incomplete type %0'
'cannot catch variably modified type %0'
'cannot combine GNU and %select{SVE|RVV}0 vectors in expression, result is ambiguous (%1 and %2)'
'cannot combine fixed-length and sizeless %select{SVE|RVV}0 vectors in expression, result is ambiguous (%1 and %2)'
"cannot combine with previous '%0' declaration specifier"
"cannot combine with previous '%0' declaration specifier. '__vector' must be first"
'cannot compile this %0 yet'
'cannot compress debug sections (%0 not enabled)'
'cannot compute offset of bit-field %0'
"cannot constant evaluate '%select{memcpy|memmove}0' between objects of incomplete type %1"
"cannot constant evaluate '%select{memcpy|memmove}0' between objects of non-trivially-copyable type %1"
"cannot constant evaluate '%select{memcpy|memmove}0' from object of type %1 to object of type %2"
'cannot constant evaluate the result of adjusting alignment to %0'
'cannot constant evaluate whether run-time alignment is at least %0'
'cannot construct object of type %0 with virtual base class in a constant expression'
'cannot convert %0 token to an identifier'
'cannot convert %1 to %2 without a conversion operator'
'cannot convert between %select{scalar|vector}0 type %1 and vector type %2 as implicit conversion would cause truncation'
'cannot convert between vector and non-scalar values (%0 and %1)'
'cannot convert between vector values of different size (%0 and %1)'
'cannot create __weak reference because the current deployment target does not support weak references'
'cannot create __weak reference in file using manual reference counting'
'cannot create a non-constant pointer to member function'
'cannot create includes file for module %0: %1'
'cannot create object of function type %0'
'cannot declare a class template with no name'
'cannot declare an explicit specialization in a friend'
'cannot declare class extension for %0 after class implementation'
"cannot declare implementation of a class declared with the 'objc_class_stub' attribute"
"cannot declare the namespace 'std' to be inline"
'cannot declare variable inside @interface or @protocol'
'cannot decompose %select{private|protected}0 member %1 of %3'
'cannot decompose %select{union|non-class, non-array}1 type %2'
'cannot decompose class type %0 because it has an anonymous %select{struct|union}1 member'
'cannot decompose class type %1: %select{its base classes %2 and|both it and its base class}0 %3 have non-static data members'
'cannot decompose lambda closure type'
'cannot decompose members of ambiguous base class %1 of %0:%2'
'cannot decompose members of inaccessible base class %1 of %0'
"cannot decompose this type; 'std::tuple_element<%0>::type' does not name a type"
"cannot decompose this type; 'std::tuple_size<%0>::value' is not a valid integral constant expression"
'cannot decrement expression of type bool'
"cannot deduce 'decltype(auto)' from initializer list"
'cannot deduce actual type for %1 from %select{parenthesized|nested}0 initializer list'
'cannot deduce actual type for variable %0 with type %1 from initializer list'
'cannot deduce implicit triple value for -Xopenmp-target, specify triple using -Xopenmp-target=<triple>'
'cannot deduce lambda return type from initializer list'
'cannot deduce return type %0 for function with no return statements'
'cannot deduce return type %0 from omitted return expression'
'cannot deduce return type %0 from returned value of type %1'
'cannot deduce return type from initializer list'
'cannot deduce template arguments for %0 from %1'
'cannot deduce type for lambda capture %0 from initializer list'
'cannot deduce type for lambda capture %0 from initializer of type %2'
'cannot deduce type for lambda capture %1 from %select{parenthesized|nested}0 initializer list'
'cannot deduce type for variable %1 with type %2 from %select{parenthesized|nested}0 initializer list'
'cannot deduce type of initializer list because std::initializer_list was not found; include <initializer_list>'
'cannot define %select{category|class extension}0 for undefined class %1'
'cannot define a type in a friend declaration'
'cannot define friend function %0 in a local class definition; did you mean %3?'
'cannot define friend function in a local class definition'
'cannot define non-inline dllimport template specialization'
'cannot define or redeclare %0 here because namespace %1 does not enclose namespace %2'
'cannot define the implicit copy assignment operator for %0, because non-static %select{reference|const}1 member %2 cannot use copy assignment operator'
'cannot delete expression of type %0'
"cannot delete expression with pointer-to-'void' type %0"
'cannot delete pointer to incomplete type %0'
"cannot determine %0 architecture: %1; consider passing it via '%2'; environment variable CLANG_TOOLCHAIN_PROGRAM_TIMEOUT specifies the tool timeout (integer secs, <=0 is infinite)"
'cannot determine allocated array size from initializer'
'cannot determine number of elements for sizeless vectors in a constant expression'
'cannot determine underlying type of incomplete enumeration type %0'
'cannot emit module %0: %select{size|mtime}1 must be explicitly specified for missing header file "%2"'
'cannot evaluate call to virtual function in a constant expression in C++ standards before C++20'
'cannot evaluate this expression if rounding mode is dynamic'
'cannot export %0 as it is not at namespace scope'
'cannot export redeclaration %0 here since the previous declaration %select{is not exported|has internal linkage|has module linkage}1'
"cannot find CUDA installation; provide its path via '--cuda-path', or pass '-nocudainc' to build without CUDA includes"
"cannot find HIP Standard Parallelism Acceleration library; provide it via '--hipstdpar-path'"
"cannot find HIP device library%select{| for %1}0; provide its path via '--hip-path' or '--hip-device-lib-path', or pass '-nogpulib' to build without HIP device library"
"cannot find HIP runtime; provide its path via '--rocm-path', or pass '-nogpuinc' to build without HIP runtime"
"cannot find ROCm device library%select{| for %1| for ABI version %1%select{|, which requires ROCm %3 or higher}2}0; provide its path via '--rocm-path' or '--rocm-device-lib-path', or pass '-nogpulib' to build without ROCm device library"
'cannot find a valid user-defined mapper for type %0 with name %1'
"cannot find end ('%1') of expected %0"
'cannot find interface declaration for %0'
'cannot find interface declaration for %0, superclass of %1'
'cannot find interface declaration for %0, superclass of %1; did you mean %2?'
'cannot find interface declaration for %0; did you mean %1?'
"cannot find libdevice for %0; provide path to different CUDA installation via '--cuda-path', or pass '-nocudalib' to build without linking with libdevice"
'cannot find protocol declaration for %0'
'cannot find protocol declaration for %0; did you mean %1?'
'cannot find protocol definition for %0'
"cannot find re-exported %select{framework|library}0: '%1'"
"cannot find rocPrim, which is required by the HIP Standard Parallelism Acceleration library; provide it via '--hipstdpar-prim-path'"
"cannot find rocThrust, which is required by the HIP Standard Parallelism Acceleration library; provide it via '--hipstdpar-thrust-path'"
"cannot find start ('{{') of expected %0"
"cannot find start of regex ('{{') in %0"
'cannot find suitable %select{getter|setter}0 for property %1'
'cannot form %select{pointer to|reference to|array of|function returning}0 deduced class template specialization type'
"cannot form %select{pointer to|reference to|array of}0 'decltype(auto)'"
'cannot form a %select{pointer|reference}0 to a WebAssembly table'
'cannot form a pointer-to-member to member %0 of reference type %1'
"cannot form a reference to 'void'"
"cannot form member pointer of type %0 without '&' and class name"
'cannot generate code for reduction on %select{|array section, which requires a }0variable length array'
'cannot have both throw() and noexcept() clause on the same function'
'cannot implement a category for class %0 that is only visible via the Objective-C runtime'
'cannot implement subclass %0 of a superclass %1 that is only visible via the Objective-C runtime'
'cannot import unsupported AST node %0'
'cannot initialize %select{a variable|a parameter|template parameter|return object|statement expression result|an exception object|a member subobject|an array element|a new value|a value|a base class|a constructor delegation|a vector element|a block element|a block element|a complex element|a lambda capture|a compound literal initializer|a related result|a parameter of CF audited function|a structured binding|a member subobject}0 %diff{of type $ with an %select{rvalue|lvalue}2 of type $|with an %select{rvalue|lvalue}2 of incompatible type}1,3%select{|: different classes%diff{ ($ vs $)|}5,6|: different number of parameters (%5 vs %6)|: type mismatch at %ordinal5 parameter%diff{ ($ vs $)|}6,7|: different return type%diff{ ($ vs $)|}5,6|: different qualifiers (%5 vs %6)|: different exception specifications}4'
'cannot initialize %select{non-class|reference}0 type %1 with a parenthesized initializer list'
'cannot initialize Objective-C class type %0'
'cannot initialize array %diff{of type $ with array of type $|with different type of array}0,1'
'cannot initialize array %diff{of type $ with non-constant array of type $|with different type of array}0,1'
'cannot initialize object parameter of type %0 with an expression of type %1'
'cannot instantiate %0 yet'
'cannot jump from switch statement to this case label'
'cannot jump from this %select{indirect|asm}0 goto statement to one of its possible targets'
'cannot jump from this continue statement to the loop increment; jump bypasses initialization of loop condition variable'
'cannot jump from this goto statement to its label'
'cannot jump from this goto statement to label %0 inside an inline assembly block'
"cannot link module '%0': %1"
'cannot locate code-completion file %0'
'cannot mangle fixed point literals yet'
'cannot mangle this %0 %1 yet'
'cannot mangle this %0 yet'
'cannot mangle this dependent fixed-length RVV vector type yet'
'cannot mangle this dependent fixed-length SVE vector type yet'
'cannot mangle this dependent neon vector type yet'
'cannot mangle this requires-expression containing a substitution failure'
'cannot mangle this unnamed union NTTP yet'
'cannot mix packoffset elements with nonpackoffset elements in a cbuffer'
'cannot mix positional and non-positional arguments in format string'
'cannot mix vectors and extended vectors in a vector conditional'
"cannot nest 'critical' regions having the same name %0"
"cannot open file '%0': %1"
"cannot overload a member function %select{without a ref-qualifier|with ref-qualifier '&'|with ref-qualifier '&&'}0 with a member function %select{without a ref-qualifier|with ref-qualifier '&'|with ref-qualifier '&&'}1"
'cannot override a method that is declared direct by a superclass'
'cannot parenthesize the name of a method when forming a member pointer'
'cannot pass %select{expression of type %1|initializer list}0 to variadic %select{function|block|method|constructor}2'
'cannot pass %select{expression of type %1|initializer list}0 to variadic %select{function|block|method|constructor}2; expected type from format string was %3'
'cannot pass %select{non-POD|non-trivial}0 object of type %1 to variadic %select{function|block|method|constructor}2; expected type from format string was %3'
'cannot pass a pointer-to-member through register-constrained inline assembly parameter'
'cannot pass bit-field as __auto_type initializer in C'
'cannot pass non-trivial C object of type %0 by value to variadic %select{function|block|method|constructor}1'
'cannot pass object of %select{non-POD|non-trivial}0 type %1 through variadic %select{function|block|method|constructor}2; call will abort at runtime'
'cannot pass object with interface type %0 by value through variadic %select{function|block|method|constructor}1'
'cannot pass object with interface type %1 by value to variadic %select{function|block|method|constructor}2; expected type from format string was %3'
"cannot pass undiscriminated type %0 to '__builtin_ptrauth_type_discriminator'"
'cannot perform a tail call %select{from|to}0 a %select{constructor|destructor}1'
'cannot perform a tail call from this return statement'
'cannot perform a tail call to function%select{| %1}0 because it uses an incompatible calling convention'
'cannot perform a tail call to function%select{| %1}0 because its signature is incompatible with the calling function'
'cannot perform atomic operation on a pointer to type %0: type has non-trivial ownership'
"cannot read configuration file '%0': %1"
"cannot read randomize layout seed file '%0'"
"cannot rebuild module '%0' as it is already finalized"
'cannot redeclare builtin function %0'
'cannot refer to a block inside block'
'cannot refer to a non-static member from the handler of a %select{constructor|destructor}0 function try block'
'cannot refer to declaration of structure variable with flexible array member inside block'
'cannot refer to declaration with a variably modified type inside block'
'cannot refer to declaration with an array type inside block'
'cannot refer to element %0 of %select{array of %2 element%plural{1:|:s}2|non-array object}1 in a constant expression'
"cannot refer to member %0 in %1 with '%select{.|->}2'"
"cannot refer to type member %0 in %1 with '%select{.|->}2'"
'cannot reference member of primary template because deduced class template specialization %0 is %select{instantiated from a partial|an explicit}1 specialization'
'cannot resolve lock expression'
'cannot return from %0'
'cannot set vtable pointer authentication on %0 which is a subclass of polymorphic type %1'
'cannot set vtable pointer authentication on an incomplete type %0'
'cannot set vtable pointer authentication on monomorphic type %0'
"cannot specialize %select{|(with 'template<>') }0a member of an unspecialized template"
'cannot specialize a %select{dependent template|template template parameter}0'
"cannot specify '%0%1' when compiling multiple source files"
"cannot specify '%1' along with '%0'"
'cannot specify -o when generating multiple output files'
'cannot specify a default vtable pointer authentication %select{key|address discrimination mode|discriminator}0 with no default set'
"cannot specify any part of a return type in the declaration of a conversion function%select{; put the complete type after 'operator'|; use a typedef to declare a conversion to %1|; use an alias template to declare a conversion to %1|}0"
'cannot specify any part of a return type in the declaration of a deduction guide'
'cannot specify deduction guide for %select{<error>|function template|variable template|alias template|template template parameter|concept|dependent template name}0 %1'
"cannot specify parameter '%0' twice in the same '#embed' directive"
'cannot store matrix to read-only pointer'
"cannot subclass a class that was declared with the 'objc_subclassing_restricted' attribute"
'cannot synthesize property %0 with incomplete type %1'
'cannot synthesize weak property because the current deployment target does not support weak references'
'cannot synthesize weak property in file using manual reference counting'
'cannot take address of %select{immediate|consteval}2 %select{function|call operator of}1 %0 outside of an immediate invocation'
'cannot take address of function %0 because it has one or more non-tautological enable_if conditions'
'cannot take address of function %0 because its constraints are not satisfied'
'cannot take address of function %0 because parameter %1 has pass_object_size attribute'
'cannot take an address of a virtual member function if its return or argument types are incomplete'
'cannot take the address of an rvalue of type %0'
'cannot template a using %select{directive|declaration}0'
'cannot throw an object of abstract type %0'
'cannot throw object of incomplete type %0'
'cannot throw object of sizeless type %0'
'cannot throw object of type %0 with a potentially-throwing destructor'
'cannot throw pointer to object of incomplete type %0'
'cannot type cast @selector expression'
"cannot use %select{'auto'|<ERROR>|'__auto_type'}0 with %select{initializer list|array}1 in C"
"cannot use %select{C++ 'try'|Objective-C '@try'}0 in the same function as SEH '__try'"
'cannot use %select{dot|arrow}0 operator on a type'
"cannot use %select{unicode|wide}0 string literal in 'asm'"
"cannot use '%0' in %select{__device__|__global__|__host__|__host__ __device__}1 function"
"cannot use '%0' output with multiple -arch options"
"cannot use '%0' with '__vector bool'"
"cannot use '%0' with Objective-C exceptions disabled"
"cannot use '%0' with exceptions disabled"
"cannot use '_Complex' with '__vector'"
"cannot use 'float' with '__vector'"
"cannot use 'long double' with '__vector'"
"cannot use 'long' with '__vector'"
"cannot use SEH '__try' in a coroutine when C++ exceptions are enabled"
"cannot use SEH '__try' in blocks, captured regions, or Obj-C method decls"
'cannot use WebAssembly table as a function parameter'
'cannot use a WebAssembly table within a branch of a conditional expression'
"cannot use a protocol declared 'objc_non_runtime_protocol' in a @protocol expression"
"cannot use an empty string literal in 'asm'"
'cannot use dynamic_cast to convert from %0 to %1'
'cannot use incomplete type %0 as a range'
'cannot use initializer list at the beginning of a macro argument'
'cannot use type %0 as a range'
'cannot use type %0 as an iterator'
"cannot use type '%0' within '#pragma clang fp eval_method'; type is set according to the default eval method for the translation unit"
'cannot use variable %1 in collapsed imperfectly-nested loop %select{init|condition|increment}0 statement'
'cannot use variable-length arrays in %select{__device__|__global__|__host__|__host__ __device__}0 functions'
"cannot write file '%0': %1"
'cannot yet @encode type %0'
'cannot yet compile %0 in this ABI'
'cannot yet mangle %0 expression'
'cannot yet mangle OpenACC Asterisk Size expression'
'cannot yet mangle expression type %0'
'capture %0 by %select{value|reference}1'
'capture default must be first'
'capture host side class data member by this pointer in device or host device lambda function may result in invalid memory access if this pointer is not accessible on device side'
'capture host variable %0 by reference in device or host device lambda function'
"capture of '*this' by copy is a C++17 extension"
"capture of variable '%0' as type %1 calls %select{private|protected}3 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR* |}2constructor"
'captured structured bindings are a C++20 extension'
'captured structured bindings are incompatible with C++ standards before C++20'
'capturing %0 strongly in this block is likely to lead to a retain cycle'
'capturing a structured binding is not yet supported in OpenMP'
'case ranges are a C2y extension'
'case ranges are a GNU extension'
'case ranges are incompatible with C standards before C2y'
'case value not in enumerated type %0'
'cast %diff{from $ to $ |}0,1converts to incompatible function type'
"cast between incompatible calling conventions '%0' and '%1'; calls through this pointer may abort at runtime"
'cast between pointer-to-function and pointer-to-object is an extension'
'cast between pointer-to-function and pointer-to-object is incompatible with C++98'
'cast expression to void to silence warning'
'cast from %0 is not allowed in a constant expression %select{in C++ standards before C++2c|because the pointed object type %2 is not similar to the target type %3}1'
'cast from %0 to %1 drops %select{const and volatile qualifiers|const qualifier|volatile qualifier}2'
'cast from %0 to %1 increases required alignment from %2 to %3'
'cast from %0 to %1 must have all intermediate pointers const qualified to be safe'
'cast from function call of type %0 to non-matching type %1'
'cast from pointer to smaller type %2 loses information'
'cast of %select{Objective-C|block|C}0 pointer type %1 to %select{Objective-C|block|C}2 pointer type %3 cannot use %select{__bridge|__bridge_transfer|__bridge_retained}4'
'cast of type %0 to %1 is deprecated; use sel_getName instead'
'cast one or both operands to int to silence this warning'
'cast to %1 from smaller integer type %0'
'cast to incomplete type %0'
'cast to smaller integer type %1 from %0'
'cast to union type from type %0 not present in union'
'cast to union type is a GNU extension'
'casting from randomized structure pointer type %0 to %1'
"casting to dereferenceable pointer removes 'noderef' attribute"
'casting to type %0 is not allowed'
'catch-all handler must come last'
'category is implementing a method which will also be implemented by its primary class'
"chained comparison 'X %0 Y %1 Z' does not behave the same as a mathematical expression"
'change layout of basic blocks in a function'
"change return type to 'int'"
'change size argument to be the size of the destination'
'change the argument to be the free space in the destination buffer minus the terminating null byte'
"change this ',' to a ';' to call %0"
"change type of %0 to '%select{std::span' to preserve bounds information|std::array' to label it for hardening|std::span::iterator' to preserve bounds information}1%select{|, and change %2 to '%select{std::span|std::array|std::span::iterator}1' to propagate bounds information between them}3"
"change type of %0 to '%select{std::span' to preserve bounds information|std::array' to label it for hardening|std::span::iterator' to preserve bounds information}1%select{|, and change %2 to safe types to make function %4 bounds-safe}3"
'char is signed'
'char is unsigned'
"character '%0' cannot be specified by a universal character name"
'character <U+%0> not allowed %select{in|at the start of}1 an identifier'
'character constant too long for its type'
'character literal with user-defined suffix cannot be used here'
'character too large for enclosing character literal type'
'characters names in Unicode escape sequences are sensitive to case and whitespaces'
'charizing operator #@ is a Microsoft extension'
'check arguments and return values at function call boundaries'
"checker '%0' has no option called '%1'"
"checker cannot be enabled with analyzer option '%0' == %1"
"checker plugin '%0' is not compatible with this version of the analyzer"
'chosen constructor is explicit in copy-initialization'
'circular pointer delegation detected'
'clang LLVM compiler'
'clang-check options'
'clang-diff options'
'clang-doc options'
'clang-extdefmapgen options'
'clang-move options'
'clang-offload-bundler options'
'clang-offload-packager options'
'clang-query options'
'clang-rename could not find symbol %0'
'clang-rename could not find symbol (offset %0)'
'clang-reorder-fields options'
'clang-tidy options'
'clangd compilation flags options'
'class %0 defined without specifying a base class'
'class %0 has incompatible superclasses'
'class %0 previously declared with type parameters'
"class already marked '%0'"
"class already marked '%select{trivially_relocatable_if_eligible|replaceable_if_eligible}0'"
'class extension has no primary class'
'class has %0 base %plural{1:class|:classes}0'
'class has base type %0'
'class implementation is declared here'
'class implementation may not have super class'
'class is declared here'
'class is incompatible with __weak references'
'class member %0 cannot appear in capture list as it is not a variable'
"class member already marked '%0'"
'class member cannot be redeclared'
"class method %objcclass0 not found (return type defaults to 'id')"
"class method %objcclass0 not found (return type defaults to 'id'); did you mean %objcclass2?"
'class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category'
'class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this class implementation'
'class template %0 was explicitly specialized here'
'class template %0 was instantiated here'
'class template argument deduction for %0 selected a deleted constructor'
'class template argument deduction for %0 selected an explicit %select{constructor|deduction guide}1 for copy-list-initialization'
'class template argument deduction for alias templates is a C++20 extension'
'class template argument deduction for alias templates is incompatible with C++ standards before C++20'
'class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0'
'class template partial specialization %0 cannot be redeclared'
"class with destructor marked '%select{final|sealed}0' cannot be inherited from"
'class with specified objc_requires_property_definitions attribute is declared here'
'cmse is not compatible with %select{RWPI|ROPI}0'
"code model '%0' is not supported on this target"
'code snippets to measure'
'code will never be executed'
'collect control flow for each function'
'collection element of type %0 is not an Objective-C object'
'collection expression type %0 is a forward declaration'
'collection expression type %0 may not respond to %1'
'comma expressions are not allowed as indices in matrix subscript expressions'
'comma operator in operand of #if'
'comma separating Objective-C messaging arguments'
'comma-separated list of OpenMP offloading triples'
'comma-separated list of opcodes to measure, by name'
'comma-separated list of target architecture features'
'command line argument'
'commas at the end of enumerator lists are a C++11 extension'
'commas at the end of enumerator lists are a C99-specific feature'
'commas at the end of enumerator lists are incompatible with C++98'
'comparing a pointer to a null character constant; did you mean to compare to %select{NULL|(void *)0}0?'
'comparing floating point with == or != is unsafe'
"comparing values of different Unicode code unit types %0 and %1 compares unrelated code units '%2' and '%3'"
'comparing values of different Unicode code unit types %0 and %1 may compare different code points'
'comparing with this %select{specifier|format string}0'
"comparison against address of weak declaration '%0' can only be performed at runtime"
"comparison against opaque constant address '%0' can only be performed at runtime"
"comparison against pointer '%0' that points past the end of a complete object has unspecified value"
'comparison against pointer to weak member %q0 can only be performed at runtime'
'comparison between NULL and non-pointer %select{(%1 and NULL)|(NULL and %1)}0'
'comparison between pointer and integer (%0 and %1)'
"comparison between pointers to unrelated objects '%0' and '%1' has unspecified value"
"comparison between two arrays compare their addresses and will be deprecated in c++20; to compare array addresses, use unary '+' to decay operands to pointers"
"comparison between two arrays is deprecated; to compare array addresses, use unary '+' to decay operands to pointers"
"comparison between two arrays is ill-formed in C++26; to compare array addresses, use unary '+' to decay operands to pointers"
"comparison in fold expression would evaluate to '(X %0 Y) %0 Z' which does not behave the same as a mathematical expression"
"comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2"
'comparison of address of base class subobject %0 of class %1 to field %2 has unspecified value'
'comparison of address of fields %0 and %2 of %4 with differing access specifiers (%1 vs %3) has unspecified value'
'comparison of addresses of potentially overlapping literals has unspecified value'
'comparison of addresses of subobjects of different base classes has unspecified value'
'comparison of different enumeration types in switch statement%diff{ ($ and $)|}0,1'
'comparison of distinct block types%diff{ ($ and $)|}0,1'
'comparison of distinct pointer types%diff{ ($ and $)|}0,1'
'comparison of integers of different signs: %0 and %1'
"comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter"
"comparison of numeric address '%0' with pointer '%1' can only be performed at runtime"
'comparison of pointer to virtual member function %0 has unspecified value'
"comparison of pointers '%0' and '%1' to unrelated zero-sized objects"
'comparison operator template cannot be defaulted'
"compatibility_version does not match: '%0' (provided) vs '%1' (found)"
'compatible type %0 specified here'
"compilation database '%0' could not be opened: %1"
'compile time floating point arithmetic suppressed in strict evaluation modes'
"compiled from '%0' and '%1'"
'compiler has implicitly changed method %0 return type'
'completion handler is called twice'
'completion handler is never %select{used|called}1 when %select{taking true branch|taking false branch|handling this case|none of the cases applies|entering the loop|skipping the loop|taking one of the branches}2'
'complex initialization specifying real and imaginary components is an extension'
'complex integer types are a GNU extension'
'complex numbers are an extension in a freestanding C99 implementation'
'compound binary operator not supported, only +=, *=, -=, /=, &=, ^=, |=, <<=, or >>= are permitted'
'compound literal cannot be of variable-length array type'
'compound literal in function scope may not be qualified with an address space'
'compound literals are a C99-specific feature'
'concatenated NSString literal for an NSArray expression - possibly missing a comma'
'concept cannot have associated constraints'
'concept declarations may only appear in global or namespace scope'
'concept named in type constraint is not a type concept'
'concept template parameter list must have at least one parameter; explicit specialization of concepts is not allowed'
"condition of OpenMP for loop must be a relational comparison ('<', '<=', '>', %select{or '>='|'>=', or '!='}0) of loop variable %1"
'conditional expression is ambiguous; %diff{$ and $|types}0,1 can be converted to several common types'
'conditional expression is ambiguous; %diff{$ can be converted to $ and vice versa|types can be convert to each other}0,1'
"configuration file '%0' cannot be found"
"configuration file '%0' cannot be opened: %1"
'configuration macros are only allowed in top-level modules'
'conflicting %0 here'
'conflicting __device__ function declared here'
'conflicting address space qualifiers are provided between types %0 and %1'
'conflicting asm label'
'conflicting attribute is here'
'conflicting attributes %0 are ignored'
"conflicting attributes for state '%0'"
'conflicting code segment specifiers'
'conflicting declaration'
'conflicting deduction %diff{$ against $|types}0,1 for parameter'
"conflicting deployment targets, both '%0' and '%1' are present in environment"
'conflicting distributed object modifiers on parameter type in declaration of %0'
'conflicting distributed object modifiers on parameter type in implementation of %0'
'conflicting distributed object modifiers on return type in declaration of %0'
'conflicting distributed object modifiers on return type in implementation of %0'
'conflicting instance variable names: %0 vs %1'
'conflicting loop attribute %0'
'conflicting nullability specifier on parameter types, %0 conflicts with existing specifier %1'
'conflicting nullability specifier on return types, %0 conflicts with existing specifier %1'
"conflicting option '-fcoro-aligned-allocation' and '-fno-aligned-allocation'"
'conflicting parameter qualifier %0 on parameter %1'
'conflicting parameter types in declaration of %0%diff{: $ vs $|}1,2'
'conflicting parameter types in declaration of %0: %1 vs %2'
'conflicting parameter types in implementation of %0%diff{: $ vs $|}1,2'
'conflicting parameter types in implementation of %0: %1 vs %2'
'conflicting pass_object_size attributes on parameters'
'conflicting prototype is here'
"conflicting re-export of module '%0' as '%1' or '%2'"
'conflicting return type in declaration of %0%diff{: $ vs $|}1,2'
'conflicting return type in declaration of %0: %1 vs %2'
'conflicting return type in implementation of %0%diff{: $ vs $|}1,2'
'conflicting return type in implementation of %0: %1 vs %2'
'conflicting super class name %0'
'conflicting types for %0'
'conflicting types for alias %0'
'conflicting variadic declaration of method and its implementation'
'conformance of forward class %0 to protocol %1 cannot be confirmed'
"consecutive right angle brackets are incompatible with C++98 (use '> >')"
'conservative handling of inline assembly'
"consider adding '%0' to the header search path"
"consider defining %0 with the '%1' calling convention"
'consider making the bit-field type %select{unsigned|signed}0'
'consider providing a complete definition for %0'
"consider using '__sized_by%select{|_or_null}0' instead of '__counted_by%select{|_or_null}0'"
"consider using __builtin_trap() or qualifying pointer with 'volatile'"
'consider using vld1_%0%1() to initialize a vector from memory, or vcreate_%0%1() to initialize from an integer constant'
'consider using vld1q_%0%1() to initialize a vector from memory, or vcombine_%0%1(vcreate_%0%1(), vcreate_%0%1()) to initialize from integer constants'
'const variable cannot be emitted on device side due to dynamic initialization'
'const-qualified list item cannot be %0'
'const-qualified variable cannot be %0'
'const-qualified variable without mutable fields cannot be %0'
'constant evaluation of %0 between arrays of types %1 and %2 is not supported; only arrays of narrow character types can be compared'
'constant evaluation of %0 on array of type %1 is not supported; only arrays of narrow character types can be searched'
'constant expression evaluates to %0 which cannot be narrowed to type %1'
'constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11'
'consteval function %0 cannot override a non-consteval function'
'consteval if is a C++23 extension'
'consteval if is always true in an %select{unevaluated|immediate}0 context'
'consteval if is incompatible with C++ standards before C++23'
'constexpr %select{member function|constructor}0 not allowed in %select{struct|interface|class}1 with virtual base %plural{1:class|:classes}2'
'constexpr bit cast involving type %0 is not yet supported'
'constexpr bit_cast involving bit-field is not yet supported'
'constexpr constructor that does not initialize all members is a C++20 extension'
'constexpr constructor that does not initialize all members is incompatible with C++ standards before C++20'
'constexpr evaluation exceeded maximum depth of %0 calls'
'constexpr evaluation hit maximum call limit'
'constexpr evaluation hit maximum heap allocation limit'
'constexpr evaluation hit maximum step limit; possible infinite loop?'
'constexpr function %0 without __host__ or __device__ attributes cannot overload __device__ function with the same signature; add a __host__ attribute, or build with -fno-cuda-host-device-constexpr'
'constexpr function with no return statements is incompatible with C++ standards before C++14'
'constexpr if condition is not a constant expression'
'constexpr if is a C++17 extension'
'constexpr if is incompatible with C++ standards before C++17'
'constexpr initializer evaluates to %0 which is not exactly representable in type %1'
'constexpr initializer for type %0 is of type %1'
'constexpr on lambda expressions is incompatible with C++ standards before C++17'
'constexpr pointer initializer is not null'
'constexpr union constructor that does not initialize any member is a C++20 extension'
'constexpr union constructor that does not initialize any member is incompatible with C++ standards before C++20'
'constexpr variable %0 must be initialized by a constant expression'
'constexpr variable %0 must have constant destruction'
'constexpr variable cannot have non-literal type %0'
'constexpr variable cannot have type %0'
'constexpr variable declaration must be a definition'
'constrained by %select{|implicitly }1%select{private|protected}0 inheritance here'
"constrained placeholder types other than simple 'auto' on non-type template parameters not supported yet"
"constraint '%0' is already present here"
'constraint depends on a previously diagnosed expression'
'constraints not satisfied for %select{class template|function template|variable template|alias template|template template parameter|template}0 %1%2'
"construct '%0' not allowed in a region associated with a directive with 'order' clause"
'construction of individual component of complex number is not yet supported in constant expressions'
'constructor call from initializer list is incompatible with C++98'
"constructor cannot be declared '%0'"
'constructor cannot be redeclared'
'constructor cannot have a return type'
'constructor for %0 creates a delegation cycle'
'constructor from base class %0 inherited here'
'constructor inherited by %0 from base class %1 is implicitly deleted'
'constructor inherited from base class %0 cannot be used in a constant expression; derived class cannot be implicitly initialized'
'constructor initializer %0 does not name a class'
'constructor of %0 inherited from multiple base class subobjects'
'constructor of base class %0 is not called'
'constructor parameter %0 shadows the field %1 of %2'
"constructs with the same name must have a 'hint' clause with the same value"
"consumed analysis attribute is attached to member of class %0 which isn't marked as consumable"
'container access result unused - container access should not be used for side effects'
'context %select{set|selector|property}0 options are: %1'
'continue even if build-ids in input binary and perf.data mismatch'
'control flows through the definition of a %select{static|thread_local}0 variable'
'control reached end of constexpr function'
'controlling expression type %0 compatible with %1 generic association types'
'controlling expression type %0 not compatible with any generic association type'
"convenience initializer missing a 'self' call to another initializer"
"convenience initializer should not invoke an initializer on 'super'"
'conversion %diff{from $ to $|between types}0,1 is ambiguous'
'conversion between fixed point and %0 is not yet supported'
'conversion between matrix type %0 and incompatible type %1 is not allowed'
'conversion between matrix types%diff{ $ and $|}0,1 of different size is not allowed'
'conversion candidate %0 not viable: constraints not satisfied'
'conversion candidate of type %0'
'conversion from %0 to %1 in converted constant expression would bind reference to a temporary'
'conversion from %0 to %1 is not allowed in a converted constant expression'
'conversion from pointer to member of class %0 to pointer to member of class %1 via virtual base %2 is not allowed'
'conversion from string literal to %0 is deprecated'
'conversion function %diff{from $ to $|between types}0,1 invokes a deleted function%select{|: %3}2'
'conversion function cannot be redeclared'
'conversion function cannot be variadic'
'conversion function cannot convert to a function type'
'conversion function cannot convert to an array type'
'conversion function cannot have a return type'
'conversion function cannot have any parameters'
'conversion function converting %0 to %1 will never be used'
'conversion function converting %0 to its base class %1 will never be used'
'conversion function converting %0 to itself will never be used'
'conversion function must be a non-static member function'
'conversion to %select{integral|enumeration}0 type %1'
'conversion to %select{integral|enumeration}0 type %1 declared here'
'conversion to pointer type %0'
'convert moves with rbp stack memory operand (unsafe, must be off for binaries compiled with -fomit-frame-pointer)'
'convert moves with stack memory operand (potentially unsafe)'
'converting delete expression from type %0 to type %1 invokes an explicit conversion function'
'converting the enum constant to a boolean'
"converting the result of '<<' to a boolean always evaluates to %select{false|true}0"
"converting the result of '<<' to a boolean; did you mean to compare with '0'?"
"converting the result of '?:' with integer constants to a boolean always evaluates to 'true'"
'converting to boxing syntax requires casting %0 to %1'
'coprocessor %0 must be configured as %select{GCP|CDE}1'
'copy %select{constructor|assignment operator}0 is implicitly deleted because %1 has a user-declared move %select{constructor|assignment operator}2'
'copy constructor must pass its first argument by reference'
'copy constructor of %0 is implicitly deleted because field %1 is of rvalue reference type %2'
'copying a temporary object of incomplete type %0'
"coroutine %0 cannot be declared 'noreturn' as it always returns a coroutine handle"
"could not acquire lock file for module '%0': %1"
"could not build module '%0'"
"could not calculate number of iterations calling 'operator-' with upper and lower loop bounds"
'could not determine the original source location for %0:%1:%2'
"could not find ';' after @import"
'could not find Objective-C class %0 to convert %1 to %2'
'could not match %diff{$ against $|types}0,1'
"could not open '%0' for embedding"
"could not read %0 input list '%1': %2"
"could not read directory '%0': %1"
"could not remap file '%0' to the contents of file '%1'"
'covariant thunk required by %0'
"cpu '%0' does not support rv%select{32|64}1"
'create a static PC table'
"current API version is '%0', but plugin was compiled with version '%1'"
'current file is older than dependency %0'
"current handling of vector bool and vector pixel types in this context are deprecated; the default behaviour will soon change to that implied by the '-altivec-compat=xl' option"
"current_version does not match: '%0' (provided) vs '%1' (found)"
"cycle in acquired_before/after dependencies, starting with '%0'"
"cyclic dependency in module '%0': %1"
'd'
'data argument not used by format string'
"data argument position '%0' exceeds the number of data arguments (%1)"
'data layout string to use'
'data member instantiated with function type %0'
"data-sharing attribute '%0' in '%1' clause requires OpenMP version %2 or above"
'dbx'
"dealloc return type must be correctly specified as 'void' under ARC, instead of %0"
'debug'
"debug information option '%0' is not supported for target '%1'"
"debug information option '%0' is not supported; requires DWARF-%2 but target '%1' only provides DWARF-%3"
'debug print callable symbols defined by materialization units'
'debug print data symbols defined by materialization units'
'debug print hidden symbols defined by materialization units'
'debug stack'
"declaration %0 attached to named module '%1' cannot be attached to other modules"
"declaration %0 is detected to be defined in multiple module units, first is from '%1' and second is from '%2'; the compiler may not be good at merging the definitions. "
"declaration '%0' is %select{weak defined|thread local}1, but symbol is not in dynamic library"
"declaration '%0' is marked %select{available|unavailable}1, but symbol is %select{not |}2exported in dynamic library"
"declaration cannot be inferred '%0' because it has no definition in this translation unit"
'declaration conflicts with target of using declaration already in scope'
'declaration does not declare a parameter'
'declaration does not declare anything'
"declaration has external linkage, but dynamic library doesn't have symbol '%0'"
"declaration has external linkage, but symbol has internal linkage in dynamic library '%0'"
'declaration hides type'
'declaration in interface'
"declaration in interface is not in the '%select{alloc|copy|init|new}0' family because %select{its result type is not an object pointer|its result type is unrelated to its receiver type}1"
"declaration is marked with '%select{\\|@}0deprecated' command but does not have a deprecation attribute"
'declaration is not declared in any declare target region'
'declaration marked as declare target after first use, it may lead to incorrect results'
"declaration missing '[[carries_dependency]]' attribute is here"
'declaration of %0 does not match'
'declaration of %0 has a different language linkage'
'declaration of %0 in %select{the global module|module %2}1 follows declaration in %select{the global module|module %4}3'
'declaration of %0 is missing in %1 class'
"declaration of %0 overrides a '%select{final|sealed}1' function"
'declaration of %0 shadows template parameter'
'declaration of %0 will not be visible outside of this function'
'declaration of %0 with internal linkage cannot be exported'
'declaration of %1 %select{with C language linkage|in global scope}0 conflicts with declaration %select{in global scope|with C language linkage}0'
"declaration of a variadic function without a comma before '...' is deprecated"
'declaration of anonymous %0 must be a definition'
'declaration of block scope identifier with linkage cannot have an initializer'
"declaration of built-in function '%0' requires the declaration of the 'jmp_buf' type, commonly provided in the header <setjmp.h>"
"declaration of built-in function '%1' requires inclusion of the header <%0>"
'declaration of constexpr static data member %0 requires an initializer'
'declaration of instance variables in the interface is deprecated'
"declaration of non-local variable in 'for' loop"
"declaration of non-local variable in 'for' loop is a C23 extension"
"declaration of non-local variable in 'for' loop is incompatible with C standards before C23"
'declaration of reference variable %0 requires an initializer'
'declaration of type aware %0 in %1 must have matching type aware %2'
'declaration of variable %0 with deduced type %1 requires an initializer'
'declaration requires a global constructor'
'declaration requires a global destructor'
'declaration requires an exit-time destructor'
'declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2|structured binding}1'
'declaration uses __weak, but ARC is disabled'
'declaration uses __weak, which the current deployment target does not support'
"declaration uses identifier '%0', which is %select{a reserved identifier|not a reserved identifier|reserved in the global namespace}1"
'declaration uses type that is ill-formed in ARC'
'declarator requires an identifier'
"declare 'static' if the %select{variable|function}0 is not intended to be used outside of this translation unit"
'declare the parameter __strong or capture a __block __strong variable to keep values alive across autorelease pools'
"declared %select{'returns_nonnull'|'nonnull'}0 here"
'declared %select{in global scope|with C language linkage}0 here'
'declared as a non-template here'
'declared here'
'declared here with type %0'
"declared here%select{ in module '%1'|}0"
'declared with %0 attribute here'
"declared with class '%0' here"
'declared with index %0 here'
'declaring function parameter of type %0 is not allowed%select{; did you forget * ?|}1'
'declaring function return value of type %0 is not allowed %select{; did you forget * ?|}1'
"declaring overloaded %0 as 'static' is a C++23 extension"
"declaring overloaded %0 as 'static' is incompatible with C++ standards before C++23"
'declaring variable of type %0 is not allowed'
'decode probes section from binary'
'decomposition declaration %0 requires an initializer'
'decomposition declaration cannot be a template'
"decomposition declaration cannot be declared %plural{1:'%1'|:with '%1' specifiers}0"
"decomposition declaration cannot be declared with constrained 'auto'"
'decomposition declaration cannot be declared with parentheses'
"decomposition declaration cannot be declared with type %0; declared type must be 'auto' or reference to 'auto'"
"decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is a C++20 extension"
"decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++20"
'decomposition declaration must be the only declaration in its group'
'decomposition declaration not permitted in this context'
'decomposition declarations are a C++17 extension'
'decomposition declarations are incompatible with C++ standards before C++17'
'deduced conflicting types %diff{($ vs $) |}0,1for initializer list element type'
'deduced incomplete pack %0 for template parameter %1'
'deduced non-type template argument does not have the same type as the corresponding template parameter%diff{ ($ vs $)|}0,1'
"deduced return type for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must be 'auto', not %1"
'deduced return types are a C++14 extension'
'deduced type %0 does not satisfy %1'
'deduced type %1 of deduction guide is not %select{|written as }2a specialization of template %0'
'deduction guide cannot be %select{explicitly instantiated|explicitly specialized}0'
"deduction guide cannot be declared '%0'"
'deduction guide cannot have a function definition'
'deduction guide declaration without trailing return type'
'deduction guide declared %0 by intervening access specifier'
'deduction guide has different access from the corresponding member template'
'deduction guide must be declared in the same scope as template %q0'
'deduction guide template contains %select{a template parameter|template parameters}0 that cannot be deduced'
'default %select{argument|non-type template argument}0 may not use a GNU statement expression'
'default alignment for functions'
'default argument declared here'
'default argument not permitted on an explicit %select{instantiation|specialization}0 of function %1'
"default argument references 'this'"
'default argument references local variable %0 of enclosing function'
'default argument references parameter %0'
'default argument used here'
'default arguments can only be specified for parameters in a function declaration'
'default arguments cannot be added to a function template that has already been declared'
'default arguments cannot be added to an out-of-line definition of a member of a %select{class template|class template partial specialization|nested class in a template}0'
'default arguments not allowed for parameters of a requires expression'
'default assign attribute on property %0 which implements NSCopying protocol is not appropriate with -fobjc-gc[-only]'
'default capture by %select{value|reference}0'
'default constructed field %0 declared here'
'default exception handling model'
'default initialization of an object of const type %0%select{| without a user-provided default constructor}1'
'default initialization of an object of const type %0%select{| without a user-provided default constructor}1 is a Microsoft extension'
'default initialization of an object of type %0 is incompatible with C++'
'default initialization of an object of type %0 leaves the object uninitialized%select{| and is incompatible with C++}1'
'default initialization of an object of type %0 with const member is incompatible with C++'
'default initialization of an object of type %0 with const member leaves the object uninitialized%select{| and is incompatible with C++}1'
'default label in switch which covers all enumeration values'
'default member initializer declared here'
'default member initializer for %0 uses itself'
'default member initializer for %1 needed within definition of enclosing class %0 outside of member functions'
'default member initializer for bit-field is a C++20 extension'
'default member initializer for bit-field is incompatible with C++ standards before C++20'
'default member initializer for non-static data member is a C++11 extension'
'default member initializer for non-static data members is incompatible with C++98'
"default property attribute 'assign' not appropriate for object"
'default scope specifier for attributes is a C++17 extension'
'default scope specifier for attributes is incompatible with C++ standards before C++17'
'default template argument for a template template parameter must be a class template'
'default template argument in a class template partial specialization'
'default template argument not permitted on a friend template'
'default template arguments for a function template are a C++11 extension'
'default template arguments for a function template are incompatible with C++98'
'defaulted %0 is implicitly deleted because %2 is a %select{union-like class|union}1 with variant members'
'defaulted %0 is implicitly deleted because a builtin comparison function using this conversion would be the best match for the comparison'
'defaulted %0 is implicitly deleted because class %1 has a reference member'
'defaulted %0 is implicitly deleted because defaulted comparison of vector types is not supported'
"defaulted %0 is implicitly deleted because implied %select{|'==' |'<' }1comparison %select{|for member %3 |for base class %3 }2is ambiguous"
'defaulted %0 is implicitly deleted because it would invoke a %select{private|protected}3 %4%select{ member of %6| member of %6 to compare member %2| to compare base class %2}1'
'defaulted %0 is implicitly deleted because it would invoke a deleted comparison function%select{| for member %2| for base class %2}1'
"defaulted %0 is implicitly deleted because there is no viable %select{three-way comparison function|'operator=='}1 for %select{|member |base class }2%3"
'defaulted %0 is implicitly deleted because this non-rewritten comparison function would be the best match for the comparison'
'defaulted comparison function must not be volatile'
'defaulted comparison operators are a C++20 extension'
'defaulted comparison operators are incompatible with C++ standards before C++20'
"defaulted definition of %select{%select{<ERROR>|equality|three-way|equality|relational}1 comparison operator|three-way comparison operator}0 cannot be declared %select{constexpr|consteval}2 because %select{it|for which the corresponding implicit 'operator==' }0 invokes a non-constexpr comparison function"
'defaulted definition of %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 cannot be marked %select{constexpr|consteval}1 before C++23'
'defaulted member %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must be const-qualified'
'defaulted move assignment operator of %0 will move assign virtual base class %1 multiple times'
"defaulting %select{this %select{<ERROR>|equality|three-way|equality|relational}1 comparison operator|the corresponding implicit 'operator==' for this defaulted 'operator<=>'}0 would delete it after its first declaration"
'defaulting this %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator is not allowed because it was already declared outside the class'
'defaulting this %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 would delete it after its first declaration'
'defined as %0'
"defining a type within '%select{__builtin_offsetof|offsetof}0' is a C23 extension"
'definition %0 cannot also be an %select{alias|ifunc}1'
'definition has no member %0'
"definition in module '%0' is here"
"definition of %0 is not complete until the closing '}'"
'definition of a %select{static|thread_local}1 variable in a constexpr %select{function|constructor}0 is a C++23 extension'
'definition of a %select{static|thread_local}1 variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23'
'definition of a variable of non-literal type in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23'
'definition of builtin function %0'
'definition of class %0 must be available to use Objective-C %select{array literals|dictionary literals|numeric literals|boxed expressions|string literals}1'
'definition of dllimport data'
'definition of dllimport static field'
'definition of dllimport static field not allowed'
'definition of explicitly defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}0'
'definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared copy %select{assignment operator|constructor}1'
'definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared destructor'
'definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided copy %select{assignment operator|constructor}1'
'definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-provided destructor'
'definition of implicitly declared %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor|function}1'
'definition of macro %0 does not match definition in precompiled header'
"definition of macro '%0' differs between the precompiled file '%3' ('%1') and the command line ('%2')"
"definition of module '%0' is not available; use -fmodule-file= to specify path to precompiled module interface"
'definition of type %0 conflicts with %select{typedef|type alias}1 of the same name'
'definition of variable with array type needs an explicit size or an initializer'
'definition or redeclaration of %0 cannot name the global scope'
'definition or redeclaration of %0 not allowed inside a block'
'definition or redeclaration of %0 not allowed inside a function'
"definition with same mangled name '%0' as another definition"
'defsym must be of the form: sym=value: %0'
'delegating constructors are incompatible with C++98'
'delegating constructors are permitted only in C++11'
'delete of object with dynamic type %1 through pointer to base class type %0 with non-virtual destructor'
"delete of pointer '%0' that does not point to a heap-allocated object"
'delete of pointer that has already been deleted'
"delete of pointer%select{ to subobject|}1 '%0' %select{|that does not point to complete object}1"
'deleted definition must be first declaration'
'deleted function %0 cannot override a non-deleted function'
'deleting incomplete class type %0; no conversions to pointer type'
'deleting pointer to incomplete type %0 is incompatible with C++2c and may cause undefined behavior'
'delimited escape sequence cannot be empty'
'delimited escape sequences are incompatible with C standards before C2y'
'delinearize'
'demangle symbols (default)'
'denormals are flushed to positive zero'
'denormals have unknown treatment'
'dense YAML representation'
"depend modifier cannot be used with 'sink' or 'source' depend type"
'dependent %select{__if_not_exists|__if_exists}0 declarations are ignored'
'dependent nested name specifier %0 for friend class declaration is not supported; turning off access control for %1'
'dependent nested name specifier %0 for friend template declaration is not supported; ignoring this friend declaration'
"dependent using declaration resolved to type without 'typename'"
'dereference of pointer to incomplete type %0'
'dereference of type %1 that was reinterpret_cast from type %0 has undefined behavior'
'dereferenced pointer past the end of %select{|subobject of }0%select{temporary|%2}1 is not a constant expression'
"dereferencing %0; was declared with a 'noderef' type"
'dereferencing a __weak pointer is not allowed due to possible null value caused by race condition, assign it to strong variable first'
"dereferencing expression marked as 'noderef'"
'derived class must specify the same code segment as its base classes'
'descending'
'designated initializer invoked a non-designated initializer'
"designated initializer missing a 'super' call to a designated initializer of the super class"
"designated initializer should only invoke a designated initializer on 'super'"
'designated initializers are a C++20 extension'
'designated initializers are a C99 feature'
'designated initializers are incompatible with C++ standards before C++20'
'designator in initializer for %select{scalar|indivisible sizeless}0 type %1'
'designator into flexible array member subobject'
'destroying delete is not permitted to be type aware'
"destroying object '%0' whose lifetime has already ended"
'destroying operator delete can have only an optional size and optional alignment parameter'
'destruction of individual component of complex number is not yet supported in constant expressions'
'destruction of object that is already being destroyed'
'destructor cannot be declared %select{<ERROR>|constexpr|consteval|constinit}0'
'destructor cannot be declared %select{<ERROR>|constexpr|consteval|constinit}0 because %select{data member %2|base class %3}1 does not have a constexpr destructor'
"destructor cannot be declared '%0'"
'destructor cannot be declared as a template'
'destructor cannot be declared using a %select{typedef|type alias}1 %0 of the class name'
'destructor cannot be redeclared'
'destructor cannot be variadic'
'destructor cannot have a return type'
'destructor cannot have any parameters'
'destructor for %0 is not trivial because it is virtual'
'destructor must be a non-static member function'
'destructor name %0 does not refer to a template'
'destructor of class %0 is ambiguous'
'destructor type %0 in object destruction expression does not match the type %1 of the object being destroyed'
'detect use after scope within function'
'detected while default synthesizing properties in class implementation'
'determine if lfence instruction should exist in the retpoline'
'determine the availability of r11 before indirect branches'
'determines whether to demangle function name when symbolizing function ids from the input log'
'determines whether to sort input log records by timestamp'
"device clause with ancestor device-modifier used without specifying 'requires reverse_offload'"
"device files are not yet supported by '#embed' directive"
'diagnostic formatting in SARIF mode is currently unstable'
'diagnostic msg: %0'
'diagtool find-diagnostic-id options'
"did not expect %0 '%2' to be managed by '%1'"
"did not find header '%0' in framework '%1' (loaded from '%2')"
"did not specify mandatory parameter '%0'"
"did you forget ';'?"
"did you intend to use '#pragma pack (pop)' instead of '#pragma pack()'?"
"did you mean %0 ('%2' U+%1)?"
'did you mean %0?'
'did you mean %select{struct|interface|class}0 here?'
"did you mean '%0'?"
"did you mean 'using namespace'?"
"did you mean to %select{dereference the argument to 'sizeof' (and multiply it by the number of elements)|remove the addressof in the argument to 'sizeof' (and multiply it by the number of elements)|provide an explicit length}0?"
'did you mean to call the %0 method?'
'did you mean to compare the result of %0 instead?'
"did you mean to use '%0'?"
"did you mean to use '.' instead?"
"did you mean to use '\\u'?"
"did you mean to use 'typename'?"
'did you mean to use __block %0?'
"differing user-defined suffixes ('%0' and '%1') in string literal concatenation"
'digit separator cannot appear at %select{start|end}0 of digit sequence'
'digit separators are incompatible with C standards before C23'
'digit separators are incompatible with C++ standards before C++14'
'dimension expression does not evaluate to a constant unsigned int'
"direct access to Objective-C's isa is deprecated in favor of object_getClass()"
'direct attribute on property %0 ignored (not implemented by this Objective-C runtime)'
'direct base %0 is inaccessible due to ambiguity:%1'
'direct comparison of %select{an array literal|a dictionary literal|a numeric literal|a boxed expression|}0 has undefined behavior'
'direct comparison of a string literal has undefined behavior'
'direct member declared here'
'direct method %0 declared here'
'direct method implementation was previously declared not direct'
'direct method was declared in %select{the primary interface|an extension|a category}0 but is implemented in %select{the primary interface|a category|a different category}1'
'direct property cannot be @dynamic'
"directive '#pragma omp %0' cannot contain more than one '%1' clause%select{| with '%3' name modifier| with 'source' dependence}2"
"directive '#pragma omp %0' cannot contain more than one 'seq_cst',%select{ 'relaxed',|}1 'acq_rel', 'acquire' or 'release' clause"
"directive '#pragma omp %0' requires the '%1' clause"
"directive '#pragma omp atomic%select{ %0|}1' cannot be used with '%2' clause"
"directive '#pragma omp atomic' cannot contain more than one 'read', 'write', 'update', 'capture', or 'compare' clause"
"directive '#pragma omp taskwait' cannot use 'nowait' clause without 'depend' clause"
'directive may only be specified in protocols only'
'directive must be at file or namespace scope'
"directive name modifier '%0' is not allowed for '#pragma omp %1'"
'directory to dump objects to'
'disable '
'disable P10 store forward-friendly conversion'
'disable all inlining (overrides other inlining options)'
'disable attaching TBAA tags to memory accessing operations to override default Flang behavior'
'disable attributor runs'
'disable automatically generated 32byte paired vector stores'
'disable constant hoisting on PPC'
'disable debug output'
'disable generation of structured FIR'
'disable instrumentation optimizations that sacrifice profile accuracy (for debugging, default: false)'
'disable multithreading'
'disable outlining indirect calls.'
'disable peepholes'
'disable preincrement load/store generation on PPC'
'disable setting the node scheduling preference to ILP on PPC'
'disable sibling call optimization on ppc'
'disable similarity matching, and outlining, across branches for debugging purposes.'
'disable the default synthesis of Objective-C properties'
'disable the feature'
'disable unaligned load/store generation on PPC'
'disable vector permute decomposition'
'disabled expansion of recursive macro'
'disables externalization of functions whose addresses are taken'
'disables externalization of global variable with local linkage; may cause globals to be duplicated which increases binary size'
'discriminator argument to ptrauth_sign_constant must be a constant integer, the address of the global variable where the result will be stored, or a blend of the two'
'display a graph using the fractional block frequency representation.'
'display a graph using the raw integer fractional block frequency representation.'
'display a graph using the real profile count if available.'
'display the encoded probes in binary section'
'display the results in JSON format'
'display the results in a list sorted by total time'
'display the results in a merged list sorted by pass name'
'display the results in text format'
'display the results ina with a nested tree view'
'display the results with a nested pipeline view'
'div and rem instructions on integers with more than <N> bits are expanded.'
'division by zero'
'division by zero in preprocessor expression'
'dllexport/dllimport inline member functions of dllexport/import classes (default)'
'dllimport cannot be applied to non-inline function definition'
'do not apply'
'do not diff functions whose contents have not been changed from one binary to another'
'do not display graphs.'
'do not emit module ctors for global counters'
'do not infer Objective-C related result type based on method family'
'do not optimize PLT calls'
'do not optimize functions with jump tables'
'do not perform frame optimization'
'do not perform indirect call promotion'
'do not print merged data to stdout'
'do not print objects/functions'
'do not reorder basic blocks'
'do not reorder functions'
'do not scan cold functions for external references (may result in slower binary)'
'do not show.'
'domain argument %0 does not point to an NSString or CFString constant'
'domain argument %select{|%1 }0does not refer to global constant'
"don't always align innermost loop to 32 bytes on ppc"
"don't demangle symbols"
"don't report bad accesses via pointers with this tag"
"don't test for failure"
'double precision constant requires %select{cl_khr_fp64|cl_khr_fp64 and __opencl_c_fp64}0, casting to single precision'
'double-quoted include "%0" cannot be aliased to angle-bracketed include <%1>'
'double-quoted include "%0" in framework header, expected angle-bracketed instead'
'due to %0 being dllexported%select{|; try compiling in C++11 mode}1'
'due to lvalue conversion of the controlling expression, association of type %0 will never be selected because it is %select{of array type|qualified}1'
'dump CFG of functions with unknown control flow'
'dump CodeView symbol record raw bytes'
'dump CodeView type record raw bytes from IPI stream'
'dump CodeView type record raw bytes from TPI stream'
'dump CodeView type records from IPI stream'
'dump CodeView type records from TPI stream'
'dump FPO records'
'dump Globals hashes'
'dump Globals symbol records'
'dump Linux alternative instructions info'
'dump Linux kernel PCI fixup table'
'dump Linux kernel SMP locks'
'dump Linux kernel exception table'
'dump Linux kernel paravitual patch sites'
'dump Linux kernel static calls'
'dump Linux kernel static keys jump table'
'dump PDB String Table'
'dump PDB String Table Details'
'dump PDB named stream table'
'dump Publics hashes and address maps'
'dump Publics stream data'
'dump all BAT tables'
'dump backreferences'
'dump callgraph to the given file'
'dump compiland information'
'dump cross module exports (DEBUG_S_CROSSSCOPEEXPORTS subsection)'
'dump cross module imports (DEBUG_S_CROSSSCOPEIMPORTS subsection)'
'dump file information'
'dump file summary'
"dump function CFGs to graphviz format after each stage;enable '-print-loops' for color-coded blocks"
'dump function into assembly'
'dump id hashes and index offsets'
'dump inlinee line information (DEBUG_S_INLINEELINES subsection)'
'dump jitted objects'
'dump module symbols'
'dump parsed bolt data for debugging'
'dump public / global common record stream'
'dump raw ORC unwind information (sorted)'
'dump section contributions'
'dump section map'
'dump source file/line information (DEBUG_S_LINES subsection)'
'dump statistics on the number and size of types transitively referenced by symbol records'
"dump subsections from each module's debug stream"
'dump summary of the PDB streams'
'dump the Pre-FIR tree prior to FIR generation'
'dump the preprocessed tokens'
'dump the symbol table'
"dump the symbols record's all children."
"dump the symbols record's all parents."
'dump the syntax tree'
'dump type hashes and index offsets'
'dumps the generated benchmark object to disk and prints a message to access it'
"duplicate %0 clause in an 'external_source_symbol' attribute"
"duplicate '%0' declaration specifier"
"duplicate 'virtual' in base specifier"
"duplicate asm qualifier '%0'"
"duplicate attribute subject matcher '%0'"
"duplicate case value '%0'"
"duplicate case value: '%0' and '%1' both equal '%2'"
'duplicate code segment specifiers'
'duplicate declaration of %0 is invalid in C++'
'duplicate declaration of method %0'
'duplicate default generic association'
'duplicate definition of category %1 on interface %0'
'duplicate explicit instantiation of %0'
'duplicate explicit instantiation of %0 ignored as a Microsoft extension'
'duplicate interface definition for class %0'
'duplicate key in dictionary literal'
'duplicate macro parameter name %0'
'duplicate member %0'
"duplicate modifier '%0' in '%1' clause"
"duplicate module file extension block name '%0'"
'duplicate nullability specifier %0'
'duplicate parameter modifier %0'
'duplicate protocol definition of %0 is ignored'
'duplicate unconditional branches that cross a cache line'
'duplicate use of asm operand name "%0"'
"duplicated command '%select{\\|@}0%1'"
'during field initialization in %select{this|the implicit default}0 constructor'
'during template argument deduction for %select{class|variable}0 template %select{partial specialization |}1%2 %3'
'dxc compatibility options.'
'dxv not found; resulting DXIL will not be validated or signed for use in release environment'
'dynamic exception specifications are deprecated'
'dynamic exception specifications with types are currently ignored in wasm'
'dynamic initialization is not supported for __device__, __constant__, __shared__, and __managed__ variables'
"dynamic library symbol '%0' is %select{weak defined|thread local}1, but its declaration is not"
'dynamic memory allocation is not permitted in constant expressions until C++20'
'dynamic property cannot have instance variable specification'
'dynamic_cast will not work since RTTI data is disabled by %select{-fno-rtti-data|/GR-}0'
'e'
'editor placeholder in source file'
"effects conflict when merging declarations; kept '%0', discarded '%1'"
'elaborated enum specifier cannot be declared as a friend'
'element %0 also has value %1'
'element %0 has been implicitly assigned %1 which another element has been assigned'
'eliminate unreachable code'
'ellipsis in pack %select{|init-}0capture must appear %select{after|before}0 the name of the capture'
'embedded and GOT-based position independence are incompatible'
'embedding a #%0 directive within macro arguments is not supported'
'embedding a directive within macro arguments has undefined behavior'
'emit JSON'
'emit YAML'
'emit normal text output (default)'
'emit warnings'
'empty %0 cannot be composed with named ones'
'empty %select{struct|union}0 is a GNU extension'
'empty case range specified'
'empty character constant'
"empty delimited universal character name; treating as '\\' '%0' '{' '}'"
"empty expression statement has no effect; remove unnecessary ';' to silence this warning"
'empty filename'
"empty initialization statement of '%select{if|switch|range-based for}0' has no effect"
'empty macro arguments are a C99 feature'
'empty macro arguments are incompatible with C++98'
'empty modifier-specification-list is not allowed'
"empty paragraph passed to '%select{\\|@}0%1' command"
'empty parentheses interpreted as a function declaration'
'empty symbolic operand name in inline assembly string'
'enable '
'enable CUDA Fortran'
'enable PC Relative linker optimization'
'enable all attributor runs'
'enable all debugging printout'
'enable all peephole optimizations'
'enable call graph SCC attributor runs'
'enable coalescing of duplicate branches for PPC'
'enable const and copy propagation after tail duplication'
'enable elimination of sign-extensions'
'enable elimination of zero-extensions'
'enable extended encoding of block type signature'
'enable fixed form'
'enable load elimination using memory profiling data when performing ICP'
"enable memory profile parsing if it's present in the input data, on by default unless `--itrace` is set."
'enable module-wide attributor runs'
'enable openacc'
'enable openmp'
'enable openmp GPU target codegen'
'enable openmp device compilation'
'enable optimization of conditional traps'
'enable peephole optimizations'
'enable preservation of all attributes. even those that are unlikely to be useful'
'enable preservation of attributes throughout code transformation'
'enable register pressure reduce in machine combiner pass.'
'enable safe stack coloring'
'enable safe stack layout'
'enable software prefetching on PPC'
'enable splitting of the restore block if possible'
'enable the feature when using profile data'
'enable the feature with/wo profile data'
'enable the shrink-wrapping pass'
'enable use of redzone on AArch64'
'enable/disable all ARC Optimizations'
'enclose %0 in %select{an @available|a __builtin_available}1 check to silence this warning'
'encoding of %0 type is incomplete because %1 component has unknown encoding'
"encoding prefix '%0' on an unevaluated string literal has no effect%select{| and is incompatible with c++2c}1"
'end tag'
"entering module '%0' due to this pragma"
'enum %0 was explicitly specialized here'
'enumeration %0 is incomplete'
'enumeration cannot be a template'
'enumeration previously declared as %select{un|}0scoped'
'enumeration previously declared with %select{non|}0fixed underlying type'
'enumeration redeclared with different underlying type %0 (was %1)'
'enumeration type %0 is not allowed in a vector conditional'
'enumeration type in nested name specifier is incompatible with C++98'
'enumeration types with a fixed underlying type are a C++11 extension'
'enumeration types with a fixed underlying type are a C23 extension'
'enumeration types with a fixed underlying type are a Microsoft extension'
'enumeration types with a fixed underlying type are incompatible with C standards before C23'
'enumeration types with a fixed underlying type are incompatible with C++98'
'enumeration value %0 is out of range of flags in enumeration type %1'
'enumeration values exceed range of largest integer'
'enumerations cannot be explicitly instantiated'
'enumerator %0 does not exist in instantiation of %1'
'enumerator %0 with value %1 here'
'enumerator value %0 is not representable in the underlying type %1'
'enumerator value is not representable in the underlying type %0'
'enums in the Microsoft ABI are signed integers by default; consider giving the enum %0 an unsigned underlying type to make this code portable'
"environment '%0' is not supported: '%1'"
"environment variable 'SOURCE_DATE_EPOCH' ('%0') must be a non-negative decimal integer <= %1"
'environment variable CC_PRINT_HEADERS_%select{FORMAT|FILTERING}0 has invalid value %1'
'environment variable CC_PRINT_HEADERS_FORMAT=%0 requires a compatible value for CC_PRINT_HEADERS_FILTERING'
'epsilon for benchmark point clustering'
'epsilon for detection of when the cluster is different from the LLVM schedule profile values'
'equality comparison between function pointer and void pointer (%0 and %1)'
'equality comparison with extraneous parentheses'
'error in backend: %0'
"error in loading module '%0' from prebuilt module path"
"error opening '%0': %1"
"error opening '%0': required by the CrossTU functionality"
"error opening file '%0': %1"
"error parsing index file: '%0' line: %1 '<USR-Length>:<USR> <File-Path>' format expected"
"error reading '%0': %1"
'error reading stdin: %0'
'escaped newline between */ characters at block comment end'
'exact handling of relational integer ICmp'
"exactly one '%0' directive must appear in the loop body of an enclosing directive"
"exactly one of 'depend', 'destroy', or 'update' clauses is expected"
"exactly one of 'inclusive' or 'exclusive' clauses is expected"
'exception declarator cannot be qualified'
'exception model'
'exception object of type %0 has %select{private|protected}1 destructor'
'exception of type %0 will be caught by earlier handler'
'exception specification in declaration does not match previous declaration'
'exception specification in explicit instantiation does not match instantiated one'
'exception specification is not available until end of class definition'
'exception specification needed for member of incomplete class %0'
'exception specification of %0 uses itself'
"exception specification of '...' is a Microsoft extension"
'exception specification of overriding function is more lax than base version'
'exception specifications are not allowed beyond a single level of indirection'
'exception specifications are not allowed in %select{typedefs|type aliases}0'
'exception specifications of %select{return|argument}0 types differ'
'excess elements in %select{array|vector|scalar|union|struct}0 initializer'
'excess elements in char array initializer'
'excess elements in initializer for indivisible sizeless type %0'
'excess precision is requested but the target does not support excess precision which may result in observable differences in complex division behavior%select{|, additional uses where the requested higher precision cannot be honored were found but not diagnosed}0'
'exe called with module IR after each pass that changes it'
'execute only is not supported for the %0 sub-architecture'
'existing instance variable %1 for __weak property %0 must be __weak'
'existing instance variable %1 for property %0 with %select{unsafe_unretained|assign}2 attribute must be __unsafe_unretained'
'existing instance variable %1 for strong property %0 may not be %select{|__unsafe_unretained||__weak}2'
'existing instance variable %1 for strong property %0 may not be __weak'
'exit after writing aggregated data file'
'expanding this definition of %0'
'expansion of date or time macro is not reproducible'
'expansion of macro %0 requested here'
"expansion of predefined identifier '%0' to a string literal is a Microsoft extension"
'expected "FILENAME" or <FILENAME>'
"expected #pragma pack parameter to be '1', '2', '4', '8', or '16'"
'expected %0'
'expected %0 at end of module'
"expected %0 in OpenMP clause '%1'"
'expected %0 or %1'
'expected %0 to denote end of parameters, or, another valid parameter of %1'
'expected %0; %1 is a keyword in Objective-C++'
'expected %1 after %0'
"expected %select{'enable', 'disable', 'begin' or 'end'|'disable'}0 - ignoring"
"expected %select{'match'|'match', 'adjust_args', or 'append_args'}0 clause on 'omp declare variant' directive"
"expected %select{'val' modifier|one of 'ref', val' or 'uval' modifiers}0"
'expected %select{assignment|assignment, compound assignment, increment, or decrement}0 expression'
"expected %select{identifier after '.' in |}0module name"
'expected %select{identifier|unqualified-id}0'
'expected %select{library|framework}0 name as a string'
"expected %select{module exclusion with 'exclude'|'export *'}0"
"expected '#pragma omp end declare %select{target|variant}0'"
"expected '#pragma omp end declare target' at end of file to match '#pragma omp %0'"
"expected '#pragma unused' argument to be a variable name"
"expected '%0' after the %1; '%0' assumed"
"expected '%0' clause with an argument on '#pragma omp %1' construct"
"expected '(' after '%0'"
"expected '(' for function-style cast or type construction"
"expected ')' after '%0'"
"expected ')' in preprocessor expression"
"expected ')' or ',' after '%0'"
"expected ')' or ',' in '#pragma %0'"
"expected '+' or '-' operation"
"expected ',' after conflicting module name"
"expected ',' after interop modifier"
"expected ',' in '#pragma %0'"
"expected ',' or ')' after iterator specifier"
"expected ',' or ')' at end of property accessor list"
"expected ',' or ')' in '%0' %select{clause|directive}1"
"expected ',' or '>' in template-parameter-list"
"expected ',' or ']' in lambda capture list"
"expected '->' before expression type requirement"
"expected '.' after pragma attribute namespace %0"
"expected '::' after '__super'"
"expected ';' after %0 statement"
"expected ';' after '%0'"
"expected ';' after attribute list"
"expected ';' after expression"
"expected ';' after method prototype"
"expected ';' after module name"
"expected ';' after namespace name"
"expected ';' after private module fragment declaration"
"expected ';' after top level declarator"
"expected ';' at end of declaration"
"expected ';' at end of declaration list"
"expected ';' at end of requirement"
"expected ';' in 'for' statement specifier"
"expected '<' after '%0'"
"expected '= constant-expression' or end of enumerator definition"
"expected '=' after '%0'"
"expected '=' after diagnostic option"
"expected '=' following '#pragma %select{align|options align}0' - ignored"
"expected '=' following '#pragma clang section %select{invalid|bss|data|rodata|text|relro}0'"
"expected '=' for Objective-C getter"
"expected '=' for Objective-C setter"
"expected '=' in iterator specifier"
"expected '=' or another designator"
"expected '==' operator for 'weak' clause"
"expected 'ON' or 'OFF' or 'DEFAULT' in pragma"
"expected ']' to close attribute"
"expected '__except' or '__finally' block"
"expected 'align' following '#pragma options' - ignored"
"expected 'auto' or 'decltype(auto)' after concept name"
"expected 'begin' or 'end'"
"expected 'bind' clause for 'loop' construct without an enclosing OpenMP construct"
"expected 'case' keyword before expression"
"expected 'compare' clause with the '%0' modifier"
"expected 'compiler', 'lib', 'user', or a string literal for the section name in '#pragma %0' - ignored"
"expected 'get' or 'put' in property declaration"
"expected 'introduced', 'deprecated', or 'obsoleted'"
"expected 'language', 'defined_in', 'generated_declaration', or 'USR'"
"expected 'push', 'pop', or '(' after '#pragma clang attribute'"
"expected 'reduction' clause with the 'inscan' modifier"
"expected 'this' following '*' in lambda capture list"
"expected 'this' subscript expression on map clause to be 'this[0]'"
"expected 'volatile', 'inline', 'goto', or '('"
"expected 'while' in do/while loop"
"expected '{' after '\\%0' escape sequence"
"expected '{' after base class list"
"expected '{' in compound literal"
"expected '{' to start inferred submodule"
"expected '{' to start module '%0'"
"expected '}'"
'expected HLSL Semantic identifier'
'expected OpenACC directive'
"expected a 'float', 'double' or '__float128' for the first argument"
'expected a callable expression as %ordinal0 argument to %1, found %2'
'expected a clang compiler command'
"expected a class method selector with single argument, e.g., 'colorWithCGColor:'"
"expected a class name after '~' to name a destructor"
'expected a feature name'
"expected a field designator, such as '.field = 4'"
'expected a foldable binary operator in fold expression'
"expected a for, while, or do-while loop to follow '%0'"
"expected a header attribute name ('size' or 'mtime')"
"expected a header name after '%0'"
'expected a memory order clause'
"expected a message describing the conflict with '%0'"
'expected a module map file name'
"expected a module name after '%select{module|import}0'"
"expected a module name in '__building_module' expression"
"expected a module name or '*'"
'expected a platform name here'
"expected a platform name, e.g., 'macos'"
'expected a property name in @synthesize'
"expected a qualified name after 'typename'"
"expected a reference to a parameter specified in a 'uniform' clause"
'expected a reference to an integer-typed parameter'
"expected a related Objective-C class name, e.g., 'NSColor'"
"expected a stack label or a string literal for the section name in '#pragma %0' - ignored"
"expected a string literal for the section name in '#pragma %0' - ignored"
'expected a type'
"expected a version of the form 'major[.minor[.subminor]]'"
'expected access to data field'
"expected action or ')' in '#pragma %0' - ignored"
"expected addressable lvalue expression, array element%select{ or array section|, array section or array shaping expression}0%select{| of non 'omp_depend_t' type}1"
"expected addressable lvalue in '%0' clause"
'expected addressable reduction item for the task-based directives'
"expected an 'allocator' clause inside of the target region; provide an 'allocator' clause or use 'requires' directive with the 'dynamic_allocators' clause"
"expected an Objective-C directive after '@'"
"expected an OpenMP 'directive' or 'sequence' attribute argument"
'expected an OpenMP directive'
"expected an allocator expression inside of the target region; provide an allocator expression or use 'requires' directive with the 'dynamic_allocators' clause"
"expected an attribute after '('"
'expected an attribute name'
"expected an attribute that is specified using the GNU, C++11 or '__declspec' syntax"
"expected an environment name, e.g., 'compute'"
"expected an identifier or template-id after '::'"
"expected an identifier that corresponds to an attribute subject matcher sub-rule; '%0' matcher %select{does not support sub-rules|supports the following sub-rules: %2|}1"
'expected an identifier that corresponds to an attribute subject rule'
"expected an integer argument in '#pragma %0'"
"expected an integer or a pointer type of the outer loop counter '%0' for non-rectangular nests"
"expected at least one %0 clause for '#pragma omp %1'"
"expected at least one %select{'enter' or 'link'|'enter', 'link' or 'indirect'}0 clause"
"expected at least one %select{'to' or 'link'|'to', 'link' or 'indirect'}0 clause"
"expected at least one 'to' clause or 'from' clause specified to '#pragma omp target update'"
"expected at least one clause on '#pragma omp %0' directive"
"expected attribute subject set specifier 'apply_to'"
'expected binary operation on right hand side of assignment operator'
'expected body of lambda expression'
"expected canonical name for private module '%0'"
'expected catch'
'expected class member or base class name'
'expected class name'
'expected clause-list or newline in OpenACC directive'
'expected comma in macro parameter list'
'expected concept name with optional arguments'
"expected configuration macro name after ','"
"expected constant sized array of 'omp_alloctrait_t' elements, not %0"
"expected declarator on 'omp declare mapper' directive"
'expected depobj expression'
'expected end of directive in pragma'
'expected end of line in preprocessor expression'
'expected excluded module name'
'expected expression'
'expected expression containing only member accesses and/or array sections based on named variables'
'expected expression with a pointer to a complete type as a base of an array shaping operation'
'expected external declaration'
'expected function body after function declarator'
"expected function or lambda declaration for 'routine' construct"
"expected identifier in '#pragma %0' - ignored"
'expected identifier in macro parameter list'
"expected identifier or one of the following operators: '+', '-', '*', '&', '|', '^', '&&', or '||'"
'expected identifier or string literal describing a context %select{set|selector|property}0; %select{set|selector|property}0 skipped'
"expected identifier or string literal in OpenACC 'bind' clause"
"expected identifier specifying the name of the 'omp critical' directive"
'expected identifier that represents an attribute name'
'expected initializer'
"expected integer between %0 and %1 inclusive in '#pragma %2' - ignored"
"expected integer literal as value for header attribute '%0'"
"expected integer or identifier in '#pragma pack' - ignored"
'expected integral or pointer type as the iterator-type, not %0'
"expected interop type: 'target' and/or 'targetsync'"
'expected iterator specification as depend modifier'
'expected iterator specification as map modifier'
"expected length on mapping of 'this' array section expression to be '1'"
"expected list item of scalar type in 'lastprivate' clause with 'conditional' modifier"
'expected loop invariant expression'
"expected loop invariant expression or '<invariant1> * %0 + <invariant2>' kind of expression"
"expected lower bound on mapping of 'this' array section expression to be '0' or not specified"
"expected lvalue expression%select{ of 'omp_depend_t' type, not %1|}0"
"expected member name or ';' after declaration specifiers"
"expected member name or ';' after declaration specifiers; %0 is a keyword in Objective-C++"
'expected method body'
'expected method to %select{read|write}1 %select{dictionary|array}2 element not found on object of type %0'
"expected modifier in '%0' clause"
'expected module declaration'
'expected module name'
'expected name of accessor method'
'expected namespace name'
"expected non-wide string literal in '#pragma %0'"
"expected one of [bss|data|rodata|text|relro] section kind in '#pragma %0'"
"expected one of the predefined allocators for the variables with the static storage: 'omp_default_mem_alloc', 'omp_large_cap_mem_alloc', 'omp_const_mem_alloc', 'omp_high_bw_mem_alloc', 'omp_low_lat_mem_alloc', 'omp_cgroup_mem_alloc', 'omp_pteam_mem_alloc' or 'omp_thread_mem_alloc'"
'expected parameter declarator'
'expected parentheses around type name in %0 expression'
"expected parenthesized parameter pack name in 'sizeof...' expression"
"expected pointer in '%0' clause, type is %1"
"expected pointer or reference to pointer in 'use_device_ptr' clause"
'expected pointer to struct as %ordinal0 argument to %1, found %2'
"expected pointer, array, reference to pointer, or reference to array in 'is_device_ptr clause'"
'expected property name'
"expected push, pop or a string literal for the section name in '#pragma %0' - ignored"
'expected quoted string after equals sign'
"expected reference to one of the parameters of function %0%select{| or 'this'}1"
'expected selector for Objective-C %select{setter|getter}0'
'expected selector for Objective-C method'
'expected statement'
"expected string literal %select{in %1|for diagnostic message in static_assert|for optional message in 'availability' attribute|for %select{language name|source container name|USR}1 in 'external_source_symbol' attribute|as argument of '%1' attribute}0"
"expected string literal %select{or parenthesized constant expression |}0in 'asm'"
"expected string literal in '#pragma %0' - ignoring"
"expected string literal in 'clause %0' - ignoring"
'expected template'
"expected template name after 'template' keyword in nested name specifier"
'expected template parameter'
"expected the class name after '~' to name the enclosing class"
'expected the name of a parameter pack'
'expected type parameter name'
'expected umbrella, header, submodule, or module export'
'expected valid context selector in %0'
'expected value in expression'
'expected variable name as a base of the array %select{subscript|section}0'
"expected variable name or 'this' in lambda capture list"
'expected variable name%select{| or data member of current class}0'
'expected variable name%select{|, data member of current class}0, array element or array section'
'expected variable of pointer type'
"expected variable of the '%0' type%select{|, not %2}1"
"expected variable%select{| or static data member|, static data member, or non-static data member of current class}0 of type '%1'"
'expected%select{| %1}0 loop iteration variable'
"expected%select{| non-const}0 variable of type 'omp_interop_t'"
'expected%select{| one of}0 %1 directive name modifier%select{|s}0'
"expecting %0 '%1' to be held at start of each loop%select{| with equal reentrancy depth}2"
"expecting %0 '%1' to be held at the end of function"
'expecting a pointer argument to the generic address space'
'explicit %select{constructor|conversion function|deduction guide}0 is not a candidate%select{| (explicit specifier evaluates to true)}1'
'explicit %select{constructor|deduction guide}0 declared here'
'explicit %select{specialization|instantiation}0 of %select{non-|undeclared }3template %1 %2'
'explicit call to +initialize results in duplicate call to +initialize'
'explicit call to [super initialize] should only be in implementation of +initialize'
"explicit capture of 'this' with a capture default of '=' is a C++20 extension"
"explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++20"
'explicit constructor calls are a Microsoft extension'
'explicit conversion functions are a C++11 extension'
'explicit conversion functions are incompatible with C++98'
'explicit data sharing attribute requested here'
'explicit data sharing attribute, data mapping attribute, or is_device_ptr clause requested here'
'explicit initialization of field %1 will not be enforced in C++20 and later because %2 has a user-declared constructor, making the type no longer an aggregate'
'explicit instantiation candidate function %q0 template here %1'
"explicit instantiation cannot be 'constexpr'"
"explicit instantiation cannot be 'inline'"
'explicit instantiation cannot have a storage class'
"explicit instantiation declaration (with 'extern') follows explicit instantiation definition (without 'extern')"
'explicit instantiation declaration of %0 with internal linkage'
'explicit instantiation declaration requires a name'
"explicit instantiation declaration should not be 'dllexport'"
'explicit instantiation definition is here'
'explicit instantiation has dependent template arguments'
'explicit instantiation of %0 does not refer to a function template, variable template, member function, member class, or static data member'
'explicit instantiation of %0 in class scope'
'explicit instantiation of %0 must occur at global scope'
'explicit instantiation of %0 not in a namespace enclosing %1'
'explicit instantiation of %0 that occurs after an explicit specialization has no effect'
'explicit instantiation of %q0 must occur in namespace %1'
'explicit instantiation of %q0 must specify a template argument list'
'explicit instantiation of non-templated type %0'
'explicit instantiation of typedef %0'
'explicit instantiation of undefined %select{member class|member function|static data member}0 %1 of class template %2'
'explicit instantiation of undefined function template %0'
'explicit instantiation of undefined variable template %q0'
'explicit instantiation refers here'
'explicit instantiation refers to member function %q0 that is not an instantiation'
'explicit instantiation refers to static data member %q0 that is not an instantiation'
"explicit object parameter cannot have 'void' type"
'explicit object parameters are incompatible with C++ standards before C++2b'
'explicit ownership qualifier on cast result has no effect'
'explicit qualification required to use member %0 from dependent base class'
'explicit specialization cannot have a storage class'
'explicit specialization of %0 after instantiation'
'explicit specialization of %0 in function scope'
"explicit template instantiation cannot have a definition; if this definition is meant to be an explicit specialization, add '<>' after the 'template' keyword"
'explicit template parameter list for lambdas is a C++20 extension'
'explicit template parameter list for lambdas is incompatible with C++ standards before C++20'
'explicit(bool) is a C++20 extension'
'explicit(bool) is incompatible with C++ standards before C++20'
'explicitly assigning value of variable of type %0 to itself%select{|; did you mean to assign to member %2?}1'
"explicitly capture 'this'"
'explicitly cast the argument to size_t to silence this warning'
'explicitly cast the pointer to silence this warning'
"explicitly declare getter %objcinstance0 with '%1' to return an 'unowned' object"
'explicitly defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator is implicitly deleted'
'explicitly defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 is implicitly deleted'
'explicitly defaulted function was implicitly deleted here'
'explicitly defaulting this %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 with a type different from the implicit type is incompatible with C++ standards before C++20'
'explicitly moving variable of type %0 to itself%select{|; did you mean to move to member %2?}1'
'explicitly specialized declaration is here'
'explicitly-defaulted %select{copy|move}0 assignment operator must return %1'
'exponent has no digits'
'export block begins here'
'export declaration appears within anonymous namespace'
'export declaration appears within another export declaration'
'export declaration can only be used on functions'
'export declaration can only be used within a module purview'
'export declaration cannot be empty'
'export declaration cannot be used in a private module fragment'
'exported templates are unsupported'
'expose the ANDI glue bug on PPC'
'expression cannot be followed by a postfix %0 operator; add parentheses'
'expression does not compute the number of elements in this array; element type is %0, not %1'
"expression evaluates to '%0 %1 %2'"
'expression has incomplete class type %0'
'expression is not a string literal'
'expression is not an %select{integer|integral}0 constant expression'
'expression is not an %select{integer|integral}0 constant expression; folding it to a constant is a GNU extension'
'expression is not assignable'
'expression must have integral or unscoped enumeration type, not %0'
'expression not permitted as operand of fold expression'
'expression requires explicit conversion from %0 to %1'
'expression result unused'
'expression result unused; assign into a variable to force a volatile load'
"expression result unused; should this cast be to 'void'?"
'expression which evaluates to zero treated as a null pointer constant of type %0'
'expression with side effects has no effect in an unevaluated context'
"expression with side effects will be evaluated despite being used as an operand to 'typeid'"
'extension used'
'extern "C" language linkage specification begins here'
'extern declaration of %0 follows non-extern declaration'
'extern templates are a C++11 extension'
'extern templates are incompatible with C++98'
'external function %0 declared with incompatible types in different translation units (%1 vs. %2)'
'external variable %0 declared with incompatible types in different translation units (%1 vs. %2)'
'external variable %0 defined in multiple translation units'
"extra '&' taking address of overloaded function"
"extra ';' %select{outside of a function|inside a %1|inside instance variable list|after member function definition}0"
"extra ';' after member function definition"
"extra ';' outside of a function is a C++11 extension"
"extra ';' outside of a function is incompatible with C++98"
'extra qualification on member %0'
"extra tokens after attribute in a '#pragma clang attribute push'"
'extra tokens at end of #%0 directive'
"extra tokens at end of '#pragma %0' - ignored"
"extra tokens at the end of '#pragma omp %0' are ignored"
"extraneous '%0' before ';'"
"extraneous ')' after condition, expected a statement"
"extraneous 'template<>' in declaration of %0 %1"
"extraneous 'template<>' in declaration of member %0"
"extraneous 'template<>' in declaration of variable %0"
"extraneous closing brace ('}')"
'extraneous template parameter list in alias template declaration'
'extraneous template parameter list in concept definition'
'extraneous template parameter list in template specialization'
'extraneous template parameter list in template specialization or out-of-line template definition'
"failed requirement '%0'; 'enable_if' cannot be used to disable this declaration"
"failed to deduce triple for target architecture '%0'; specify the triple using '-fopenmp-targets' and '-Xopenmp-target' instead"
'failed to expand response file: %0'
"failed to find module file for module '%0'"
"failed to hash content for '%0' because memory buffer cannot be retrieved"
"failed to process suppression mapping file '%0': %1"
"failing because %select{environment variable 'FORCE_CLANG_DIAGNOSTICS_CRASH' is set|'-gen-reproducer' is used}0"
'failure when lexing a character literal'
'failure when lexing a numeric literal'
'failure when lexing a string literal'
'fallthrough annotation does not directly precede switch label'
'fallthrough annotation in unreachable code'
'fallthrough annotation is outside switch statement'
'fast enumeration variables cannot be modified in ARC by default; declare the variable __strong to allow this'
'fast register allocator'
'feature %0 requires support of %1 feature'
'feature cannot be %select{introduced|deprecated|obsoleted}0 in %1 version %2 before it was %select{introduced|deprecated|obsoleted}3 in version %4; attribute ignored'
"feature flag '%0' is ignored since the feature is read only"
"feature flag '%0' must start with either '+' to enable the feature or '-' to disable it; flag ignored"
'field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3'
'field %0 declared as a function'
'field %0 declared here'
'field %0 declared with incompatible types in different translation units (%1 vs. %2)'
'field %0 has type %1 here'
"field %0 in '%select{counted_by|sized_by|counted_by_or_null|sized_by_or_null}1' not inside structure"
'field %0 is not a bit-field'
'field %0 is uninitialized when used here'
'field %0 with variable sized type %1 is not at the end of class'
'field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables'
'field %0 with variable sized type %1 not at the end of a struct or class is a GNU extension'
'field %1 within %0 is less aligned than %2 and is usually due to %0 being packed, which can lead to unaligned accesses'
'field %select{%1|in %1}0 requires explicit initialization but is not explicitly initialized'
'field %select{width|precision}0 should have type %1, but argument has type %2'
'field designator %0 does not refer to a non-static data member'
'field designator %0 does not refer to any field in type %1'
'field designator %0 does not refer to any field in type %1; did you mean %2?'
'field designator cannot initialize a %select{non-struct, non-union|non-class}0 type %1'
'field designator refers here'
'field has %select{incomplete|sizeless}0 type %1'
'field has name %0 here'
'field has non-trivial ownership qualification'
'field is non-trivial to %select{copy|default-initialize}0'
'field may not be qualified with an address space'
'field of illegal %select{type|pointer type}0 %1 declared here'
'field of type %0 has %select{private|protected}2 %select{default |copy |move |*ERROR* |*ERROR* |*ERROR* |}1constructor'
'field of type %1 has %select{private|protected}2 destructor'
"fields must have a constant size: 'variable length array in structure' extension will never be supported"
"file '%0' could not be located in expected %1"
"file '%0' from the precompiled header has been overridden"
"file '%0' has been modified since the %select{precompiled header|module file|precompiled file}1 '%2' was built: %select{size|mtime|content}3 changed%select{| (was %5, now %6)}4"
"file '%0' is not a module file"
"file '%0' is too large for Clang to process"
"file '%0' modified since it was first processed"
"file '%0' specified by '--extract-api-ignores=' not found"
"file '%0' specified by '-fmodules-embed-file=' not found"
"file '%1' is not a valid %select{PCH|module|precompiled}0 file: %2"
'file containing an ordered list of functions to use for function reordering'
'file entered %0 time%s0 using %1B (%human1B) of space%plural{0:|: plus %2B (%human2B) for macro expansions}2'
'file name for generated dot file'
'file name where instrumented profile will be saved (default: /tmp/prof.fdata)'
'file to dump the ordered list of functions to use for function reordering'
'file with list of functions to frame optimize'
'file with list of functions to optimize'
'file with list of functions to optimize (non-regex)'
'file with list of functions to skip'
'filter expression has non-integral type %0'
'final overrider of %q0 in %1'
'find_all_symbols options'
"finished building module '%0'"
'first argument in call to %0 is a pointer to non-trivially copyable type %1'
'first argument to %0 must be a pipe type'
"first argument to 'swift_async' must be either 'none', 'swift_private', or 'not_swift_private'"
"first argument to 'va_arg' is of type %0 and not 'va_list'"
'first argument to __builtin_annotation must be an integer'
'first argument to __builtin_call_with_static_chain must be a non-member call expression'
'first argument to __builtin_call_with_static_chain must not be a block call'
'first argument to __builtin_call_with_static_chain must not be a builtin call'
'first argument to __builtin_call_with_static_chain must not be a pseudo-destructor call'
'first argument to __builtin_convertvector must be a vector'
'first field of a transparent union cannot have %select{floating point|vector}0 type %1; transparent_union attribute ignored'
'first non-designated initializer is here'
'first two arguments to __builtin_convertvector must have the same number of elements'
"first%select{||| and second}0 argument%select{|||s}0 to '__builtin_trivially_relocate' must be %select{a pointer|non-const|relocatable|of the same type}0"
"flag '%0' is ignored when flag '%1' is present"
"flag '%0' results in undefined behavior with '%1' conversion specifier"
'flag value is neither a literal 0 nor a named value'
'flat namespace libraries are not supported'
'flexible array initialization is a GNU extension'
'flexible array initialization is not yet supported'
'flexible array member %0 in a union is a GNU extension'
'flexible array member %0 in a union is a Microsoft extension'
'flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a GNU extension'
'flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a Microsoft extension'
'flexible array member %0 not allowed in %select{struct|interface|union|class|enum}1 which has a virtual base class'
'flexible array member %0 of type %1 with non-trivial destruction'
'flexible array member %0 with type %1 is not at the end of %select{struct|interface|union|class|enum}2'
'flexible array members are a C99 feature'
'flexible array requires brace-enclosed initializer'
"float ABI '%0' is not supported by current library"
'float literal has a magnitude that is too small to be represented as a float type'
'floating point arithmetic produces %select{an infinity|a NaN}0'
'floating point classification requires argument of floating point type (passed in %0)'
'floating point literal in preprocessor expression'
'floating-point comparison is always %select{true|false}0; constant cannot be represented exactly in type %1'
'fold functions with identical code'
'fold jcc+mov into cmov'
'for fuzzer data'
'for jump tables, optimize indirect jmp targets instead of indices'
'for loop has empty body'
'for range declaration must declare a variable'
'for training'
'for type %0'
'force openmp unified shared memory mode'
'force patching of original entry points to ensure execution follows only the new/optimized code.'
'force relocations to data sections to always be processed'
'force the body of a loop to execute at least once'
'force_cuda_host_device end pragma without matching force_cuda_host_device begin'
'format argument is %select{a value|an indirect field width|an indirect precision|an auxiliary value}0, but it should be %select{a value|an indirect field width|an indirect precision|an auxiliary value}1'
'format argument modifies specifier at position %0, but it should modify specifier at position %1'
'format argument not a string type'
'format attribute cannot specify the implicit this argument as the format string'
"format specifier '%0' is incompatible with '%1'"
'format specifies type %0 but the argument has %select{type|underlying type}2 %1'
"format string contains '\\0' within the string body"
'format string is defined here'
'format string is empty'
'format string is not a string literal'
'format string is not a string literal (potentially insecure)'
'format string is not null-terminated'
'format string missing'
'format string should not be a wide string'
'format to dump profile output in aggregation mode, default is fdata'
'forward declaration of %0'
'forward declaration of %0 cannot have a nested name specifier'
'forward declaration of class here'
'forward declaration of non-parameterized class %0 cannot have type parameters'
'forward declaration of template entity is here'
"forward references to 'enum' types are a Microsoft extension"
"found '<::' after a %select{template name|addrspace_cast|const_cast|dynamic_cast|reinterpret_cast|static_cast}0 which forms the digraph '<:' (aka '[') and a ':', did you mean '< ::'?"
"found near match '%0'"
'fp convert instructions on integers with more than <N> bits are expanded.'
"friend cannot be declared in an explicit instantiation; if this declaration is meant to be a friend declaration, remove the 'template' keyword"
'friend declaration cannot be a concept'
'friend declaration cannot have a pure-specifier'
'friend declaration expands pack %0 that is declared it its own template parameter list'
'friend declaration naming a member of the declaring class is incompatible with C++98'
'friend declaration of %0 does not match any declaration in %1'
'friend declaration specifying a default argument must be a definition'
'friend declaration specifying a default argument must be the only declaration'
'friend declaration with a constraint that depends on an enclosing template parameter must be a definition'
'friend declared here'
'friend function %0 retaining previous language linkage is an extension'
'friend function %1 is a %select{private|protected}0 member of %3'
'friend function cannot be defined in a local class'
'friend function definition cannot be qualified with %0'
'friend function specialization cannot be defined'
'friend type templates must use an elaborated type'
'friends can only be classes or functions'
'friends cannot be members of the declaring class'
"from 'diagnose_if' attribute on %0:"
'func1,func2,func3,...'
"function %0 declared 'noreturn' should not return"
'function %0 is unsafe'
'function %0 with deduced return type cannot be used before it is defined'
'function %0 with unknown type must be given a function type'
'function by that name is mangled as "%0"'
'function call counts'
'function cannot return %select{array|function}0 type %1'
'function cannot return qualified void type %0'
'function declaration cannot become a multiversioned function after first usage'
'function declaration cannot have variably modified type'
"function declaration is expected after 'declare %select{simd|variant}0' directive"
"function declaration is missing %select{'target'|'cpu_specific' or 'cpu_dispatch'|'target_version'}0 attribute in a multiversioned function"
'function declared %0 was previously declared %1, which has different SME function attributes'
"function declared '%0' here was previously declared %select{'%2'|without calling convention}1"
"function declared in block scope cannot have 'static' storage class"
'function declared non-throwing here'
'function declared with %0 attribute was previously declared without the %0 attribute'
'function declared with regparm(%0) attribute was previously declared %plural{0:without the regparm|:with the regparm(%1)}1 attribute'
"function definition declared 'typedef'"
'function definition does not declare parameters'
'function definition inside an Objective-C container is deprecated'
'function definition is not allowed here'
'function definition with pure-specifier is a Microsoft extension'
'function does not return %0'
"function executed in streaming-SVE mode requires 'sme'"
'function id'
"function is a coroutine due to use of '%0' here"
'function is implicitly deleted because its declared type does not match the type of an implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0'
'function multiversioning caused by this declaration'
"function multiversioning doesn't support %select{feature|architecture}0 '%1'"
'function multiversioning is currently only supported on Linux'
'function multiversioning is not supported on the current target'
"function name is not allowed in 'link' clause"
'function names'
'function parameter %0 with unknown value cannot be used in a constant expression'
'function previously declared with an %select{explicit|implicit}0 exception specification redeclared with an %select{implicit|explicit}0 exception specification'
'function returns a type %0 marked with [[clang::coro_return_type]] but is neither a coroutine nor a coroutine wrapper; non-coroutines should be marked with [[clang::coro_wrapper]] to allow returning coroutine return type'
'function scope depth exceeded maximum of %0'
"function static variables are not permitted in functions to which an OpenACC 'routine' directive applies"
'function template %q0 matches specialization %1'
'function template partial specialization is not allowed'
'function template specialization %0 ambiguously refers to more than one function template; explicitly specify%select{| additional}1 template arguments to identify a particular function template'
"function template with 'sycl_kernel' attribute must have a 'void' return type"
"function template with 'sycl_kernel' attribute must have a single parameter"
'function try block in constexpr %select{function|constructor}0 is a C++20 extension'
'function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20'
'function type may not be qualified with an address space'
'function type with %0 attribute must have C linkage'
"function using ZA state requires 'sme'"
"function using ZT0 state requires 'sme2'"
"function with '#pragma omp declare variant' has a different %select{calling convention|return type|constexpr specification|inline specification|storage class|linkage}0"
"function with '#pragma omp declare variant' must have a prototype when 'append_args' is used"
"function with 'device_type(%0)' is not available on %select{device|host}1"
'function with deduced return type cannot be virtual'
'function with no prototype cannot use the %0 calling convention'
"function with trailing return type must specify return type 'auto', not %0"
'function-like macro %0 is not defined'
'function-style cast to a builtin type can only take one argument'
'functional-style cast to %0 has incompatible initializer of type %1'
'functions cannot be declared in an anonymous %select{struct|union}0'
"functions may not be declared with 'cmse_nonsecure_call' attribute"
'functions that differ only in their return type cannot be overloaded'
'gdb'
'generalized initializer lists are a C++11 extension'
'generalized initializer lists are incompatible with C++98'
'generate a C++ source file containing the patterns for the input file'
'generate a list of function sections in a format suitable for inclusion in a linker script'
'generate code for binaries <128MB on AArch64'
'generate loops for copy-in/copy-out of objects with descriptors'
'generate new tags with runtime library calls'
'generate the AST for the input file'
'generate the PDL MLIR for the input file'
'generated arguments #%0 in round-trip: %1'
'generated arguments do not match in round-trip'
'generated arguments parse failed in round-trip'
'generic lambdas are incompatible with C++11'
'getter name mismatch between property redeclaration (%1) and its original declaration (%0)'
'given <sectname>,<filename>[@<sym>=<offset>,...]  add the content of <filename> to <sectname>'
"glob '%0' did not match any header file"
'global sampler requires a const or constant address space qualifier'
'granularity of memprof shadow mapping'
'greedy register allocator'
'growRegion() does not scale with the number of BB edges, so limit its budget and bail out once we reach the limit.'
'guarded_by declared here'
'half precision constant requires cl_khr_fp16'
'hardware TLS register is not supported for the %0 sub-architecture'
"header attribute '%0' specified multiple times"
"header file %0 (aka '%1') cannot be imported because it is not known to be a header unit"
"header file '%0' input '%1' does not match the type of prior input in api extraction; use '-x %2' to override"
"header file '%0' input type '%1' does not match type of prior input in module compilation; use '-x %2' to override"
'heap allocation performed here'
'heatmap bucket size, optionally followed by zoom-out sizes for coarse-grained heatmaps (default 64B, 4K, 256K).'
'hexadecimal floating %select{constant|literal}0 requires %select{an exponent|a significand}1'
'hexadecimal floating constants are a C99 feature'
'hexadecimal floating literals are a C++17 feature'
'hexadecimal floating literals are incompatible with C++ standards before C++17'
'hidden overloaded virtual function %q0 declared here%select{|: different classes%diff{ ($ vs $)|}2,3|: different number of parameters (%2 vs %3)|: type mismatch at %ordinal2 parameter%diff{ ($ vs $)|}3,4|: different return type%diff{ ($ vs $)|}2,3|: different qualifiers (%2 vs %3)|: different exception specifications}1'
"hidden visibility cannot be applied to 'dllexport' declaration"
'higher order bits are zeroes after implicit conversion'
'hoist common instructions (default = false)'
'host variable declared here'
'hot data symbols support (relocation mode)'
'how to repeat the instruction snippet'
'hugify'
'human-readable YAML format'
"identifier %0 after '~' in destructor name does not name a type"
'identifier %0 conflicts with a C++ keyword'
'identifier %0 in object destruction expression does not name a type'
'identifier %0 in object destruction expression does not name the type %1 of the object being destroyed'
"identifier %0 is reserved because %select{<ERROR>|it starts with '_' at global scope|it starts with '_' and has C language linkage|it starts with '__'|it starts with '_' followed by a capital letter|it contains '__'}1"
'identifier %0 preceded by whitespace in a literal operator declaration is deprecated'
'identifier after literal will be treated as a reserved user-defined literal suffix in C++11'
'identifier after literal will be treated as a user-defined literal suffix in C++11'
'identifier contains Unicode character <U+%0> that is invisible in some environments'
"identifier followed by '<' indicates a class template specialization but %0 %select{does not refer to a template|refers to a function template|<unused>|refers to a variable template|<unused>|<unused>|refers to a concept}1"
"if processing a memory profile, filter out stack or heap accesses that won't be useful for BOLT to reduce profile file size"
'if reorder-functions is used, order functions putting hottest last'
'if statement has empty body'
'if the caller is not cold'
'if the input is dwp file, parse .debug_info section and use it to populate DW_SECT_INFO contributions in cu-index. For DWARF5 it also populated TU Index.'
'if there is more than one benchmark for an opcode, said benchmarks may end up not being clustered into the same cluster if the measured performance characteristics are different. by default all such opcodes are filtered out. this flag will instead show only such unstable opcodes'
'if you see this diagnostic, a Clang developer has made a mistake'
'if you supply your own aligned allocation functions, use -faligned-allocation to silence this diagnostic'
'ifunc resolver function must return a pointer'
'ignore failures to find derived type descriptors when translating FIR to LLVM'
'ignore hash while reading function profile'
'ignore instructions that do not define a sched class'
'ignore kernel interrupt LBR that happens asynchronously'
'ignore lto_priv or const suffixes when matching functions'
'ignore recursive calls when constructing the call graph'
"ignored 'inline' attribute on kernel function %0"
"ignored asm label '%0' on automatic variable"
'ignored trigraph would end block comment'
'ignoring %0 attribute because its argument is invalid'
'ignoring %select{return value|temporary}0 of type %2 declared with %1 attribute%select{|: %4}3'
"ignoring '%0' as it conflicts with that implied by '%1' (%2)"
"ignoring '%0' option as it cannot be used with %select{implicit usage of|}1 -mabicalls and the N64 ABI"
"ignoring '%0' option as it is not currently supported for processor '%1'"
"ignoring '%0' option as it is not currently supported for target '%1'"
"ignoring '%0' option for offload arch '%1' as it is not currently supported there. Use it with an offload arch containing '%2' instead"
"ignoring '%select{static|inline}0' keyword on explicit template instantiation"
"ignoring '-f%select{no-|}0raw-string-literals', which is only valid for C and C++ standards before C++11"
"ignoring '-mabs=2008' option because the '%0' architecture does not support it"
"ignoring '-mabs=legacy' option because the '%0' architecture does not support it"
"ignoring '-mcompact-branches=' option because the '%0' architecture does not support it"
"ignoring '-mgpopt' option as it cannot be used with %select{|the implicit usage of }0-mabicalls"
"ignoring '-mlong-calls' option as it is not currently supported with %select{|the implicit usage of }0-mabicalls"
"ignoring '-mnan=2008' option because the '%0' architecture does not support it"
"ignoring '-mnan=legacy' option because the '%0' architecture does not support it"
'ignoring -fapple-kext which is valid for C++ and Objective-C++ only'
'ignoring -fdiscard-value-names for LLVM Bitcode'
"ignoring -fverify-debuginfo-preserve-export=%0 because -fverify-debuginfo-preserve wasn't enabled"
'ignoring __declspec(allocator) because the function return type %0 is not a pointer or reference type'
"ignoring availability attribute %select{on '+load' method|with constructor attribute|with destructor attribute}0"
"ignoring extension '%0' because the '%1' architecture does not support it"
"ignoring invalid -ftabstop value '%0', using default value %1"
"ignoring invalid /arch: argument '%0'; for %select{64|32}1-bit expected one of %2"
'ignoring redefinition of Objective-C qualifier macro'
'ignoring return value of function declared with %0 attribute'
'ignoring return value of function declared with %0 attribute%select{|: %2}1'
'ignoring temporary created by a constructor declared with %0 attribute%select{|: %2}1'
"ignoring the 'branch-protection' attribute because the '%0' architecture does not support it"
'illegal OpenMP user-defined mapper identifier'
'illegal call to %0, expected %1 argument type'
'illegal call to enqueue_kernel, incorrect argument types'
'illegal call to enqueue_kernel, parameter needs to be specified as integer type'
'illegal character encoding in character literal'
'illegal character encoding in string literal'
'illegal device builtin %select{surface|texture}0 reference class template %1 declared here'
'illegal device builtin %select{surface|texture}0 reference type %1 declared here'
'illegal initializer (only variables can be initialized)'
'illegal initializer type %0'
'illegal interface qualifier'
'illegal operation on Objective-C container subscripting'
'illegal qualifiers on @catch parameter'
"illegal redeclaration of 'readwrite' property in class extension %0 (perhaps you intended this to be a 'readwrite' redeclaration of a 'readonly' public property?)"
"illegal redeclaration of property in class extension %0 (attribute must be 'readwrite', while its primary must be 'readonly')"
'illegal scalar extension cast on argument %0 to %select{|in}1out paramemter'
'illegal storage class on file-scoped variable'
'illegal storage class on function'
'illegal type %0 used in a boxed expression'
'illegal vector component name %0'
'illegal visibility specification'
'imaginary constants are a C2y extension'
'imaginary constants are a GNU extension'
'imaginary constants are incompatible with C standards before C2y'
'imaginary types are not supported'
'immediate function %0 used before it is defined'
'implementing deprecated %select{method|class|category}0'
'implementing unavailable method'
'implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 inferred target collision: call to both %select{__device__|__global__|__host__|__host__ __device__}1 and %select{__device__|__global__|__host__|__host__ __device__}2 members'
"implicit '0' return value from 'main' is a C99 extension"
'implicit boolean conversion of Objective-C object literal always evaluates to true'
"implicit capture of 'this' with a capture default of '=' is deprecated"
'implicit capture of lambda object due to conversion to block pointer here'
'implicit cast from type %0 to type %1 drops __unaligned qualifier'
'implicit conversion between pointer-to-function and pointer-to-object is a Microsoft extension'
"implicit conversion between vector types ('%0' and '%1') is deprecated; in the future, the behavior implied by '-fno-lax-vector-conversions' will be the default"
'implicit conversion changes signedness: %0 to %1'
'implicit conversion discards imaginary component: %0 to %1'
'implicit conversion from %0 cannot fit within the range of values for %1'
'implicit conversion from %0 to %1 changes non-zero value from %2 to %3'
"implicit conversion from %0 to %1 changes the meaning of the %select{code unit|code point}2 '%3'"
'implicit conversion from %0 to %1 changes value from %2 to %3'
"implicit conversion from %0 to %1 discards 'cfi_unchecked_callee' attribute"
'implicit conversion from %0 to %1 is not permitted in C++'
'implicit conversion from %0 to %1 may change the meaning of the represented code unit'
'implicit conversion from %0 to %1 may lose precision'
'implicit conversion from %0 to %1 may lose precision and change the meaning of the represented code unit'
'implicit conversion from %0 to enumeration type %1 is invalid in C++'
'implicit conversion from %2 to %3 changes value from %0 to %1'
'implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is a C++11 extension'
'implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is incompatible with C++98'
"implicit conversion from constant value %0 to 'BOOL'; the only well defined values for 'BOOL' are YES and NO"
'implicit conversion from enumeration type %0 to different enumeration type %1'
"implicit conversion from floating-point type %0 to 'BOOL'"
"implicit conversion from integral type %0 to 'BOOL'"
'implicit conversion from nullable pointer %0 to non-nullable pointer type %1'
'implicit conversion increases floating-point precision: %0 to %1'
'implicit conversion loses floating-point precision: %0 to %1'
'implicit conversion loses integer precision: %0 to %1'
'implicit conversion loses integer precision: %0 to %1 on negation'
'implicit conversion of %select{NULL|nullptr}0 constant to %1'
'implicit conversion of out of range value from %0 to %1 is undefined'
'implicit conversion truncates vector: %0 to %1'
'implicit conversion turns floating-point number into bool: %0 to %1'
'implicit conversion turns floating-point number into integer: %0 to %1'
'implicit conversion turns string literal into bool: %0 to %1'
'implicit conversion turns vector to scalar: %0 to %1'
'implicit conversion when %select{%diff{assigning to $ from type $|assigning to type from type}0,1|%diff{passing $ to parameter of type $|passing type to parameter of type}0,1|%diff{returning $ from a function with result type $|returning type from a function with result type}0,1|<CLANG BUG IF YOU SEE THIS>|%diff{initializing $ with an expression of type $|initializing type with an expression of type}0,1|%diff{sending $ to parameter of type $|sending type to parameter of type}0,1|<CLANG BUG IF YOU SEE THIS>}2 is not permitted in C++'
'implicit conversion when assigning computation result loses floating-point precision: %0 to %1'
'implicit conversions between vector types (%0 and %1) are not permitted'
'implicit declaration introduced by elaborated type conflicts with a %select{non-struct type|non-class type|non-union type|non-enum type|typedef|type alias|template|type alias template|template template argument}0 of the same name'
'implicit declaration of function %0'
"implicit deduction guide declared as '%0'"
'implicit default constructor suppressed by user-declared constructor'
'implicit instantiation of undefined member %0'
'implicit truncation from %2 to a one-bit wide bit-field changes value from %0 to %1'
'implicit truncation from %2 to bit-field changes value from %0 to %1'
'implicit use of sequentially-consistent atomic may incur stronger memory barriers than necessary'
"implicitly declaring library function '%0' with type %1"
'implicitly determined as %0'
"implicitly disabling vptr sanitizer because rtti wasn't enabled"
"implicitly treating version as '%0'"
'import %select{module|name}0 (%1) does not match the import %select{module|name}0 (%2) of the previous declaration'
'import %select{module|name}0 cannot be applied to a function with a definition'
'import of C++ module \'%0\' appears within extern "C" language linkage specification'
"import of module '%0' appears within %1"
"import of module '%0' appears within its own %select{interface|implementation}1"
"import of module '%0' appears within same top-level module '%1'"
"import of module '%0' imported non C++20 importable modules"
"import of shadowed module '%0'"
"imported AST from '%0' had been generated for a different target, current: %1, imported: %2"
"imported by %select{|module '%2' in }1'%0'"
'importing an implementation partition unit in a module interface is not recommended. Names from %0 may not be reachable'
"importing module '%0'%select{| into '%3'}2 from '%1'"
'imports must immediately follow the module declaration'
'impossible constraint in asm: cannot store value into a register'
'in %select{implicit|defaulted}0 %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 for %2 first required here'
"in call to '%0'"
"in call to printing function with arguments '(%0)' while dumping struct"
'in defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator for %1 first required here'
'in evaluating default argument here'
'in evaluation of exception specification for %q0 needed here'
'in first definition, possible difference is here'
"in implicit call to 'operator%select{!=|*|++}0' for iterator of type %1"
'in implicit initialization for inherited constructor of %0'
'in implicit initialization of %select{array element %1 with omitted initializer|field %1 with omitted initializer|trailing array elements in runtime-sized array new}0'
'in implicit initialization of binding declaration %0'
'in initialization of temporary of type %0 created to list-initialize this reference'
"in instantiation of default argument for '%0' required here"
"in instantiation of default function argument expression for '%0' required here"
'in instantiation of default member initializer %q0 requested here'
'in instantiation of enumeration %q0 requested here'
'in instantiation of exception specification for %0 requested here'
'in instantiation of function template specialization %q0 requested here'
'in instantiation of member class %q0 requested here'
'in instantiation of member function %q0 requested here'
'in instantiation of requirement here'
'in instantiation of requirement parameters here'
'in instantiation of static data member %q0 requested here'
'in instantiation of template class %q0 requested here'
'in instantiation of template type alias %0 requested here'
'in instantiation of variable template specialization %q0 requested here'
'in lowering create ArrayCoorOp instead of CoordinateOp'
'in non-LBR mode, guess edge counts using iterative technique'
"in pattern '%1': %0"
'in relocation mode trap upon entry to any function that uses AVX-512 instructions'
'in second definition, possible difference is here'
'in template expansion here'
'in the default initializer of %0'
'in value-initialization of type %0 here'
'in%select{| implicit}0 constructor here'
'in-class initializer for static data member is not a constant expression'
'in-class initializer for static data member is not a constant expression; folding it to a constant is a GNU extension'
'in-class initializer for static data member of type %0 is a GNU extension'
"in-class initializer for static data member of type %0 requires 'constexpr' specifier"
'in_reduction variable must have the same reduction operation as in a task_reduction clause'
'include a detailed record of preprocessing actions'
"include location '%0' is unsafe for cross-compilation"
'include module search paths'
"include of non-modular header inside framework module '%0': '%1'"
"include of non-modular header inside module '%0': '%1'"
"include path for libstdc++ headers not found; pass '-stdlib=libc++' on the command line to use the libc++ standard library instead"
'include search path'
"include the header <%0> or explicitly provide a declaration for '%1'"
'incompatible block pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2'
'incompatible constant for this __builtin_neon function'
'incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3'
'incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3'
'incompatible operand types (%0 and %1)'
'incompatible operand types%diff{ ($ and $)|}0,1'
'incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3'
'incompatible pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &|; remove *|; remove &}3'
'incompatible pointer types passing retainable parameter of type %0to a CF function expecting %1 type'
'incompatible redeclaration of library function %0'
'incompatible types casting %0 to %1 with a %select{__bridge|__bridge_transfer|__bridge_retained}2 cast'
'incompatible vector types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2'
'incomplete definition of type %0'
"incomplete delimited universal character name; treating as '\\' '%0' '{' identifier"
'incomplete format specifier'
'incomplete receiver type %0'
'incomplete result type %0 in function definition'
'incomplete result type %0 in lambda expression'
"incomplete type %0 in a '_Generic' association is a C2y extension"
'incomplete type %0 is not a literal type'
'incomplete type %0 is not assignable'
'incomplete type %0 named in nested name specifier'
'incomplete type %0 used in a boxed expression'
'incomplete type %0 used in type trait expression'
'incomplete type %0 where a complete type is required'
'incomplete type in call to object of type %0'
'incomplete universal character name'
"incomplete universal character name; treating as '\\' followed by identifier"
'inconsistent number of instance variables specified'
"incorrect 'adjust_args' type, expected 'need_device_ptr'%select{|, 'need_device_addr',}0 or 'nothing'"
'incorrect format for -preamble-bytes=N,END'
"incorrect map type modifier, expected one of: 'always', 'close', 'mapper'%select{|, 'present'|, 'present', 'iterator'}0%select{|, 'ompx_hold'}1%select{|, 'self'}2"
"incorrect map type, expected one of 'to', 'from', 'tofrom', 'alloc', 'release', or 'delete'"
'incorrect number of bits in integer (expected %0 bits, have %1)'
'incorrect number of bits in vector operand (expected %select{|a multiple of}0 %1 bits, have %2)'
"incorrect reduction identifier, expected one of '+', '*', '&', '|', '^', '&&', '||', 'min' or 'max' or declare reduction for type %0"
"incorrect reduction identifier, expected one of '+', '-', '*', '&', '|', '^', '&&', '||', 'min' or 'max' or declare reduction for type %0"
'incorrect use of #pragma clang force_cuda_host_device begin|end'
"incorrect use of '#pragma fenv_access (on|off)' - ignored"
"incorrect use of '#pragma ms_struct on|off' - ignored"
'increment clause of OpenMP for loop must perform simple addition or subtraction on loop variable %0'
'increment expression must cause %0 to %select{decrease|increase}1 on each iteration of OpenMP for loop'
'incremented enumerator value %0 is not representable in the largest integer type'
'incrementing expression of type bool is deprecated and incompatible with C++17'
'increments 8-bit counter for every edge'
"indeterminate value can only initialize an object of type 'unsigned char'%select{, 'char',|}1 or 'std::byte'; %0 is invalid"
'index %0 must appear exactly once in the permutation clause'
'index for __builtin_shufflevector must be a constant integer'
'index for __builtin_shufflevector must be less than the total number of vector elements'
'index for __builtin_shufflevector not within the bounds of the input vectors; index of -1 found at position %0 is not permitted in a constexpr context'
'indexing expression is invalid because subscript type %0 has multiple type conversion functions'
'indexing expression is invalid because subscript type %0 is not an Objective-C pointer'
'indexing expression is invalid because subscript type %0 is not an integral or Objective-C pointer type'
'indexing of array without known bound is not allowed in a constant expression'
'indirect call promotion'
'indirect goto in function with no address-of-label expressions'
'indirection not permitted on operand of type %0'
'indirection of non-volatile null pointer will be deleted, not trap'
'indirection requires pointer operand (%0 invalid)'
'infer execution count for fall-through blocks'
"inferred framework modules cannot be 'explicit'"
'inferred submodule cannot be a framework submodule'
'inferred submodules require a module with an umbrella'
"inferring '_Nonnull' for pointer type within %select{array|reference}0 is deprecated"
'inheritance model does not match %select{definition|previous declaration}0'
'inheritance model ignored on %select{primary template|partial specialization}0'
'inherited from base class %0 here'
'inherited virtual base class %1 has %select{private|protected}2 destructor'
'inheriting constructors are incompatible with C++98'
'inherits from superclass %0 here'
'init method must return a type related to its receiver type'
'init methods must return a type related to the receiver type'
'init methods must return an object pointer type, not %0'
"initialization clause of OpenMP for loop is not in canonical form ('var = init' or 'T var = init')"
'initialization is not supported for __shared__ variables'
'initialization of %0 may run twice when built into a shared library: it has hidden visibility and external linkage'
"initialization of %select{|signed }0char array with UTF-8 string literal is not permitted by %select{'-fchar8_t'|C++20}1"
'initialization of an array %diff{of type $ from a compound literal of type $|from a compound literal}0,1 is a GNU extension'
'initialization of flexible array member is not allowed'
'initialization of incomplete type %0'
'initialization of initializer_list object is incompatible with C++98'
'initialization of non-aggregate type %0 with a designated initializer list'
'initialization of non-aggregate type %0 with an initializer list'
'initialization of pointer of type %0 to null from a constant boolean expression'
'initialization statement is not supported when iterating over Objective-C collection'
'initialize the variable %0 to silence this warning'
'initialized flexible array member %0 is here'
'initialized here %0'
'initialized lambda capture packs are incompatible with C++ standards before C++20'
'initialized lambda captures are a C++14 extension'
'initialized lambda captures are incompatible with C++ standards before C++14'
'initialized lambda pack captures are a C++20 extension'
'initializer %0 does not name a non-static data member or base class; did you mean the %select{base class|member}1 %2?'
'initializer %select{partially |}0overrides prior initialization of this subobject'
'initializer element is not a compile-time constant'
'initializer for aggregate is not a compile-time constant'
'initializer for aggregate with no elements requires explicit braces'
'initializer for functional-style cast to %0 contains multiple expressions'
'initializer for functional-style cast to %0 is empty'
'initializer for lambda capture %0 contains multiple expressions'
'initializer for sizeless type %0 cannot be empty'
'initializer for thread-local variable must be a constant expression'
'initializer for variable %0 with type %1 contains multiple expressions'
'initializer for variable %0 with type %1 is empty'
'initializer for virtual base class %0 of abstract class %1 will never be used'
"initializer list cannot be used on the %select{left|right}0 hand side of operator '%1'"
'initializer missing for lambda capture %0'
'initializer of %0 is not a constant expression'
'initializer of %0 is unknown'
'initializer of weak variable %0 is not considered constant because it may be different at runtime'
'initializer on function does not look like a pure-specifier'
'initializer order does not match the declaration order'
'initializer priorities are not supported in HLSL'
'initializer would partially override prior initialization of object of type %1 with non-trivial destruction'
'initializer-string for char array is too long'
'initializer-string for char array is too long, array size is %0 but initializer has size %1 (including the null terminating character)'
'initializer-string for character array is too long for C++, array size is %0 but initializer has size %1 (including the null terminating character)'
"initializer-string for character array is too long, array size is %0 but initializer has size %1 (including the null terminating character); did you mean to use the 'nonstring' attribute?"
'initializing %0 from an empty initializer list is incompatible with C++98'
"initializing 'char8_t' array with plain string literal"
'initializing an array from a %0 predefined identifier is a Microsoft extension'
'initializing char array with wide string literal'
'initializing field %0 with default member initializer'
'initializing multiple members of union'
'initializing parameter %0 with default argument'
'initializing pointer member %0 to point to a temporary object whose lifetime is shorter than the lifetime of the constructed object'
'initializing pointer member %0 with the stack address of %select{variable|parameter}2 %1'
'initializing wide char array with incompatible wide string literal'
'initializing wide char array with non-wide string literal'
'inline all checks'
'inline all functions'
'inline assembly label %0 declared here'
'inline declaration of %0 follows non-inline definition'
'inline declaration of %0 not allowed in block scope'
'inline function %q0 is not defined'
'inline function not defined%select{| before the private module fragment}0'
'inline function performs a conversion which is forbidden in ARC'
'inline functions based on how much of the function is a scop.'
'inline functions if increase in size is less than defined by -inline-small-functions-bytes'
'inline functions with CFI programs (can break exception handling)'
'inline leaf functions with CFI programs (can break unwinding)'
"inline memcpy using 'rep movsb' instruction (X86-only)"
'inline namespace reopened as a non-inline namespace'
'inline namespaces are a C++11 feature'
'inline namespaces are incompatible with C++98'
'inline nested namespace definition is a C++20 extension'
'inline nested namespace definition is incompatible with C++ standards before C++20'
'inline variable %q0 is not defined'
'inline variables are a C++17 extension'
'inline variables are incompatible with C++ standards before C++17'
"inner loops must be tightly nested inside a '%0' clause on a '%1' construct"
'input bitcode file which can override previously defined symbol(s)'
'input conversion stopped due to an input byte that does not belong to the input codeset UTF-8'
'input files'
"input is not a PCH file: '%0'"
'input objects'
"insert '%0;' to silence this warning"
"insert '%select{_Nonnull|_Nullable|_Null_unspecified}0' if the %select{pointer|block pointer|member pointer|array parameter}1 %select{should never be null|may be null|should not declare nullability}0"
"insert ',' before '...' to silence this warning"
"insert 'break;' to avoid fall-through"
'insert an explicit cast to silence this issue'
'insert tail call traps'
'insert traps in old function bodies (relocation mode)'
"install_name does not match: '%0' (provided) vs '%1' (found)"
'instance method %0 found instead of class method %1'
"instance method %0 is being used on 'Class' which is not in the root class"
"instance method %objcinstance0 not found (return type defaults to 'id')"
"instance method %objcinstance0 not found (return type defaults to 'id'); did you mean %objcinstance2?"
'instance variable %0 accessed in class method'
'instance variable %0 declared with incompatible types in different translation units (%1 vs. %2)'
'instance variable %0 has conflicting bit-field width'
'instance variable %0 has conflicting type%diff{: $ vs $|}1,2'
'instance variable %0 is being directly accessed'
'instance variable %0 is private'
'instance variable %0 is protected'
'instance variable is already declared'
'instance variable is declared here'
'instance variable of type %0 has %select{private|protected}1 destructor'
'instance variables cannot be of reference type'
'instance variables may not be placed in %select{categories|class extension}0'
'instance variables must have a constant size'
'instantiated into assembly here'
'instantiating fold expression with %0 arguments exceeded expression nesting limit of %1'
'instantiation of %q0 is different in different modules'
"instantiation of '%0' not supported yet"
'instantiation of function %q0 required here, but no definition is available'
'instantiation of variable %q0 required here, but no definition is available'
'instrument atomic instructions (rmw, cmpxchg)'
'instrument byval arguments'
'instrument byval call arguments'
'instrument code to generate accurate profile data'
'instrument dynamic allocas'
'instrument landing pads'
'instrument memory intrinsics'
'instrument personality functions'
'instrument read instructions'
'instrument reads and writes with callbacks'
'instrument stack (allocas)'
'instrument write instructions'
'instrumentation map used to identify function ids. Currently supports elf file instrumentation maps.'
'integer constant expression evaluates to value %0 that cannot be represented in a %1-bit %select{signed|unsigned}2 integer type'
'integer constant not in range of enumerated type %0'
'integer literal is too large to be represented in a signed integer type, interpreting as unsigned'
'integer literal is too large to be represented in any %select{signed |}0integer type'
"integer literal is too large to be represented in type 'long' and is subject to undefined behavior under C++98, interpreting as 'unsigned long'; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards"
"integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C++98; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards"
"integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C89; this literal will %select{have type 'long long'|be ill-formed}0 in C99 onwards"
'integer overflow in preprocessor expression'
'integer sequences must have integral element type'
'integer sequences must have non-negative sequence length'
'integer value %0 is outside the valid range of values [%1, %2] for the enumeration type %3'
'integral constant expression has incomplete class type %0'
'integral constant expression requires explicit conversion from %0 to %1'
'interface type %1 cannot be %select{returned|passed}0 by value; did you forget * in %1?'
'interface type cannot be statically allocated'
'interface type cannot inherit from %select{struct|non-public interface|class}0 %1'
"interface types cannot specify '%select{private|protected}0' access"
"interop type '%0' cannot be specified more than once"
'interop variable %0 used in multiple action clauses'
"interop variable must be of type 'omp_interop_t'"
'interrupt service routine cannot be called directly'
"interrupt service routine with vfp enabled may clobber the interruptee's vfp state; consider using the `interrupt_save_fp` attribute to prevent this behavior"
'interval between profile writes (default: 0 = write only at program end).  This is useful for service workloads when you want to dump profile every X minutes or if you are killing the program and the profile is not being dumped at the end.'
'intrinsic module directory'
'intrinsic module search paths'
'introduce a module file extension for testing purposes. The argument is parsed as blockname:major:minor:hashed:user info'
'introduce a parameter name to make %0 part of the selector'
'invalid #ident directive'
'invalid %% escape in inline assembly string'
"invalid %0 at end of declaration; did you mean '='?"
"invalid %1 version '%0' in availability attribute"
'invalid %select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 %select{floating-point|enumeration}1 type %2 %plural{2:with|4:from|:and}0 %select{enumeration|floating-point}1 type %3'
'invalid %select{arithmetic between|bitwise operation between|comparison of|conditional expression between|compound assignment of}0 different enumeration types%diff{ ($ and $)|}1,2'
'invalid %select{branch|return|throw}0 %select{out of|into}1 OpenACC Compute/Combined Construct'
'invalid %select{constructor|destructor}0 declaration'
"invalid 'this' expression on 'map' clause"
"invalid -Xopenmp-target argument: '%0', options requiring arguments are unsupported"
"invalid C++ ABI name '%0'"
"invalid CoreFoundation Runtime ABI '%0'; must be one of 'objc', 'standalone', 'swift', 'swift-5.0', 'swift-4.2', 'swift-4.1'"
'invalid Darwin version number: %0'
'invalid LLVM IR input: %0'
"invalid OS value '%0' in '%1'"
'invalid OpenACC clause %0'
"invalid OpenACC directive %select{%1|'%1 %2'}0"
'invalid PCS type'
"invalid RVV vector size '%0', expected size is '%1' based on LMUL of type and '-mrvv-vector-bits'"
"invalid SVE vector size '%0', must match value set by '-msve-vector-bits' ('%1')"
'invalid UTF-8 in comment'
"invalid Xarch argument: '%0', not all driver options can be forwared via Xarch argument"
"invalid Xarch argument: '%0', options requiring arguments are unsupported"
'invalid __hlsl_resource_t type attributes'
"invalid address discrimination flag '%0'; '__ptrauth' requires '0' or '1'"
'invalid address discrimination mode %0'
"invalid alignment option in '#pragma %select{align|options align}0' - ignored"
"invalid application of '%0' to %select{an incomplete|sizeless}1 type %2"
"invalid application of '%0' to WebAssembly table"
"invalid application of '%0' to a function type"
"invalid application of '%0' to a void type"
"invalid application of '%select{sizeof|alignof|typeof|typeof_unqual}0' to bit-field"
"invalid application of '__builtin_omp_required_simd_align' to an expression, only type is allowed"
"invalid application of 'alignof' to a field of a class still being defined"
"invalid application of 'offsetof' to a field of a virtual base"
"invalid arch name '%0'"
"invalid arch name '%0', %1"
'invalid argument %0 to function: %1, expecting a generic pointer argument'
"invalid argument '%0' not allowed with '%1'"
"invalid argument '%0' only allowed with '%1'"
"invalid argument '%0' to -%1"
"invalid argument '%0' to -malign-branch=; each element must be one of: %1"
"invalid argument '%0' to -mfpu=; must be one of: 64, 32, none, 0 (alias for none)"
"invalid argument '%0' to -msimd=; must be one of: none, lsx, lasx"
"invalid argument '%0' to atomic attribute; valid options are: 'remote_memory', 'fine_grained_memory', 'ignore_denormal_mode' (optionally prefixed with 'no_')"
"invalid argument '-mno-amdgpu-ieee' only allowed with relaxed NaN handling"
"invalid argument in '%0', only integer or 'auto' is supported"
"invalid argument in '%0', only integers are supported"
'invalid argument of type %0; expected an integer type'
'invalid argument to convert to character'
'invalid argument type %0 to unary expression'
'invalid argument type to function %0 (expecting %1 having %2)'
'invalid argument: symbol must be a device-side function or global variable'
"invalid argument; expected 'disable'"
"invalid argument; expected 'enable'%select{|, 'full'}0%select{|, 'assume_safety'}1 or 'disable'"
'invalid authentication key %0'
'invalid block pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2'
'invalid block variable declaration - must be %select{const qualified|initialized}0'
"invalid block variable declaration - using 'extern' storage class is disallowed"
'invalid branch into OpenACC Compute/Combined Construct'
'invalid branch out of OpenACC Compute/Combined Construct'
"invalid branch protection option '%0' in '%1'"
"invalid case style for %0 '%1'"
"invalid character '%0' in raw string delimiter; use PREFIX( )PREFIX to delimit raw string"
"invalid comparison flag %0; use 'layout_compatible' or 'must_be_null'"
"invalid component '%0' used; expected 'x', 'y', 'z', or 'w'"
'invalid constructor from class in system header, should not be explicit'
'invalid conversion between ext-vector type %0 and %1'
'invalid conversion between vector type %0 and integer type %1 of different size'
'invalid conversion between vector type %0 and scalar type %1'
'invalid conversion between vector type%diff{ $ and $|}0,1 of different size'
"invalid conversion specifier '%0'"
'invalid covariant return for virtual function: %1 is a %select{private|protected}2 base class of %0'
'invalid cpu feature string for builtin'
'invalid cpu name for builtin'
'invalid custom discrimination'
'invalid declaration inside %select{tbuffer|cbuffer}0'
'invalid declaration specifier in template non-type parameter'
'invalid diagnostic type for \'diagnose_if\'; use "error" or "warning" instead'
"invalid digit '%0' in %select{decimal|octal|binary}1 constant"
"invalid digit '%0' in escape sequence"
"invalid escape sequence '%0' in an unevaluated string literal"
"invalid exception model '%select{none|sjlj|seh|dwarf|wasm}0' for target '%1'"
'invalid expected %0: %1'
'invalid explicit object parameter type %0 in lambda with capture; the type must be the same as, or derived from, the lambda'
'invalid explicit object parameter type %0 in lambda with capture; the type must derive publicly from the lambda'
'invalid extra discrimination selection %0'
"invalid extra discriminator flag '%0'; '__ptrauth' requires a value between '0' and '%1'"
'invalid feature combination: %0'
'invalid field is here'
'invalid filename for #line directive'
'invalid filename for line marker directive'
'invalid flag line marker directive'
"invalid float ABI '%0'"
"invalid iOS deployment version '%0', iOS 10 is the maximum deployment target for 32-bit targets"
'invalid index %0 for pack %1 of size %2'
"invalid input constraint '%0' in asm"
"invalid input for analyzer-config option '%0', that expects %1 value"
"invalid input for checker option '%0', that expects %1"
"invalid input size for constraint '%0'"
"invalid integral value '%1' in '%0'"
"invalid invocation of method '%0' on a temporary object while it is in the '%1' state"
"invalid invocation of method '%0' on object '%1' while it is in the '%2' state"
"invalid library name in argument '%0'"
"invalid line marker flag '2': cannot pop empty include stack"
"invalid linker name in argument '%0'"
'invalid literal operator parameter type %0, did you mean %1?'
"invalid lvalue in asm input for constraint '%0'"
'invalid lvalue in asm output'
'invalid matrix element type %0'
'invalid newline character in raw string delimiter; use PREFIX( )PREFIX to delimit raw string'
'invalid number of arguments to function: %0'
"invalid offload arch combinations: '%0' and '%1' (for a specific processor, a feature should either exist in all offload archs, or not exist in any offload archs)"
'invalid operand number in inline asm string'
'invalid operand of type %0 where %1 or a vector of such type is required'
'invalid operand of type %0 where floating, complex or a vector of such types is required'
'invalid operand of type %0%select{| where a scalar or vector is required}1'
'invalid operands to binary expression (%0 and %1)'
"invalid option '%0' for %select{cpu_specific|cpu_dispatch}1"
"invalid option '%0' not of the form <from-file>;<to-file>"
'invalid option combination; LASX depends on LSX'
"invalid or misplaced branch protection specification '%0'"
"invalid or unsupported offload target: '%0'"
"invalid or unsupported rounding mode in '#pragma STDC FENV_ROUND' - ignored"
"invalid output constraint '%0' in asm"
"invalid output size for constraint '%0'"
"invalid output type '%0' for use with gcc tool"
"invalid parameter name: '%0' is a keyword"
'invalid parameter type for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator; found %1, expected %2%select{| or %4}3'
'invalid parameter type for non-member defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator; found %1, expected class or reference to a constant class'
'invalid pipe access modifier (expecting %0)'
'invalid position specified for %select{field width|field precision}0'
"invalid preprocessing directive%select{|, did you mean '#%1'?}0"
'invalid profile : %0'
'invalid protocol qualifiers on non-ObjC type'
'invalid prototype, variadic arguments are not allowed in OpenCL'
"invalid range expression of type %0; did you mean to dereference it with '*'?"
"invalid range expression of type %0; no viable '%select{begin|end}1' function available"
"invalid range following '-' in expected %0"
"invalid reduction operator,  expected '+', '*', 'max', 'min', '&', '|', '^', '&&', or '||'"
'invalid reference to function %0: constraints not satisfied'
'invalid reinterpretation: sizes of %0 and %1 must match'
"invalid resource class specifier '%0' for packoffset, expected 'c'"
'invalid rounding argument'
"invalid runtime library name in argument '%0'"
'invalid size value'
"invalid space specifier '%0' used; expected 'space' followed by an integer, like space1"
'invalid special register for builtin'
'invalid storage class specifier in function declarator'
"invalid string literal, ignoring final '\\'"
"invalid suffix '%0' on %select{integer|floating|fixed-point}1 constant"
'invalid suffix on literal; C++11 requires a space between literal and identifier'
"invalid tag %0 on '%1' %select{directive|clause}2"
"invalid target ID '%0'; format is a processor name followed by an optional colon-delimited list of features followed by an enable/disable sign (e.g., 'gfx908:sramecc+:xnack-')"
'invalid target type %0 for dynamic_cast; target type must be a reference or pointer type to a defined class'
"invalid thread model '%0' in '%1' for this target"
"invalid thread pointer reading mode '%0'"
'invalid token at start of a preprocessor expression'
'invalid token in macro parameter list'
'invalid transaction abort code'
'invalid type %0 as argument of iboutletcollection attribute'
'invalid type %0 in asm %select{input|output}1'
"invalid type %0 in asm input for constraint '%1'"
'invalid type %0 is a %select{member|base}1 of %2'
'invalid type %0 to %1 operator'
'invalid universal character'
"invalid unwind library name in argument '%0'"
"invalid use of '__funcref' keyword outside the WebAssembly triple"
"invalid use of '__super', %0 has no base classes"
"invalid use of '__super', this keyword can only be used inside class or member function scope"
"invalid use of 'this' %select{outside of a non-static member function|in a function with an explicit object parameter}0"
'invalid use of PPC MMA type'
'invalid use of a cast in an inline asm context requiring an lvalue'
'invalid use of incomplete type %0'
'invalid use of member %0 in %select{static|explicit object}1 member function'
'invalid use of non-static data member %0'
'invalid use of pointer to member type after %select{.*|->*}0'
'invalid validator version : %0; format of validator version is "<major>.<minor>" (ex:"1.4")'
'invalid validator version : %0; if validator major version is 0, minor version must also be 0'
'invalid validator version : %0; validator version must be less than or equal to current internal version'
"invalid value %0 in '%1' clause; valid values are %2"
"invalid value '%1' in '%0'"
"invalid value '%1' in '%0', expected one of: %2"
"invalid value '%1' in '%0', value must be '%2' or greater"
"invalid value '%1' in '%0', value must be 'none' or a positive integer"
"invalid value '%1' in '%0'; alignment must be a power of 2"
'invalid value for %select{storage class}0 argument'
"invalid value for 'default' clause; expected 'present' or 'none'"
'invalid vector element type %0'
"invalid version number '%0' inferred from '%1'"
"invalid version number in '%0'"
"invalid virtual filesystem overlay file '%0'"
"invoking a pointer to a 'const &' member function on an rvalue is a C++20 extension"
"invoking a pointer to a 'const &' member function on an rvalue is incompatible with C++ standards before C++20"
"isa trait '%0' is not known to the current target; verify the spelling or consider restricting the context selector with the 'arch' selector further"
"it could also be property %select{of type %1|without attribute '%1'|with attribute '%1'|with getter %1|with setter %1}0 declared here"
'it delegates to'
'it is possible to stop the benchmarking process after some phase'
'iterator step expression %0 evaluates to 0'
'iterator step expression %0 is not the integral expression'
"ivar %0 which backs the property is not referenced in this property's accessor"
"joined argument expects additional value: '%0'"
"joined argument treated as '%0'; did you mean '%1'?"
'jump bypasses OpenMP structured block'
'jump bypasses auto release push of @autoreleasepool block'
'jump bypasses initialization of @catch block'
'jump bypasses initialization of @finally block'
'jump bypasses initialization of @synchronized block'
'jump bypasses initialization of @try block'
'jump bypasses initialization of VLA type alias'
'jump bypasses initialization of VLA typedef'
'jump bypasses initialization of __except block'
'jump bypasses initialization of __finally block'
'jump bypasses initialization of __strong variable'
'jump bypasses initialization of __try block'
'jump bypasses initialization of __weak variable'
'jump bypasses initialization of catch block'
'jump bypasses initialization of non-POD variable'
'jump bypasses initialization of try block'
'jump bypasses initialization of variable length array'
'jump bypasses initialization of variable of non-trivial C struct type'
'jump bypasses initialization of variable with __attribute__((cleanup))'
'jump bypasses setup of __block variable'
'jump bypasses variable initialization'
'jump bypasses variable with a non-trivial destructor'
'jump enters Objective-C fast enumeration loop'
'jump enters a statement expression'
'jump enters controlled statement of consteval if'
'jump enters controlled statement of constexpr if'
'jump enters controlled statement of if available'
'jump enters lifetime of a compound literal that is non-trivial to destruct'
'jump enters lifetime of block which captures a C struct that is non-trivial to destroy'
'jump enters lifetime of block which captures a destructible C++ object'
'jump enters lifetime of block which strongly captures a variable'
'jump enters lifetime of block which weakly captures a variable'
'jump exits @catch block'
'jump exits @finally block'
'jump exits @synchronized block'
'jump exits @try block'
'jump exits __except block'
'jump exits __finally block'
'jump exits __try block'
'jump exits autoreleasepool block'
'jump exits catch block'
'jump exits lifetime of a compound literal that is non-trivial to destruct'
'jump exits lifetime of block which captures a C struct that is non-trivial to destroy'
'jump exits lifetime of block which captures a destructible C++ object'
'jump exits lifetime of block which strongly captures a variable'
'jump exits lifetime of block which weakly captures a variable'
'jump exits scope of OpenMP structured block'
'jump exits scope of __block variable'
'jump exits scope of __strong variable'
'jump exits scope of __weak variable'
'jump exits scope of lifetime-extended temporary with non-trivial destructor'
'jump exits scope of variable with __attribute__((cleanup))'
'jump exits scope of variable with non-trivial destructor'
'jump exits try block'
'jump from switch statement to this case label is incompatible with C++'
'jump from switch statement to this case label is incompatible with C++98'
'jump from this %select{indirect|asm}0 goto statement to one of its possible targets is incompatible with C++'
'jump from this %select{indirect|asm}0 goto statement to one of its possible targets is incompatible with C++98'
'jump from this goto statement to its label is a Microsoft extension'
'jump from this goto statement to its label is incompatible with C++'
'jump from this goto statement to its label is incompatible with C++98'
'jump out of __finally block has undefined behavior'
'jump tables support (default=basic)'
'just the yaml representation of the profile'
'keep going after reporting a UMR'
'keep no-op instructions. By default they are removed.'
'keep or generate .debug_aranges section if .gdb_index is written'
'kernel call to non-global function %0'
'kernel function %0 is a member function; this may not be accepted by nvcc'
'kernel function %0 must be a free function or static member function'
'kernel function type %0 must have void return type'
'kernel functions cannot be class members'
'kernel functions cannot be declared static'
'kernel functions cannot be used in a template declaration, instantiation or specialization'
'kernel must have void return type'
'kernel parameter cannot be declared as a pointer to a pointer'
"keyword '%0' will be made available as an identifier %select{here|for the remainder of the translation unit}1"
'keyword is hidden by macro definition'
'kind mapping string to set kind precision'
"known but unsupported action '%1' for '#pragma %0' - ignored"
"label '%0' is reserved: use a different label name for -X<label>"
'label at end of compound statement is a C++23 extension'
'label at end of compound statement is a C23 extension'
'label at end of compound statement is incompatible with C standards before C23'
'label at end of compound statement is incompatible with C++ standards before C++23'
'label followed by a declaration is a C23 extension'
'label followed by a declaration is incompatible with C standards before C23'
'lambda %0 is inaccessible due to ambiguity:%1'
'lambda call operator should not be explicitly specialized or instantiated'
'lambda cannot be both mutable and static'
'lambda cannot be declared %0'
'lambda capture %0 is not %select{used|required to be captured for this use}1'
'lambda closure types are non-literal types before C++17'
'lambda expression begins here'
'lambda expression in an unevaluated operand'
'lambda expression in default argument cannot capture any entity'
'lambda expressions are incompatible with C++98'
'lambda template parameter list cannot be empty'
'lambda without a parameter clause is a C++23 extension'
'lambdas are a %select{C++11|clang HLSL}0 extension'
"language not recognized: '%0'"
'large atomic operation may incur significant performance penalty; the access size (%0 bytes) exceeds the max lock-free size (%1 bytes)'
'layout blocks in reverse order'
'lcov tracefile output'
'left hand operand of type %0 to compound assignment cannot be truncated when used with right hand operand of type %1'
'left hand operand to %0 must be a %select{|pointer to }1class compatible with the right hand operand, but is %2'
'left hand side of assignment operation(%0) must match one side of the sub-operation on the right hand side(%1 and %2)'
'left operand of comma operator has no effect'
'left shift of negative value %0'
"length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier"
'libclc builtin preparation tool\n'
'limit number of targets to consider when doing indirect call promotion on calls. 0 = no limit'
'limit number of targets to consider when doing indirect call promotion on jump tables. 0 = no limit'
'limit number of targets to consider when doing indirect call promotion. 0 = no limit'
'limit optimizations to functions from the list'
'limit optimizations to functions from the list (non-regex)'
'line marker directive requires a positive integer argument'
'line splicing in Doxygen comments are not supported'
"linking module '%0': %1"
'linking options'
'list item of type %0 is not valid for specified reduction operation: unable to provide default initialization value'
'list of functions to always consider for inlining'
'list of functions to apply frame opts'
'list of functions to core dump on (debugging)'
'list of functions to enable ICP for'
'list of functions to never consider for inlining'
'list of functions to pad with amount of bytes'
'list of functions to print'
'list of functions to skip'
'list of functions with call sites for which to specialize memcpy() for size 1'
"list of sections containing functions used for hugifying hot text. BOLT makes sure these functions are not placed on the same page as the hot text. (default='.stub,.mover')."
'list of sections to reorder'
'list of symbol names that can be reordered'
'list of symbol names that cannot be reordered'
'literal construction method %0 has incompatible signature'
'literal operator %0 must be in a namespace or global scope'
'literal operator cannot have a default argument'
'literal operator must have C++ linkage'
'literal operator template cannot have any parameters'
'literal operators are incompatible with C++98'
'lldb'
'llvm .bc -> .bc modular optimizer and analysis printer\n'
'llvm .bc -> .ll disassembler\n'
'llvm .ll -> .bc assembler\n'
'llvm LTO linker\n'
'llvm MC-JIT tool\n'
'llvm SPGO profile generator\n'
'llvm codegen stress-tester\n'
'llvm extractor\n'
'llvm host machine instruction characteristics measurment and analysis.\n'
'llvm interpreter & dynamic compiler\n'
'llvm jit event listener test utility\n'
'llvm jitlink tool'
'llvm linker\n'
'llvm machine code performance analyzer.\n'
'llvm machine code playground\n'
'llvm system compiler\n'
'llvm tool to verify use-list order\n'
'llvm-as Options'
'llvm-bcanalyzer file analyzer\n'
'llvm-boltdiff - BOLT binary diff tool\n\nEXAMPLE: llvm-boltdiff -data=a.fdata -data2=b.fdata exec1 exec2\n'
'llvm-cat Options'
'llvm-exegesis analysis options'
'llvm-exegesis benchmark options'
'llvm-exegesis options'
'llvm-extract Options'
'llvm-omp-kernel-replay Options'
'llvm-opt-report options'
'llvm-reduce options'
'load the input file as a Toy source.'
'load the input file as an MLIR file'
"loaded module file '%0' conflicts with imported file '%1'"
'loader options'
"loading modulemap '%0'"
"loading parsed module '%0'"
'local %select{struct|interface|union|class|enum}0 cannot be declared __module_private__'
'local declaration nearly matches'
'local declaration of %0 hides instance variable'
'local type %0 as template argument is incompatible with C++98'
"local variable '%0' should not be used in 'declare target' directive;"
"local variable cannot be declared 'constinit'"
"locking '%0' to build module '%1'"
'logical expression with vector %select{type %1 and non-vector type %2|types %1 and %2}0 is only supported in C++'
'logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0'
'lookup from the current scope refers here'
'lookup in the object type %0 refers here'
'lookup of %0 in member access expression is ambiguous'
'lookup of %0 in member access expression is ambiguous; using member of %1'
"loop iteration variable in the associated loop of 'omp %1' directive may not be %0, predetermined as %2"
'loop step is expected to be %select{negative|positive}0 due to this condition'
'loop to be fully unrolled must have a constant trip count'
'loop variable %0 %diff{of type $ binds to a temporary constructed from type $|binds to a temporary constructed from a different type}1,2'
'loop variable %0 binds to a temporary value produced by a range of type %1'
'loop variable %0 creates a copy from type %1'
"loop variable %0 may not be declared %select{'extern'|'static'|'__private_extern__'|'auto'|'register'|'constexpr'|'thread_local'}1"
"loop variable of loop associated with an OpenACC '%0' construct must be of integer, pointer, or random-access-iterator type (is %1)"
'loop will run at most once (loop increment never executed)'
"loop with a '%0' clause may not exist in the region of a '%1' clause%select{| on a '%3' construct}2"
'lower transpose without using a runtime call'
'mac68k alignment pragma is not supported on this target'
'macro %0 defined here'
'macro %0 has been marked as deprecated%select{|: %2}1'
'macro %0 has been marked as final and should not be %select{undefined|redefined}1'
'macro %0 has been marked as unsafe for use in headers%select{|: %2}1'
"macro '%0' contains embedded newline; text after the newline is ignored"
"macro '%0' was %select{defined|undef'd}1 in the precompiled file '%2' but %select{undef'd|defined}1 on the command line"
"macro expansion producing 'defined' has undefined behavior"
'macro is not used'
"macro marked '%select{deprecated|restrict_expansion|final}0' here"
'macro name is a reserved identifier'
'macro name missing'
'macro name must be an identifier'
"macro was %select{defined|#undef'd}0 here"
'magnitude of floating-point constant too large for type %0; maximum is %1'
'magnitude of floating-point constant too small for type %0; minimum is %1'
'main cannot be declared as a variable %select{in the global scope|with C language linkage}0'
'main file cannot be included recursively when building a preamble'
'make jump tables size smaller at the cost of using more instructions at jump sites'
'make the interpreter print every volatile load and store'
"malformed block record in PCH file: '%0'"
"malformed or corrupted precompiled file: '%0'"
"malformed sanitizer coverage allowlist: '%0'"
"malformed sanitizer coverage ignorelist: '%0'"
"malformed sanitizer ignorelist: '%0'"
"malformed sanitizer metadata ignorelist: '%0'"
'mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature'
"map type '%0' is previous specified here"
'map type is already specified'
"map type modifier '%0' is not allowed for '#pragma omp %1'"
'mapper type must be of struct, union or class type'
'mapping of union members is not allowed'
"mark %0 as '%select{final|sealed}1' to silence this warning"
"mark 'operator==' as const or add a matching 'operator!=' to resolve the ambiguity"
"mark function boundaries with break instruction to make sure we accidentally don't cross them"
'marked %0 here'
"marked as 'declare variant' here"
"marked as 'device_type(%0)' here"
'mask type size must be between 1-byte and 8-bytes'
'match functions in binary 2 to binary 1 if they have the same hash of a function in binary 1'
"math errno enabled by '%0' after it was implicitly disabled by '%1', this may limit the utilization of the vector library"
'mathematical notation character <U+%0> in an identifier is a Clang extension'
'matrix %select{row|column}0 index is not an integer'
'matrix %select{row|column}0 index is outside the allowed range [0, %1)'
'matrix row and column subscripts cannot be separated by any expression'
'matrix types extension is disabled. Pass -fenable-matrix to enable it'
'max depth when checking alias info in GatherAllAliases()'
'max number of bytes for the function to be considered small for inlining purposes'
'max stack depth tracing'
'max stack depth tracing should use callback and only when stack depth more than specified'
'maxclusterrank requires sm_90 or higher, CUDA arch provided: %0, ignoring %1 attribute'
'maximal number of instructions to instrument in any given BB'
'maximum address considered valid for heatmap (default 4GB)'
'maximum function durations'
'maximum number of bytes to reorder'
'maximum number of bytes to use to align functions'
'maximum number of call sites to inline'
'maximum number of data relocations to process'
'maximum number of functions to print in top called functions section'
'maximum number of functions to process'
'maximum number of hot basic blocks in a function for which to use a precise TSP solution while re-ordering basic blocks'
'maximum number of inline iterations'
'maximum number of samples to read from LBR profile'
'maximum number of symbols to reorder'
'maximum percentage of stale functions to tolerate (default: 100)'
'maximum search depth. 0 forces a greedy approach. warning: the algorithm is up to O(2^N), where N is the max depth.'
"meaningless '%0' on asm outside function"
'median function durations'
'member %0 cannot have template arguments'
"member %0 declared 'const' here"
'member %0 declared here'
'member %0 first declared here'
'member %0 found in multiple base classes of different types'
'member %0 has the same name as its class'
'member %0 of %1 is not a template; did you mean %select{|simply }2%3?'
'member %0 used before its declaration'
'member access into incomplete type %0'
'member declaration does not match because it %select{is|is not}0 const qualified'
'member declaration nearly matches'
'member found by ambiguous name lookup'
'member function %0 is not needed and will not be emitted'
'member function specialization matches %0'
'member initializer %0 does not name a non-static data member or base class'
'member is declared here'
"member is not a candidate because range type %0 has no '%select{end|begin}1' member"
'member not initialized by constructor'
'member of anonymous %select{struct|union}0 redeclares %1'
'member pointer has incomplete base type %0'
'member pointer representation requires a complete class type for %0 to perform this expression'
'member reference base type %0 is not a structure or union'
"member reference type %0 is %select{a|not a}1 pointer; did you mean to use '%select{->|.}1'?"
'member reference type %0 is not a pointer'
'member template declared %0 here'
'member type %0 found by ambiguous name lookup'
'member using declaration naming a non-member enumerator is incompatible with C++ standards before C++20'
"member using declaration naming non-class '%0' enumerator is incompatible with C++ standards before C++20"
'memory order argument to atomic operation is invalid'
"memory order clause '%0' is specified here"
'merge multiple fdata into a single file'
'merge settag instruction in function epilog'
'merge stack variable initializers with tagging when possible'
'merge-fdata options'
'messages delimited by --- lines, with # comment support'
'messages delimited by `// -----` lines, with // comment support'
'messaging a Class with a method that is possibly direct'
'messaging super with a direct method'
'messaging unqualified id'
'messaging unqualified id with a method that is possibly direct'
'method %0 declared here'
'method %0 in protocol %1 not implemented'
'method %0 is used for the forward class'
'method %0 that returns %1 declared here'
'method definition for %0 not found'
'method for accessing %select{dictionary|array}1 element must have Objective-C object return type instead of %0'
"method has no return type specified; defaults to 'id'"
'method implementation does not match its declaration'
'method index parameter type %0 is not integral type'
'method is expected to return an instance of its class type %diff{$, but is declared to return $|, but is declared to return different type}0,1'
'method key parameter type %0 is not object type'
'method marked as designated initializer of the class here'
"method name referenced in property setter attribute must end with ':'"
'method object parameter type %0 is not object type'
'method override for the designated initializer of the superclass %objcinstance0 not found'
'method parameter of type %0 with no explicit ownership'
'method parameter type %diff{$ does not match super class method parameter type $|does not match super class method parameter type}0,1'
'method possibly missing a [super %0] call'
'method returns unexpected type %0 (should be an object type)'
"method type specifier must start with '-' or '+'"
"method was declared as %select{an 'alloc'|a 'copy'|an 'init'|a 'new'}0 method, but its implementation doesn't match because %select{its result type is not an object pointer|its result type is unrelated to its receiver type}1"
'methods that %select{override superclass methods|implement protocol requirements}0 cannot be direct'
"micromips is not supported for target CPU '%0'"
'minimal size of the basic block that should be aligned'
'minimum address considered valid for heatmap (default 0)'
'minimum condition bias (pct) to perform a CMOV conversion, -1 to not account bias'
'minimum function durations'
'minimum misprediction rate (pct) to perform a CMOV conversion, -1 to not account misprediction rate'
'minimum number of points in an analysis cluster (dbscan only)'
'minimum offset needed between block and successor to allow duplication'
'minimum vscale must be an unsigned integer greater than 0'
'minus(-) operator for reductions is deprecated; use + or user defined reduction instead'
'misaligned atomic operation may incur significant performance penalty; the expected alignment (%0 bytes) exceeds the actual alignment (%1 bytes)'
"misleading indentation; statement is not part of the previous '%select{if|else|for|while}0'"
"mismatch between architecture and environment in target triple '%0'; did you mean '%1'?"
'mismatch in number of block parameters and local size arguments passed'
'misplaced %0; expected %0 here'
'misplaced attributes; expected attributes here'
'misprediction threshold for skipping ICP on an indirect call'
'missing %1 after %0'
"missing '(' after '#pragma %0' - ignoring"
"missing '(' following __VA_OPT__"
"missing ')' after '#pragma %0' - ignoring"
"missing ')' in macro parameter list"
"missing '*' in type bound %0 for type parameter %1"
"missing ',' after %0"
"missing ',' between base or member initializers"
"missing ',' between enumerators"
"missing ':' after %0 - ignoring"
"missing ':' after %0 modifier"
"missing ':' in %0"
"missing ':' or ')' after %0 - ignoring"
"missing '@end'"
"missing '[' at start of message send expression"
"missing 'export module' declaration in module interface unit"
"missing 'export' specifier in module declaration while building module interface"
"missing 'get=' or 'put='"
"missing 'module' declaration at end of global module fragment introduced here"
"missing 'template' keyword prior to dependent template name %0"
"missing 'typename' prior to dependent type name %0"
"missing 'typename' prior to dependent type name %0 is a C++20 extension"
"missing 'typename' prior to dependent type name %0 is incompatible with C++ standards before C++20"
"missing 'typename' prior to dependent type template name %0"
"missing '}' at end of definition of %q0"
'missing actual type specifier for pipe'
"missing argument to '#pragma %0'%select{|; expected %2}1"
"missing argument to '%0'"
"missing argument to debug command '%0'"
"missing argument; expected %select{an integer value|'enable'%select{|, 'full'}1%select{|, 'assume_safety'}2 or 'disable'}0"
'missing context for method declaration'
'missing context for property implementation declaration'
'missing custom discrimination'
'missing debug command'
'missing default argument on parameter'
'missing default argument on parameter %0'
'missing field %0 initializer'
'missing map type'
'missing map type modifier'
'missing numthreads attribute for %0 shader entry'
'missing object format flag'
"missing or invalid line number following '@' in expected %0"
'missing parentheses around the size of parameter pack %0'
'missing plugin argument for plugin %0 in %1'
'missing plugin name in %0'
"missing reduction operator, expected '+', '*', 'max', 'min', '&', '|', '^', '&&', or '||', follwed by a ':'"
'missing return type for function %0; did you mean the constructor name %1?'
"missing sanitizer ignorelist: '%0'"
'missing sentinel in %select{function call|method dispatch|block call}0'
'missing state for %0'
"missing submodule '%0'"
'missing symbol graph output directory, defaulting to working directory'
'missing terminating %select{\'|\'"\'}0 character'
"missing terminating ')' character"
'missing type bound %0 for type parameter %1 in %select{@interface|@class}2'
"missing version number in '%0'"
'mixed CUDA and HIP compilation is not supported'
"mixing 'target_clones' specifier mechanisms is permitted for GCC compatibility; use a comma separated sequence of string literals, or a string literal containing a comma-separated list of versions"
'mixing declarations and code is a C99 extension'
'mixing declarations and code is incompatible with standards before C99'
'mixture of designated and non-designated initializers in the same initializer list is a C99 extension'
'mlir-query options'
'mlir-reduce options'
'mode %0 is not supported for enumeration types'
'mode attribute only supported for integer and floating-point types'
'mode for simplify conditional tail calls'
'moderate strategy'
'modification of object of const-qualified type %0 is not allowed in a constant expression'
"modifier '%0' cannot be used along with modifier '%1'"
'modifying constructor parameter %0 that shadows a field of %1'
'modularize.\n'
"module %0 does not depend on a module exporting '%1'"
"module %0 does not directly depend on a module exporting '%1', which is part of indirectly-used module %2"
"module '%0' %select{in|imported by}4 precompiled file '%1' found in a different module map file (%2) than when the importing precompiled file was built (%3)"
"module '%0' %select{is incompatible with|requires}1 feature '%2'"
"module '%0' %select{uses|does not use}1 additional module map '%2'%select{| not}1 used when the module was built"
"module '%0' already re-exported as '%1'"
"module '%0' conflicts with already-imported module '%1': %2"
"module '%0' in precompiled file '%1' %select{(imported by precompiled file '%2') |}4is not defined in any loaded module map file; maybe you need to load '%3'?"
"module '%0' is defined in both '%1' and '%2'"
"module '%0' is needed but has not been provided, and implicit use of module files is disabled"
"module '%0' not found"
"module '%0' was built in directory '%1' but now resides in directory '%2'"
"module compilation requires '-fmodules'"
'module declaration can only appear at the top level'
'module declaration must occur at the start of the translation unit'
'module defined here'
'module file %0 cannot be loaded due to a configuration mismatch with the current compilation'
"module file '%0' is missing its top-level submodule"
"module file '%0' was validated as a system module and is now being imported as a non-system module; any difference in diagnostic options will be ignored"
'module file suffix override'
"module header file '%0' not found"
'module imported here'
"module interface compilation requires '-std=c++20'"
"module loaded from '%0'"
"module map file '%0' not found"
"module name '%0' specified on command line does not match name of module"
'module output directory (default .)'
'module partition implementations cannot be exported'
'module partition imports must be within a module purview'
'module partitions are only supported for C++20 onwards'
'module search directory'
'module%select{| partition}0 imports cannot be in the %select{global|private}1 module fragment'
"more '%%' conversions than data arguments"
"more than one 'device_type' clause is specified"
"more than one for-loop in a loop associated with OpenACC '%0' construct with a '%1' clause"
'more than one framework/dynamic library found'
"more than one input constraint matches the same output '%0'"
'move jump tables to a separate section'
'moving a local object in a return statement prevents copy elision'
'moving a temporary object prevents copy elision'
'ms_struct may not produce Microsoft-compatible layouts for classes with base classes or virtual functions'
"ms_struct may not produce Microsoft-compatible layouts with fundamental data types with sizes that aren't a power of two"
'mtriple'
'multi-character character constant'
'multi-dimensional arrays of WebAssembly references are not allowed'
'multi-line // comment'
'multilib configuration error: %0'
"multiple %0 architectures are detected: %1; only the first one is used for '%2'"
"multiple %select{'step size'|'linear modifier'}0 found in linear clause"
"multiple 'callback' attributes specified"
"multiple 'cpu_specific' functions cannot specify the same CPU: %0"
"multiple 'lifetime_capture' attributes specified"
"multiple 'routine' directives with 'bind' clauses are not permitted to refer to the same function"
'multiple access qualifiers'
'multiple address spaces specified for type'
'multiple array elements associated with the same variable are not allowed in map clauses of the same construct'
'multiple conversions from expression type %0 to an integral type'
'multiple conversions from switch condition type %0 to an integral or enumeration type'
'multiple declarations of method %0 found and ignored'
'multiple default labels in one switch'
'multiple definitions are found for the same key in index '
'multiple ellipses in pack capture'
'multiple garbage collection attributes specified for type'
'multiple identical address spaces specified for type'
'multiple initializations given for base %0'
'multiple initializations given for non-static member %0'
"multiple inputs are not valid for header units (first extra '%0')"
'multiple methods named %0 found'
'multiple methods named %0 found with mismatched result, parameter type or attributes'
'multiple overloads of %0 instantiate to the same signature %1'
'multiple packs in structured binding declaration'
'multiple return statements in constexpr function is a C++14 extension'
'multiple return statements in constexpr function is incompatible with C++ standards before C++14'
"multiple suitable %0 functions for %1; no 'operator delete' function will be invoked if initialization throws an exception"
'multiple suitable %0 functions in %1'
'multiple unsequenced modifications to %0'
'multiple vtable pointer authentication policies on %0'
'multiversioned function declaration has a different %select{calling convention|return type|constexpr specification|inline specification|linkage|language linkage}0'
'multiversioned function must have a prototype'
'multiversioned function redeclarations require identical target attributes'
'multiversioning attributes cannot be combined'
"must be declared with 'noexcept'"
'must be specified at least once!'
'must explicitly describe intended ownership of an object array parameter'
'must explicitly qualify name of member function when taking its address'
"must handle potential future platforms with '*'"
'must name member using the type of the current context %0'
"must pass in an explicit %0 gpu architecture to '%1'"
"must provide a symbol graph output directory using '--symbol-graph-dir=<directory>'"
'must qualify identifier to find this declaration in dependent base class'
"must specify '-fmodule-name=%0' to enter %select{|submodule of }1this module%select{ (current module is %3)|}2"
'must specify system root with -isysroot when building a relocatable PCH file'
"must use '%1' tag to refer to type %0%select{| in this scope}2"
'my-tool options'
'n'
'name defined in alias declaration must be an identifier'
'name defined in concept definition must be an identifier'
'named bit-field %0 has zero width'
'named variadic macros are a GNU extension'
'namespace %0 defined here'
'namespace alias cannot be inline'
'namespace alias must be a single identifier'
"namespace can only apply to 'push' or 'pop' directives"
'namespaces can only be defined in global or namespace scope'
"negated attribute subject matcher sub-rule '%0' contradicts sub-rule '%1'"
'negative shift count %0'
"nested OpenMP context selector contains duplicated trait '%0' in selector '%1' and set '%2' with different score"
'nested designators are a C99 extension'
'nested name specifier %0 for declaration does not refer into a class, class template or class template partial specialization'
'nested name specifier for a declaration cannot depend on a template parameter'
"nested namespace definition cannot be 'inline'"
'nested namespace definition is a C++17 extension; define each namespace separately'
'nested namespace definition is incompatible with C++ standards before C++17'
'nested parentheses not permitted in %0'
'nested redefinition of %0'
'nested teams construct here'
'nested user conditions in OpenMP context selector not supported (yet)'
'never apply unchecked-ld-st'
'never print'
'never replace exit value'
'new expression for type %0 contains multiple constructor arguments'
'new expression for type %0 has incompatible constructor argument of type %1'
'new expression for type %0 requires a constructor argument'
'next %select{instance variable declaration|synthesized instance variable}0 is here'
'next field declaration is here'
'no %select{getter|setter}0 defined for property %1'
'no %select{struct|interface|union|class|enum}0 named %1 in %2'
"no 'assign', 'retain', or 'copy' attribute is specified - 'assign' is assumed"
'no @interface declaration found in class messaging of %0'
"no MCU device specified, but '-mhwmult' is set to 'auto', assuming no hardware multiply; use '-mmcu' to specify an MSP430 device, or '-mhwmult' to set the hardware multiply type explicitly"
'no PowerPC native vector element order.'
"no analyzer checkers or packages are associated with '%0'"
'no avr-libc installation can be found on the system, cannot link standard libraries'
'no candidate function template was found for dependent %select{member|friend}0 function template specialization'
"no case matching constant switch condition '%0'"
"no closing ']' for '%%[' in scanf format string"
'no corresponding base class here'
'no corresponding enumerator here'
'no corresponding field here'
'no corresponding friend here'
'no corresponding superclass here'
"no declaration found for exported symbol '%0' in dynamic library"
"no declaration was found for exported symbol '%0' in dynamic library"
"no expected directives found: consider use of '%0-no-diagnostics'"
'no function template matches function template specialization %0'
'no getter method %1 for %select{increment|decrement}0 of property'
'no getter method for read from property'
"no handler registered for module format '%0'"
'no input files'
'no install name specified: add -install_name <path>'
'no known %select{instance|class}1 method for selector %0'
"no known method %select{%objcinstance1|%objcclass1}0; cast the message send to the method's return type"
"no library '%0' found in the default clang lib directory or in LIBRARY_PATH; use '--libomptarget-%1-bc-path' to specify %1 bitcode library"
'no macro named %0'
'no matching %0 function for non-allocating placement new expression; include <new>'
"no matching '#pragma clang module begin' for this '#pragma clang module end'"
"no matching '#pragma clang module end' for this '#pragma clang module begin'"
"no matching '#pragma clang module endbuild' for this '#pragma clang module build'"
'no matching constructor for initialization of %0'
'no matching conversion for %select{|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast|}0 from %1 to %2'
'no matching function for call to %0'
'no matching function for call to object of type %0'
"no matching literal operator for call to %0%select{| with argument of type %2| with arguments of types %2 and %3}1%select{| or 'const char *'}4%select{|, and no matching literal operator template}5"
'no matching member function for call to %0'
"no matching target found for target variant '%0'"
'no member %0 in %1; it has not yet been instantiated'
'no member named %0 in %1'
'no member named %0 in %1; did you mean %select{|simply }2%3?'
"no member named %0 in %1; did you mean to use '->' instead of '.'?"
'no method with selector %0 is implemented in this translation unit'
'no module map available for module %0'
'no module name provided; specify one with -fmodule-name='
"no module named '%0' %select{found|in '%2'}1, parent module must be defined before the submodule"
"no module named '%0' declared in module map file '%1'"
"no module named '%0' in '%1'"
"no module named '%0' visible from '%1'"
"no more 'if' clause is allowed"
"no more than one option '--config' is allowed"
'no multilib found matching flags: %0'
'no namespace named %0 in %1; did you mean %select{|simply }2%3?'
'no namespace named %0; did you mean %1?'
'no newline at end of file'
'no output file specified'
'no previous extern declaration for non-static variable %0'
'no previous prototype for function %0'
'no profile data available for file "%0"'
'no return statement in %select{constexpr|consteval}0 function'
"no submodule named %0 in module '%1'"
"no submodule named %0 in module '%1'; did you mean '%2'?"
"no submodule named %0 in module '%1'; using top level '%2'"
"no such %select{public|private|project}1 header file: '%0'"
"no such excluded %select{public|private}0 header file: '%1'"
"no such file or directory: '%0'"
"no such file or directory: '%0'; did you mean '%1'?"
"no such include directory: '%0'"
"no such sysroot directory: '%0'"
'no suitable member %0 in %1'
"no suitable precompiled header file found in directory '%0'"
'no target microcontroller specified, please pass -mmcu=<mcu name>'
'no template named %0'
'no template named %0 in %1'
'no template named %0 in %1; did you mean %select{|simply }2%3?'
'no template named %0; did you mean %1?'
'no type named %0 in %1'
'no type named %0 in %1; did you mean %select{|simply }2%3?'
"no type named 'type' in %0; 'enable_if' cannot be used to disable this declaration"
'no type or protocol named %0'
"no valid clauses specified in OpenACC 'declare' directive"
'no variable template matches specialization; did you mean to use %0 as function template instead?'
'no variable template matches%select{| partial}0 specialization'
'no viable candidate for explicit instantiation of %0'
'no viable constructor %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1'
'no viable constructor %select{copying variable|copying parameter|initializing template parameter|returning object|initializing statement expression result|throwing object|copying member subobject|copying array element|allocating object|copying temporary|initializing base subobject|initializing vector element|capturing value}0 of type %1; C++98 requires a copy constructor when binding a reference to a temporary'
'no viable constructor or deduction guide for deduction of template arguments of %0'
'no viable conversion%diff{ from $ to incomplete type $|}0,1'
'no viable conversion%select{%diff{ from $ to $|}1,2|%diff{ from returned value of type $ to function return type $|}1,2}0'
'no viable destructor found for class %0'
"no viable overloaded '%0'"
'no viable overloaded operator[] for type %0'
'no visible @interface for %0 declares the selector %1'
'noexcept expressions are incompatible with C++98'
'noexcept specifications are incompatible with C++98'
'non-ASM statement in naked function is not supported'
'non-class friend type %0 is a C++11 extension'
'non-class friend type %0 is incompatible with C++98'
'non-const static data member must be initialized out of line'
'non-constant static local variable in inline function may be different in different files'
'non-constant-expression cannot be narrowed from type %0 to %1 in initializer list'
'non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11'
'non-consteval function %0 cannot override a consteval function'
'non-constexpr comparison function declared here'
'non-constexpr comparison function would be used to compare %select{|member %1|base class %1}0'
'non-deducible template parameter %0'
'non-default #pragma pack value changes the alignment of struct or union members in the included file'
"non-default visibility cannot be applied to 'dllimport' declaration"
'non-defining declaration of enumeration with a fixed underlying type is only permitted as a standalone declaration%select{|; missing list of enumerators?}0'
'non-deleted function %0 cannot override a deleted function'
'non-extern declaration of %0 follows extern declaration'
'non-friend class member %0 cannot have a qualified name'
'non-inline external definitions are not permitted in C++ header units'
'non-inline namespace cannot be reopened as inline'
'non-literal type %0 cannot be used in a constant expression'
'non-local lambda expression cannot have a capture-default'
'non-local variable with sizeless type %0'
'non-namespace scope %0 cannot have a literal operator member'
'non-object type %0 is not assignable'
"non-pointer argument to '__builtin_assume_aligned' is not allowed"
'non-pointer operand type %0 incompatible with %select{NULL|nullptr}1'
"non-portable path to file '%0'; specified path differs in case from file name on disk"
'non-predefined allocator must have traits specified'
'non-static data member %0 cannot be declared as a template'
'non-static data member cannot be constexpr%select{; did you intend to make it %select{const|static}0?|}1'
'non-static data member defined out-of-line'
'non-static declaration of %0 follows static declaration'
'non-static member %0 found in multiple base-class subobjects of type %1:%2'
'non-template declaration found by name lookup'
'non-template friend declaration with a requires clause must be a definition'
'non-template literal operator must have one or two parameters'
'non-templated declaration is here'
'non-templated function cannot have a requires clause'
'non-thread-local declaration of %0 follows thread-local declaration'
'non-trivial destruction of lifetime-extended temporary with type %0 used in the result of a constant expression is not yet supported'
'non-trivial destruction of type %0 in a constant expression is not supported'
'non-trivially copyable type %0 cannot be used in a boxed expression'
'non-type declaration found by destructor name lookup'
"non-type template argument '%0' is invalid"
'non-type template argument containing a dereference operation is a Microsoft extension'
'non-type template argument does not refer to an object or function'
'non-type template argument does not refer to any declaration'
'non-type template argument for template parameter of pointer type %0 must have its address taken'
'non-type template argument is not a pointer to member constant'
'non-type template argument of reference type %0 is not an object'
'non-type template argument of type %0 cannot be converted to a value of type %1'
'non-type template argument of type %0 is not a constant expression'
'non-type template argument of type %0 is not an integral constant expression'
'non-type template argument of type %0 must have an integral or enumeration type'
'non-type template argument referring to %select{function|object}0 %1 with internal linkage is a C++11 extension'
'non-type template argument referring to %select{function|object}0 %1 with internal linkage is incompatible with C++98'
'non-type template argument refers here'
'non-type template argument refers to %select{function|object}0 %1 that does not have linkage'
'non-type template argument refers to %select{function|object}0 here'
'non-type template argument refers to non-static data member %0'
'non-type template argument refers to non-static member function %0'
"non-type template argument refers to subobject '%0'"
'non-type template argument refers to thread-local object'
'non-type template argument specializes a template parameter with dependent type %0'
"non-type template argument value '%0' truncated to '%1' for template parameter of type %2"
"non-type template argument with value '%0' converted to '%1' for unsigned template parameter of type %2"
'non-type template parameter %0 with type %1 has incompatible initializer of type %2'
'non-type template parameter declared with incompatible types in different translation units (%0 vs. %1)'
'non-type template parameter has incomplete type %0'
'non-type template parameter has non-literal type %0'
'non-type template parameter has rvalue reference type %0'
'non-type template parameter of reference type %diff{$ cannot bind to template argument of type $|cannot bind to template of incompatible argument type}0,1'
'non-type template parameter of type %0 is incompatible with C++ standards before C++20'
'non-type template parameter of variably modified type %0'
'non-type template parameters declared with %0 are incompatible with C++ standards before C++17'
'non-usual %0 declared here'
"non-variable declaration in 'for' loop"
"non-variable declaration in 'for' loop is a C23 extension"
"non-variable declaration in 'for' loop is incompatible with C standards before C23"
"non-virtual member function marked '%0' hides virtual member %select{function|functions}1"
'non-void %select{constexpr|consteval}1 function %0 should return a value'
'non-void %select{function|block|lambda|coroutine}0 does not return a value%select{| in all control paths}1'
'non-void %select{function|method}1 %0 should return a value'
'non-void block should return a value'
"nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter"
'not a Doxygen trailing comment'
"not currently inside '#pragma clang arc_cf_code_audited'"
"not currently inside '#pragma clang assume_nonnull'"
"not currently inside '#pragma unsafe_buffer_usage'"
'not eliding copy on return'
'not enough variable arguments in %0 declaration to fit a sentinel'
'not packing field %0 as it is non-POD for the purposes of layout'
'not-yet-instantiated member is declared here'
'null character ignored'
'null character(s) preserved in %select{char|string}0 literal'
'null non-type template argument must be cast to template parameter type %0'
'null non-type template argument of type %0 does not match template parameter of type %1'
'null passed to a callee that requires a non-null argument'
'null returned from %select{function|method}0 that requires a non-null return value'
'nullability keyword %0 cannot be applied to multi-level pointer type %1'
'nullability specifier %0 cannot be applied to non-pointer type %1'
'nullability specifier %0 cannot be applied to non-pointer type %1; did you mean to apply the specifier to the %select{pointer|block pointer|member pointer|function pointer|member function pointer}2?'
'nullability specifier %0 conflicts with existing specifier %1'
'number of elements must be either one or match the size of the vector'
'number of entries per line (default 256)'
'number of functions to display when printing the top largest differences in function activity'
'number of hottest functions to print aggregated profile quality stats of.'
'number of tasks to be created per thread'
'number of threads'
'numeric literal with user-defined suffix cannot be used here'
"nvcc does not allow '__%0__' to appear after the parameter list in lambdas"
'obj2yaml Options'
'objc_precise_lifetime is not meaningful for %select{__unsafe_unretained|__autoreleasing}0 objects'
'objc_precise_lifetime only applies to retainable types; type here is %0'
'objc_root_class attribute may only be specified on a root class declaration'
'object backing %select{|the pointer }0%1 will be destroyed at the end of the full-expression'
'object backing the pointer %0 will be destroyed at the end of the full-expression'
'object backing the pointer will be destroyed at the end of the full-expression'
'object expression of non-scalar type %0 cannot be used in a pseudo-destructor expression'
"object format flags cannot be used with '%0' conversion specifier"
'object of type %0 cannot be %select{constructed|copied|moved|assigned|assigned|destroyed}1 because its %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 is implicitly deleted'
'object of type %0 cannot be compared because its %1 is implicitly deleted'
'object of type %0 cannot be placed in read-only memory'
'object of type %0 is not compatible with %select{array element type|dictionary key type|dictionary value type}1 %2'
'object whose reference is captured by %0 will be destroyed at the end of the full-expression'
'object whose reference is captured will be destroyed at the end of the full-expression'
'octal integer literals are a C2y extension'
'octal integer literals are a Clang extension'
'octal integer literals are incompatible with standards before C2y'
"octal literals without a '0o' prefix are deprecated"
'offload-arch options'
'offset of asan shadow mapping [EXPERIMENTAL]'
'offset-based plaintext format'
'offsetof of incomplete type %0'
'offsetof requires array type, %0 invalid'
'offsetof requires struct, union, or class type, %0 invalid'
"old syntax '%0' on '%1' clause was deprecated, use new syntax '%2'"
'omit the namespace to add attributes to the most-recently pushed attribute group'
'omitting the parameter name in a function definition is a C23 extension'
'on M-profile architectures %0 attribute is not supported on targets missing %1; specify an appropriate -march= or -mcpu='
'one cluster per opcode'
"one of 'for', 'parallel', 'sections' or 'taskgroup' is expected"
'one possibility'
"only %select{'omp_priv' or 'omp_orig'|'omp_in' or 'omp_out'}0 variables are allowed in %select{initializer|combiner}0 expression"
"only '*' can be exported from an inferred submodule"
"only 'device_type(any)' clause is allowed with indirect clause"
"only 'unavailable' and 'deprecated' are supported for Swift availability"
'only a single match extension allowed per OpenMP context selector'
'only allow matching call instructions if the name and type signature match.'
'only apply branch boundary alignment in hot code'
'only constructors take base initializers'
'only dump ids with the specified hexadecimal type index'
'only dump symbol record with the specified symbol offset'
'only dump types with the specified hexadecimal type index'
'only enumeration types have underlying types'
'only function and template parameters can be parameter packs'
'only functions can have deleted definitions'
'only insert instrumentation on hot functions (needs profile, default: false)'
"only loop iteration variables are allowed in 'lastprivate' clause in 'omp %0' directives"
"only loop iteration variables are allowed in 'linear' clause in distribute directives"
'only one %0 clause can appear on a requires directive in a single translation unit'
'only one element declaration is allowed'
"only one expression allowed in '%0' clause"
'only one offload target is supported'
"only one parameter on 'main' declaration"
'only perform sctc when branch direction is preserved'
'only promote call targets eligible for inlining'
'only recurse to a depth of N when displaying children of a symbol record.'
'only recurse to a depth of N when displaying parents of a symbol record.'
'only rename the instructions in the function'
'only replace exit value when it is an unused induction variable in the loop and has cheap replacement cost'
'only replace exit value when the cost is cheap'
'only replace exit values when loop def likely dead'
'only show the top N results'
'only special member functions %select{|and comparison operators }0may be defaulted'
'only submodules and framework modules may be inferred with wildcard syntax'
'only the first dimension of an allocated array may have dynamic size'
'only top-level modules can be re-exported as public'
'only use samples from process with specified PID'
"only variable %0 is allowed in map clauses of this 'omp declare mapper' directive"
"only variables can be arguments to '#pragma unused'"
"only virtual member functions can be marked '%0'"
'only zero-length WebAssembly tables are currently supported'
'opcode to measure, by index, or -1 to measure all opcodes'
"operand argument to %select{overflow builtin|checked integer operation}0 must be an integer type %select{|other than plain 'char', 'bool', bit-precise, or an enumeration }0(%1 invalid)"
'operand of ? changes signedness: %0 to %1'
'operand of type %0 cannot be cast to a pointer type'
'operand of type %0 where arithmetic or pointer type is required'
'operands to conditional of types%diff{ $ and $|}0,1 are incompatible in ARC mode'
"operator '%0' has lower precedence than '%1'; '%1' will be evaluated first"
"operator '?:' has lower precedence than '%0'; '%0' will be evaluated first"
'operators in fold expression must be the same'
'opt-like flags'
"optimization flag '%0' is not supported"
"optimization flag '%0' is not supported for target '%1'"
"optimization level '%0' is not supported; using '%1%2' instead"
'optimize PLT calls (requires linking with -znow)'
'optimize all PLT calls'
'optimize executed (hot) PLT calls'
'optimize functions with jump tables'
'optimize hottest calls until at least this percentage of all indirect calls frequency is covered. 0 = all callsites'
'optimize stack frame accesses'
"option '%0' cannot be specified on this target"
"option '%0' cannot be specified with '%1'"
"option '%0' cannot be specified with '%1' for the %2 sub-architecture"
"option '%0' cannot be specified without '%1'"
"option '%0' requires input to be LLVM bitcode"
"option '%0' was ignored by the %1 toolchain, using '-fPIC'"
"option '-MG' requires '-M' or '-MM'"
"option '-ffine-grained-bitfield-accesses' cannot be enabled together with a sanitizer; flag ignored"
"option '-fmodule-output' cannot be used with multiple arch options"
"option '-fmodules-validate-once-per-build-session' requires '-fbuild-session-timestamp=<seconds since Epoch>' or '-fbuild-session-file=<file>'"
"option 'ffp-eval-method' cannot be used with option %select{'fapprox-func'|'mreassociate'|'freciprocal'}0"
'options %0 and %1 are set to different values'
'or because setter is declared here, but no getter method %0 is found'
"or insert whitespace before ':' to use %0 as parameter name and have an empty entry in the selector"
'order by execution count'
'ordered compare requires two args of floating point type%diff{ ($ and $)|}0,1'
'ordered comparison between pointer and integer (%0 and %1)'
'ordered comparison between pointer and zero (%0 and %1)'
'ordered comparison between pointer and zero (%0 and %1) is an extension'
'ordered comparison of function pointers (%0 and %1)'
'original arguments in round-trip: %0'
'original arguments parse failed, then succeeded in round-trip'
'original storage of expression in data environment is shared but data environment do not fully contain mapped expression storage'
"orphaned 'omp %0' directives are prohibited; perhaps you forget to enclose the directive into a %select{|||target |teams|for, simd, for simd, parallel for, or parallel for simd }1region?"
"os '%0' is not supported: '%1'"
"os_log() '%%n' format specifier is not allowed"
'os_log() argument %0 is too big (%1 bytes, max %2)'
'os_log() format argument is not a string constant'
'other definition of %0'
'out-of-line %select{declaration|definition}2 of %0 does not match any declaration in %1'
'out-of-line %select{declaration|definition}2 of %0 does not match any declaration in %1; did you mean %3?'
'out-of-line constructor for %0 cannot have template arguments'
'out-of-line declaration of a member must be a definition'
'out-of-line definition of %0 from class %1 without definition'
'out-of-line definition of constexpr static data member is redundant in C++17 and is deprecated'
'outline as many cold basic blocks as possible'
"output data (.csv) for Stoke's use"
'output file to write out a summary of the partitions created for each module'
'output file to write out the dotgraph representation of the input module'
"output file; use '-' for stdout"
'output format'
'output in binary'
'output in yaml'
'output the AST dump'
'output the LLVM IR dump'
'output the MLIR dump'
'output the MLIR dump after affine lowering'
'output the MLIR dump after llvm lowering'
'overflow converting case value to switch condition type (%0 to %1)'
'overflow in expression; result is %0 with type %1'
"overload resolution selected deleted operator '%0'%select{|: %2}1"
'overloaded %0 cannot be a static member function'
'overloaded %0 cannot be variadic'
'overloaded %0 cannot have %select{no|a defaulted|more than one}1 parameter before C++23'
'overloaded %0 must be a %select{unary|binary|unary or binary}2 operator (has %1 parameter%s1)'
'overloaded %0 must be a non-static member function'
'overloaded %0 must have at least one parameter of class or enumeration type'
'overloaded %0 with %select{no|a defaulted|more than one}1 parameter is a C++23 extension'
'overloaded operator %select{>>|<<}0 has higher precedence than comparison operator'
'overridden method is here'
'overridden method returns an instance of its class type'
'overridden virtual function is here'
'override the name of the default PROGRAM entry (may be helpful for using other runtimes)'
'overrides DW_AT_comp_dir, and provides an alternative base location, which is used with DW_AT_dwo_name to construct a path to *.dwo files.'
"overriding '%0' option with '%1'"
'overriding currently unsupported rounding mode on this target'
'overriding currently unsupported use of floating point exceptions on this target'
"overriding deployment version from '%0' to '%1'"
'overriding method has mismatched ns_consumed attribute on its parameter'
'overriding method has mismatched ns_returns_%select{not_retained|retained}0 attributes'
'overriding the module target triple with %0'
'overriding virtual function must specify the same code segment as its overridden function'
'p'
'pac-ret: return address protection (subset of "pauth")'
'pack declaration outside of template'
'pack expansion contains parameter pack %0 that has a different length (%1 vs. %select{|at least }2%3) from outer parameter packs'
'pack expansion contains parameter pack %0 that has a different length (at least %1 vs. %2) from outer parameter packs'
'pack expansion contains parameter packs %0 and %1 that have different lengths (%2 vs. %select{|at least }3%4)'
'pack expansion does not contain any unexpanded parameter packs'
'pack expansion for initialization of member %0'
'pack expansion of using declaration is a C++17 extension'
'pack expansion used as argument for non-pack parameter of %select{alias template|concept}0'
'pack expansion using declaration is incompatible with C++ standards before C++17'
'pack fold expression is a C++17 extension'
'pack fold expression is incompatible with C++ standards before C++17'
'pack indexing is a C++2c extension'
'pack indexing is incompatible with C++ standards before C++2c'
'packed attribute is unnecessary for %0'
"packoffset at 'y' not match alignment %0 required by %1"
'packoffset cannot cross register boundary'
'packoffset overlap between %0, %1'
'padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align %4'
'padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align anonymous bit-field'
'padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align anonymous field'
'padding size of %0 with %1 %select{byte|bit}2%s1 to alignment boundary'
'parameter %0 must have a complete type to use function %1 with the %2 calling convention'
'parameter %0 set but not used'
"parameter %0 was not declared, defaults to 'int'; ISO C99 and later do not support implicit int"
"parameter '%0' is already documented"
"parameter '%0' not found in the function declaration"
"parameter '%0' not in expected state when the function returns: expected '%1', observed '%2'"
"parameter cannot be named '%select{global|unknown}0' while using 'lifetime_capture_by(%select{global|unknown}0)'"
'parameter declarator cannot be qualified'
'parameter kind mismatch; parameter is %select{not a|a}0 parameter pack'
'parameter may not be qualified with an address space'
'parameter name cannot have template arguments'
'parameter named %0 is missing'
"parameter of %0 attribute must be 'id' when used on a typedef"
'parameter of %0 attribute must be a single name of an Objective-C %select{class|protocol}1'
'parameter of %0 cannot have a default argument'
"parameter of literal operator must have type 'unsigned long long', 'long double', 'char', 'wchar_t', 'char16_t', 'char32_t', or 'const char *'"
'parameter of overloaded %0 cannot have a default argument'
"parameter of overloaded post-%select{increment|decrement}1 operator must have type 'int' (not %0)"
'parameter of overridden method is annotated with __attribute__((noescape))'
'parameter of overriding method should be annotated with __attribute__((noescape))'
"parameter of the 'collapse' clause"
'parameter of type %0 is declared here'
'parameter pack %0 declared here'
'parameter pack cannot have a default argument'
'parameter references not allowed in naked functions'
"parameterized class %0 already conforms to the protocols listed; did you forget a '*'?"
'parameters for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must have the same type%diff{ (found $ vs $)|}1,2'
"parent region for 'omp %select{cancellation point|cancel}0' construct cannot be nowait"
"parent region for 'omp %select{cancellation point|cancel}0' construct cannot be ordered"
"parent umbrella does not match: '%0' (provided) vs '%1' (found)"
"parent umbrella missing from %0: '%1'"
'parentheses are required around macro argument containing braced initializer list'
'parentheses are required around this expression in a requires clause'
'parentheses around address non-type template argument are a C++11 extension'
'parentheses around address non-type template argument are incompatible with C++98'
"parentheses must be omitted if %0 attribute's argument list is empty"
'parentheses were disambiguated as a function declaration'
'parentheses were disambiguated as redundant parentheses around declaration of variable named %0'
'parenthesize the second argument to silence'
'parenthesized initialization of a member array is a GNU extension'
'parse the input, create a PFT, dump it, and exit'
"parsing modulemap '%0'"
'partial ordering for explicit instantiation of %0 is ambiguous'
'partial specialization cannot be declared as a friend'
'partial specialization matches %0'
'partial specialization of %0 does not use any of its template parameters'
'pass -fsafe-buffer-usage-suggestions to receive code hardening suggestions'
'passing %0-byte aligned argument to %1-byte aligned parameter %2%select{| of %4}3 may result in an unaligned pointer access'
'passing %select{address of|reference to}0 local temporary object to musttail function'
"passing %select{an object that undergoes default argument promotion|an object of reference type|a parameter declared with the 'register' keyword}0 to 'va_start' has undefined behavior"
"passing '%0' format string where '%1' format string is expected"
"passing a type argument as the first operand to '_Generic' is a C2y extension"
"passing a type argument as the first operand to '_Generic' is incompatible with C standards before C2y"
'passing address of %select{non-local|non-scalar}0 object to __autoreleasing parameter for write-back'
'passing argument to parameter %0 here'
'passing argument to parameter here'
'passing arguments to %select{a function|%1}0 without a prototype is deprecated in all versions of C and is not supported in C23'
'passing byval argument %0 with potentially incompatible alignment here'
"passing no argument for the '...' parameter of a variadic macro is a C++20 extension"
"passing no argument for the '...' parameter of a variadic macro is a C23 extension"
"passing no argument for the '...' parameter of a variadic macro is incompatible with C standards before C23"
"passing no argument for the '...' parameter of a variadic macro is incompatible with C++ standards before C++20"
'passing non-generic address space pointer to %0 may cause dynamic conversion affecting performance'
"passing object of class type %0 through variadic %select{function|block|method|constructor}1%select{|; did you mean to call '%3'?}2"
'passing object of trivial but non-POD type %0 through variadic %select{function|block|method|constructor}1 is incompatible with C++98'
"passing only one argument to 'va_start' is incompatible with C standards before C23"
"passing pointer %1 requires holding %0 %select{'%2'|'%2' exclusively}3"
"passing pointer to variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3"
"passing the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3"
'passing union across security boundary via %select{parameter %1|return value}0 may leak information'
"passing variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3"
"pasting formed '%0', an invalid preprocessing token"
"pasting two '/' tokens into a '//' comment is a Microsoft extension"
'path to a pass plugin for HIP to SPIR-V passes.'
'path to instrumented binary in case if /proc/self/map_files is not accessible due to access restriction issues'
'pc tracing with a guard'
'perf2bolt - BOLT data aggregator\n\nEXAMPLE: perf2bolt -p=perf.data executable -o data.fdata\n'
'perform FOP on all functions'
'perform FOP on hot functions'
'perform ICP on calls and jump tables'
'perform ICP on indirect calls'
'perform ICP on jump tables'
'perform layout optimizing I-cache behavior'
'perform optimal layout based on profile'
'perform optimal layout prioritizing I-cache behavior'
'perform optimal layout prioritizing branch predictions'
'perform profiling accuracy-sensitive optimizations only if function execution count >= the threshold (default: 0)'
'perform random layout of clusters'
'perform verification of LLVM instruction encoding/decoding. Every instruction in the input is decoded and re-encoded. If the resulting bytes do not match the input, a warning message is printed.'
'performSelector may cause a leak because its selector is unknown'
'performSelector names a selector which retains the object'
'performing pointer arithmetic on a null pointer has undefined behavior%select{| if the offset is nonzero}0'
'performing pointer subtraction with a null pointer %select{has|may have}0 undefined behavior'
'performs disassembly sequentially'
'permutation index must be at least 1 and at most %0'
'pick register allocator based on -O option'
'pipes packet types cannot be of reference type'
"place '...' %select{immediately before declared identifier|here}0 to declare a function parameter pack"
'place all array allocations more than <size> elements on the heap'
'place all array allocations of dynamic size on the heap'
'place parentheses around comparison expression to evaluate it first'
'place parentheses around the %0 expression to evaluate it first'
'place parentheses around the %quoted0 expression to silence this warning'
"place parentheses around the '?:' expression to evaluate it first"
'place parentheses around the assignment to silence this warning'
'place parentheses around the string literal to silence warning'
'placeholder declared here'
'placeholder variables are a C++2c extension'
'placeholder variables are incompatible with C++ standards before C++2c'
'placement new would change type of storage from %0 to %1'
"plain '_Complex' requires a type specifier; assuming '_Complex double'"
"platform does not match: '%0' (provided) vs '%1' (found)"
"please rebuild precompiled file '%0'"
'plt'
'pointer %0 declared here'
"pointer arguments to kernel functions must reside in '__global', '__constant' or '__local' address space"
'pointer cannot be cast to type %0'
'pointer cannot be mapped along with a section derived from itself'
'pointer comparisons before C11 need to be between two complete or two incomplete types; %0 is %select{|in}2complete and %1 is %select{|in}3complete'
"pointer to function type %0 may not be 'restrict' qualified"
'pointer to type %0 is invalid in OpenCL'
'pointer type mismatch%diff{ ($ and $)|}0,1'
'pointer-to-member function type %0 can only be called on an %select{rvalue|lvalue}1'
'pointer/integer type mismatch in conditional expression%diff{ ($ and $)|}0,1'
'poison on failure'
'poison undef temps'
'poison uninitialized stack variables'
'poison uninitialized stack variables with a call'
'poison uninitialized stack variables with the given pattern'
'poisoning existing macro'
'position arguments in format strings start counting at 1 (not 0)'
"position-independent code requires '-mabicalls'"
'positional arguments are not supported by ISO C'
'possible misuse of comma operator here'
'possible target for call'
'possible target of %select{indirect|asm}0 goto statement'
'postfix attributes are not allowed on Objective-C directives'
"postfix attributes are not allowed on Objective-C directives, place them in front of '%select{@interface|@protocol}0'"
'potential performance regression from use of __builtin_expect(): annotation was correct on %0 of profiled executions'
'pp-trace options'
'pragma %0 requires a parenthesized string'
'pragma %select{message|warning|error}0 requires parenthesized string'
'pragma STDC FENV_ROUND is not supported'
'pragma comment requires parenthesized identifier and optional string'
'pragma detect_mismatch is malformed; it requires two comma-separated string literals'
"pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'"
'pragma diagnostic expected option name (e.g. "-Wundef")'
'pragma diagnostic pop could not pop, no matching push'
"pragma float_control is malformed; use 'float_control({push|pop})' or 'float_control({precise|except}, {on|off} [,push])'"
"pragma include_alias expected '%0'"
'pragma include_alias expected include filename'
"pragma pop_macro could not pop '%0', no matching push_macro"
"preceding '...' declares a function parameter pack"
'preceding bit-field %0 declared here with type %1'
'precompiled'
"precompiled file '%0' was compiled for the %1 '%2' but the current translation unit is being compiled for target '%3'"
"precompiled file '%0' was not built as a module"
"precompiled file '%2' was compiled with module cache path '%0', but the path is currently '%1'"
"precompiled header '%0' was ignored because '%1' is not first '-include'"
"precompiled header '%0' was ignored because it is not a clang PCH file"
"precompiled header directory '%0' was ignored because it contains no clang PCH files"
'predefined allocator cannot have traits specified'
'predefined identifier is only valid inside function'
"predefined trait '%0' used here"
'predetermined as a firstprivate in a task construct here'
'prefer tail-folding, create scalar epilogue if tail folding fails.'
'prefer update form when ds form is also a update form'
'prefer_list item must be a string literal or constant integral expression'
'preferred type for bit-field %0 specified here'
"prefers tail-folding, don't attempt vectorization if tail-folding fails."
'prefix attribute must be followed by an interface, protocol, or implementation'
'prefix with the address-of operator to silence this warning'
'prepare update form when the load/store increment is a loop invariant non-const value.'
'preserve intermediate .o file'
'pretty-print DWARF debug information in object files and debug info archives.\n'
'previous %select{template type|non-type template|template template}0 parameter%select{| pack}1 declared here'
'previous %select{unmarked |}0overload of function is here'
"previous '#pragma pack' directive that modifies alignment is here"
"previous '%0' clause is here"
"previous '%0' directive used here"
"previous 'critical' region starts here"
'previous allocator is specified here'
'previous attribute is here'
'previous binding pack specified here'
'previous call is here%select{; set to nil to indicate it cannot be called afterwards|}0'
'previous case defined here'
'previous clause with directive name modifier specified here'
"previous command '%select{\\|@}0%1' (an alias of '\\%2') here"
"previous command '%select{\\|@}0%1' here"
'previous declaration is here'
'previous declaration of class template partial specialization %0 is here'
'previous declaration of variable template partial specialization is here'
'previous default generic association is here'
'previous default template argument defined here'
'previous default template argument defined in module %0'
'previous definition is here'
'previous documentation'
'previous equal key is here'
'previous explicit instantiation is here'
'previous expression is here'
'previous implicit declaration is here'
'previous inheritance model specified here'
'previous initialization %select{|with side effects }0is here%select{| (side effects will not occur at run time)}0'
'previous initialization for field %0 is here'
'previous module declaration is here'
'previous non-type template parameter with type %0 is here'
'previous reference is here'
'previous return statement is here'
'previous statement is here'
'previous template %select{declaration|template parameter}0 is here'
'previous template specialization is here'
'previous use is here'
'previous uuid specified here'
"previously declared '%0' here"
"previously declared '%1' here"
'previously declared as %0 here'
'previously defined as an alias for %0'
'previously defined here'
'previously marked as task_reduction with different reduction operation'
'previously referenced here'
'primary property declaration is implicitly strong while redeclaration in class extension is weak'
'print ORC unwind information for instructions'
'print aliases when printing objects'
'print all SDT markers'
'print all proposals received and whether they were rejected or accepted'
'print all registered sections'
'print clusters'
'print debug info when printing functions'
'print dyno stats after each stage'
'print everything - most verbose'
'print exception handling data'
'print execution info based on profile'
'print function after CFG is finalized'
'print function after disassembly'
'print function after edge counts are set for no-LBR profile'
'print function after fixing local branches'
'print function after instruction lowering'
'print function after jt-footprint-reduction pass'
'print functions after ADR Relaxation pass'
'print functions after CFG construction'
'print functions after CFG is normalized'
'print functions after ICF optimization'
'print functions after PLT optimization'
'print functions after attaching profile'
'print functions after bodyless optimization'
'print functions after clustering'
'print functions after code splitting'
'print functions after conditional tail call simplification'
'print functions after each stage'
'print functions after fix RISCV calls pass'
'print functions after fix relaxations pass'
'print functions after frame optimizer pass'
'print functions after indirect call promotion'
'print functions after inlining optimization'
'print functions after layout optimization'
'print functions after longjmp pass'
'print functions after peephole optimization'
'print functions after regreassign pass'
'print functions after retpoline insertion pass'
'print functions after simplification of RO data loads'
'print functions after stoke analysis'
'print functions after unreachable code elimination'
'print functions after veneer elimination pass'
'print functions of binary 2 that were not matched to any function in binary 1'
'print functions sorted by execution count'
'print functions sorted by order of dyno stats'
'print functions sorted by total branch count'
'print functions that could not be overwritten due to excessive size'
'print functions that have profile in binary 1 but do not in binary 2'
'print global symbols after disassembly'
'print heatmap to a given file'
'print jump tables'
'print loop related information'
'print mappings in the legend, between characters/blocks and text sections (default false)'
'print memory data annotations when printing functions'
'print names of functions with unknown control flow'
'print no details'
'print out instructions with default strict semantics i.e.,check that all the inputs are fully initialized, and mark the output as fully initialized. These semantics are applied to instructions that could not be handled explicitly nor heuristically.'
'print output address range for each basic block in the function whenBinaryFunction::print is called'
"print pass arguments to pass to 'opt'"
'print pass details when it is executed'
'print pass name before it is executed'
'print pass structure before run()'
'print per instruction opcode dyno stats and the functionnames:BB offsets of the nth highest execution counts'
'print profile quality/bias analysis'
'print pseudo probe info'
'print regions in detail with block_iterator'
'print regions in detail with element_iterator'
'print register usage details collected for analysis.'
'print relocations when printing functions/objects'
'print section contents after reordering'
'print statistics about basic block ordering'
'print the CFG of important functions that changed in binary 2'
'print the basic blocks showed in top differences'
'print the list of functions with stale profile'
'print the list of objects with count to stderr'
'print time spent constructing binary functions'
'print time spent in each optimization'
'print time spent in rewriting passes'
'print top <uint> functions with suboptimal code layout on input'
'printing of statistics for each inlined function'
'prints out offsets for abbrev and debug_info of Skeleton CUs that get patched.'
'prioritize low virtual register numbers for test and debug'
"private API notes file for module '%0' should be named '%0_private.apinotes', not '%1'"
'private field %0 is not used'
'private module fragment begins here'
'private module fragment declaration with no preceding module declaration'
'private module fragment in module implementation unit'
'private module fragment redefined'
"private submodule '%0' in private module map, expected top-level module"
'probability argument to __builtin_expect_with_probability is outside the range [0.0, 1.0]'
'probability argument to __builtin_expect_with_probability must be constant floating-point expression'
'process functions with stack pointer arithmetic'
'profile data may be incomplete: of %0 function%s0, %1 %plural{1:has|:have}1 no data'
'profile data may be out of date: of %0 function%s0, %1 %plural{1:has|:have}1 mismatched data that will be ignored'
'propagate shadow through ICmpEQ and ICmpNE'
'propagating dll attribute to %select{already instantiated|explicitly specialized}0 base class template without dll attribute is not supported'
'property %0 attempting to use instance variable %1 declared in super class %2'
'property %0 cannot be found in forward class object %1'
'property %0 declared with incompatible types in different translation units (%1 vs. %2)'
'property %0 found on object of type %1; did you mean to access it with the "." operator?'
'property %0 has a variably modified type'
"property %0 is a class property; did you mean to access it with class '%1'?"
'property %0 is already implemented'
'property %0 is declared %select{deprecated|unavailable|partial}1 here'
'property %0 is implemented with %select{@synthesize|@dynamic}1 here'
'property %0 is implemented with %select{@synthesize|@dynamic}1 in one translation but %select{@dynamic|@synthesize}1 in another translation unit'
'property %0 is synthesized to different ivars in different translation units (%1 vs. %2)'
'property %0 not found on object of type %1'
'property %0 not found on object of type %1; did you mean %2?'
'property %0 not found on object of type %1; did you mean to access instance variable %2?'
'property %0 not found on object of type %1; did you mean to access property %2?'
'property %0 refers to an incomplete Objective-C class %1 (with no @interface available)'
'property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category'
'property %0 requires method %1 to be defined - use @synthesize, @dynamic or provide a method implementation in this class implementation'
"property %select{of type %1|with attribute '%1'|without attribute '%1'|with getter %1|with setter %1}0 was selected for synthesis"
'property access is using %0 method which is deprecated'
'property access is using %0 method which is unavailable'
'property access result unused - getters should not be used for side effects'
'property attribute in class extension does not match the primary class'
"property attributes '%0' and '%1' are mutually exclusive"
'property cannot have array or function type %0'
'property declaration cannot have a default member initializer'
"property declaration specifies '%0' accessor twice"
'property declared as returning non-retained objects; getter returning retained objects'
'property declared here'
'property declared in category %0 cannot be implemented in class implementation'
'property does not specify a getter or a putter'
"property follows Cocoa naming convention for returning 'owned' objects"
'property has a previous declaration'
'property implementation in a category with no category declaration'
'property implementation must be in a class or category implementation'
'property implementation must have its declaration in interface %0 or one of its extensions'
'property implementation must have its declaration in the category %0'
'property is assumed atomic by default'
'property is assumed atomic when auto-synthesizing the property'
'property is synthesized to ivar %0 here'
'property name cannot be a bit-field'
'property requires fields to be named'
'property should be changed to be readwrite'
'property synthesized here'
'property type %0 is incompatible with type %1 inherited from %2'
"property with '%0' attribute must be of object type"
'protected %select{constructor|destructor}0 can only be used to %select{construct|destroy}0 a base class subobject'
'protocol %0 has no definition'
'protocol has circular dependency'
"protocol has no object type specified; defaults to qualified 'id'"
'protocol is declared here'
'protocol method is expected to return an instance of the implementing class, but is declared to return %0'
'protocol method is here'
'protocol qualifiers must precede type arguments'
"provided host compiler IR file '%0' is required to generate code for OpenMP target regions but cannot be found"
'pseudo-destructor call is not permitted in constant expressions until C++20'
'pseudo-destructor destroys object of type %0 with inconsistently-qualified type %1'
'pseudo-destructors on type void are a Microsoft extension'
"public framework header includes private framework header '%0'"
'pure virtual function %q0 called'
'put the semicolon on a separate line to silence this warning'
"putter for property must be specified as 'put', not 'set'"
'qualified call to %0::%1 is treated as a virtual call to %1 due to -fapple-kext'
'qualified destructor name only found in lexical scope; omit the qualifier to find this type name by unqualified lookup'
'qualified member access refers to a member in %0'
'qualified module name can only be used to define modules at the top level'
'qualified name refers into a specialization of %select{function|variable}0 template %1'
'qualified reference to %0 is a constructor name rather than a %select{template name|type}1 in this context'
"qualifier 'const' is needed for variables in address space '%0'"
'qualifier in explicit instantiation of %q0 requires a template-id (a typedef is not permitted)'
'qualifiers after comma in declarator list are ignored'
'qualify call to silence this warning'
'r11 available before calls and jumps'
'r11 available before calls but not before jumps'
'r11 not available'
"range-based 'for' statement uses ':', not '='"
'range-based for loop has empty body'
'range-based for loop initialization statements are a C++20 extension'
'range-based for loop initialization statements are incompatible with C++ standards before C++20'
'range-based for loop is a C++11 extension'
'range-based for loop is incompatible with C++98'
'range-based for loop requires type for loop variable'
'raw string delimiter longer than 16 characters; use PREFIX( )PREFIX to delimit raw string'
'raw string literals are incompatible with C++98'
'raw string missing terminating delimiter )%0"'
"re-exported libraries do not match: '%0' (provided) vs '%1' (found)"
"re-exported library missing from %0: '%1'"
're-use space in old .text if possible (relocation mode)'
'read of incomplete type %0 is not allowed in a constant expression'
'read of non-const variable %0 is not allowed in a constant expression'
'read of non-constexpr variable %0 is not allowed in a constant expression'
'read of variable %0 of non-integral, non-enumeration type %1 is not allowed in a constant expression'
"readonly IBOutlet property %0 when auto-synthesized may not work correctly with 'nib' loader"
'reassign registers so as to avoid using REX prefixes in hot code'
'received warning after diagnostic serialization teardown was underway: %0'
'receiver %0 for class message is a forward declaration'
'receiver %0 is a forward class and corresponding @interface may not exist'
'receiver expression is here'
'receiver is instance of class declared here'
"receiver is treated with 'id' type for purpose of method lookup"
'receiver type %0 for instance message is a forward declaration'
"receiver type %0 is not 'id' or interface pointer, consider casting it to 'id'"
'receiver type %0 is not an Objective-C class'
'record profile for inter-function control flow activity (default: true)'
'recursive evaluation of default argument'
'recursive template instantiation exceeded maximum depth of %0'
"redeclaration cannot add 'loader_uninitialized' attribute"
'redeclaration has different alignment requirement (%1 vs %0)'
"redeclaration of %0 must %select{not |}1have the 'overloadable' attribute"
'redeclaration of %0 with a different type%diff{: $ vs $|}1,2'
'redeclaration of %q0 cannot add %q1 attribute'
'redeclaration of %q0 should not add %q1 attribute'
"redeclaration of C++ built-in type 'bool'"
'redeclaration of already-defined enum %0 is a GNU extension'
'redeclaration of deduction guide'
'redeclaration of method parameter %0'
'redeclaration of type parameter %0'
'redeclaration of using declaration'
'redeclaration of using-enum declaration'
'redeclaring non-static %0 as static is a Microsoft extension'
'redefining builtin macro'
'redefinition of %0'
'redefinition of %0 as an alias for a different namespace'
'redefinition of %0 as different kind of symbol'
'redefinition of %0 will not be visible outside of this function'
'redefinition of %0 with a different type%diff{: $ vs $|}1,2'
'redefinition of %select{typedef|type alias}0 for variably-modified type %1'
"redefinition of a 'extern inline' function %0 is not supported in %select{C99 mode|C++}1"
'redefinition of concept %0 with different template parameters or requirements'
'redefinition of default argument'
'redefinition of enumerator %0'
'redefinition of forward class %0 of a typedef name of an object type is ignored'
'redefinition of inferred submodule'
'redefinition of label %0'
'redefinition of method parameter %0'
"redefinition of module '%0'"
'redefinition of parameter %0'
'redefinition of typedef %0 is a C11 feature'
'redefinition of user-defined mapper for type %0 with name %1'
'redefinition of user-defined reduction for type %0'
'redirect journaling to a file instead of stdout/stderr'
"reduction type cannot be %select{qualified with 'const', 'volatile' or 'restrict'|a function|a reference|an array}0 type"
'reduction variables may not be accessed in an explicit task'
"redundant #include of module '%0' appears within %1"
'redundant %0 availability change; only the last specified change will be used'
"redundant 'sycl_kernel_entry_point' attribute"
"redundant attribute subject matcher sub-rule '%0'; '%1' already matches those declarations"
'redundant move in return statement'
'redundant parentheses surrounding declarator'
"ref-qualifier '%select{&&|&}0' is not allowed on a constructor"
"ref-qualifier '%select{&&|&}0' is not allowed on a destructor"
"ref-qualifier '&&' is not allowed on a defaulted comparison operator"
'refactoring action cannot be initiated without a selection'
'reference %0 is not yet bound to a value when used here'
'reference %0 is not yet bound to a value when used within its own initialization'
'reference %diff{to %select{type|incomplete type}1 $ could not bind to an %select{rvalue|lvalue}2 of type $|could not bind to %select{rvalue|lvalue}2 of incompatible type}0,3'
'reference binding of non-type template parameter %diff{of type $ to template argument of type $|to template argument}0,1 ignores qualifiers'
'reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0'
'reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true'
'reference cannot be initialized with multiple values'
'reference cannot bind to bit-field in converted constant expression'
'reference dynamic_cast failed: %select{static type %1 of operand is a non-public base class of dynamic type %2|dynamic type %2 of operand does not have a base class of type %3|%3 is an ambiguous base class of dynamic type %2 of operand|%3 is a non-public base class of dynamic type %2 of operand}0'
'reference initialization of type %0 with initializer of type %1 is ambiguous'
'reference initialized from initializer list is incompatible with C++98'
'reference member of type %0 uninitialized'
'reference of type %0 cannot bind to a temporary object because of address space mismatch'
'reference qualifiers on functions are a C++11 extension'
'reference qualifiers on functions are incompatible with C++98'
'reference to %0 is ambiguous'
'reference to %select{__device__|__global__|__host__|__host__ __device__}0 %select{function|variable}1 %2 in %select{__device__|__global__|__host__|__host__ __device__}3 function'
'reference to %select{__device__|__global__|__host__|__host__ __device__}0 function %1 in global initializer'
'reference to %select{destructor|pseudo-destructor}0 must be called%select{|; did you mean to call it with no arguments?}1'
'reference to %select{overloaded|multiversioned}1 function could not be resolved; did you mean to call it%select{| with no arguments}0?'
"reference to a %select{bit-field|vector element|global register variable}0 in asm %select{input|output}1 with a memory constraint '%2'"
"reference to enumeration must use 'enum' not 'enum %select{struct|class}0'"
'reference to local %select{variable|binding}1 %0 declared in enclosing %select{%3|block literal|lambda expression|context}2'
"reference to marker '%0' is ambiguous"
'reference to non-static member function must be called%select{|; did you mean to call it with no arguments?}0'
'reference to type %0 cannot bind to an initializer list'
'reference to type %0 requires an initializer'
'reference to unresolved using declaration'
'referenced %0 is declared here'
'referenced member %0 is declared here'
"referring to 'main' within an expression is a Clang extension"
"region cannot be%select{| closely}0 nested inside '%1' region%select{|; perhaps you forget to enclose 'omp %3' directive into a parallel region?|; perhaps you forget to enclose 'omp %3' directive into a for or a parallel for region with 'ordered' clause?|; perhaps you forget to enclose 'omp %3' directive into a target region?|; perhaps you forget to enclose 'omp %3' directive into a teams region?|; perhaps you forget to enclose 'omp %3' directive into a for, simd, for simd, parallel for, or parallel for simd region?}2"
"register '%0' unsuitable for global register variables on this target"
'register number should be an integer'
'register pressure factor for the transformations.'
'register space cannot be specified on global constants'
'reimplementation of category %1 for class %0'
'reimplementation of class %0'
'reinterpret_cast cannot resolve overloaded function %0 to type %1'
'reinterpret_cast from %0 to %1 has undefined behavior'
'reinterpret_cast of a %0 to %1 needs its address, which is not allowed'
"releasing %0 '%1' that was not held"
"releasing %0 '%1' using %select{shared|exclusive}2 access, expected %select{shared|exclusive}3 access"
'remainder by zero in preprocessor expression'
'remaining %0 candidate%s0 omitted; pass -fshow-overloads=all to show them'
'remap file source paths <old> to <new> in coverage mapping. If there are multiple options, prefix replacement is applied in reverse order starting from the last one'
'remap file source paths in debug info, coverage mapping, predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.'
'remap file source paths in predefined preprocessor macros and __builtin_FILE(). Implies -ffile-reproducible.'
'remarks_a'
'remarks_b'
"remove '_Noreturn'"
"remove 'enum%select{| struct| class}0' to befriend an enum"
"remove 'u8' prefix to avoid a change of behavior; Clang encodes unprefixed narrow string literals as UTF-8"
'remove call to max function and unsigned zero argument'
'remove constant to silence this warning'
'remove double jumps when able'
'remove extraneous parentheses around the comparison to silence this warning'
'remove parentheses to declare a variable'
'remove parentheses to silence this warning'
'remove std::move call here'
"remove the %select{'%1' if its condition|condition if it}0 is always %select{false|true}2"
"remove the call to '%0' since unsigned values cannot be negative"
'remove the kernel-info pass at the end of the full LTO pipeline'
'remove useless conditional branches'
"rename '%0' to ensure it can be found by name"
'reorder and cluster functions (works only with relocations)'
'reorder data sections in place'
'reorder functions randomly'
'reorder three way branches'
'reorder unconditional jump instructions in loops optimization'
"repeated RISC-V 'interrupt' attribute"
"repeated RISC-V 'interrupt' attribute is here"
'repeated evaluation of the same literal expression can produce different objects'
"replace 'default' with 'delete'"
"replace expression with '%0' %select{|or use 'xor' instead of '^' }1to silence this warning"
'replace parentheses with an initializer to declare a variable'
"replacement function %0 cannot be declared 'inline'"
'report accesses through a pointer which has poisoned shadow'
'report stats in csv'
'report stats in text'
"requested 'init_priority' %0 is reserved for internal use"
'requested alignment %0 is not a positive power of two'
'requested alignment is dependent but declaration is not dependent'
'requested alignment is less than minimum alignment of %1 for type %0'
'requested alignment is not a power of 2'
'requested alignment must be %0 bytes or smaller'
'requested alignment must be %0 bytes or smaller; maximum alignment assumed'
'requested alignment must be %0 or greater'
'requested alignment must be %0 or less for type %1; %2 is invalid'
'requested alignment must be %0 or smaller'
'requested shift is a vector of type %0 but the first operand is not a vector (%1)'
'required alignment of type %0 (%1 bytes) is larger than the supported alignment of C++ exception objects on this target (%2 bytes)'
"required by %select{'require_constant_initialization' attribute|'constinit' specifier}0 here"
'requires clause differs in template redeclaration'
"requires expression in requirement body; did you intend to place it in a nested requirement? (add another 'requires' before the expression)"
"reserved locator 'omp_all_memory' cannot be specified more than once"
"reserved locator 'omp_all_memory' requires 'out' or 'inout' dependency types"
'resolve all otherwise unresolved externals to null'
'resource has implicit register binding'
'respect alignment requirements provided by input IR'
'restrict requires a pointer or reference'
'restrict requires a pointer or reference (%0 is invalid)'
"result argument to %select{overflow builtin|checked integer operation}0 must be a pointer to a non-const integer type %select{|other than plain 'char', 'bool', bit-precise, or an enumeration }0(%1 invalid)"
"result of '%0' is %1; did you mean '%2' (%3)?"
"result of '%0' is %1; did you mean '%2'?"
"result of '%0' is %1; did you mean exponentiation?"
'result of comparison %select{%3|%1}0 %2 %select{%1|%3}0 is always %4'
'result of comparison against %select{a string literal|@encode}0 is unspecified (use an explicit string comparison function instead)'
'result of comparison of %select{%3|char expression}0 %2 %select{char expression|%3}0 is always %4, since char is interpreted as unsigned'
'result of comparison of %select{%3|unsigned enum expression}0 %2 %select{unsigned enum expression|%3}0 is always %4'
'result of comparison of %select{%3|unsigned expression}0 %2 %select{unsigned expression|%3}0 is always %4'
'result of comparison of %select{%4|%1-bit %select{signed|unsigned}2 value}0 %3 %select{%1-bit %select{signed|unsigned}2 value|%4}0 is always %5'
'result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4'
"result of comparison of constant %0 with expression of type 'BOOL' is always %1, as the only well defined values for 'BOOL' are YES and NO"
"retain'ed block property does not copy the block - use copy attribute instead"
'return in the catch of a function try block of a constructor is illegal'
"return state set for an unconsumable type '%0'"
"return statement not allowed in coroutine; did you mean 'co_return'?"
"return type %0 of selected 'operator==' function for rewritten '%1' comparison is not 'bool'"
'return type cannot be qualified with address space'
'return type deduction is incompatible with C++ standards before C++14'
"return type for defaulted %select{<ERROR>|equality|three-way|equality|relational}0 comparison operator must be 'bool', not %1"
"return type of 'await_ready' is required to be contextually convertible to 'bool'"
"return type of 'await_suspend' is required to be 'void' or 'bool' (have %0)"
"return type of 'coroutine_handle<>::address should be 'void*' (have %0) in order to get capability with existing async C API"
"return type of 'main' is not 'int'"
"return type of defaulted 'operator<=>' cannot be deduced because return type %2 of three-way comparison for %select{|member|base class}0 %1 is not a standard comparison category type"
"return type of defaulted 'operator<=>' cannot be deduced because three-way comparison for %select{|member|base class}0 %1 has a deduced return type and is not yet defined"
'return type of out-of-line definition of %q0 differs from that in the declaration'
'return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 has different qualifiers than %2)'
'return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 is incomplete)'
'return type of virtual function %0 is not covariant with the return type of the function it overrides (%1 is not derived from %2)'
'return type of virtual function %0 is not covariant with the return type of the function it overrides (class type %1 does not have the same cv-qualification as or less cv-qualification than class type %2)'
'return type of virtual function %3 is not covariant with the return type of the function it overrides (ambiguous conversion from derived class %0 to base class %1:%2)'
"return value not in expected state; expected '%0', observed '%1'"
'return value of %0 is a large (%1 bytes) pass-by-value object; pass it by reference instead ?'
'returning %select{address of|reference to}0 local temporary object'
'returning address of label, which is local'
'returning block that lives on the local stack'
"returning pointer %1 requires holding %0 %select{'%2'|'%2' exclusively}3"
"returning pointer to variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3"
'returning reference to local temporary object'
"returning the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3"
"returning variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3"
"rewriter doesn't support user-specified control flow semantics for @try/@finally (code may not execute properly)"
'rewriting block literal declared in global scope is not implemented'
'rewriting sub-expression within a macro (may not be correct)'
'right hand operand to %0 has non-pointer-to-member type %1'
"right shifting a 'bool' implicitly converts it to 'int'"
'rocPrim path, required by the HIP Standard Parallel Algorithm Acceleration library, used to implicitly include the rocPrim library'
'rocThrust path, required by the HIP Standard Parallel Algorithm Acceleration library, used to implicitly include the rocThrust library'
'run retpoline insertion pass'
'run veneer elimination pass'
"runpath search paths do not match: '%0' (provided) vs '%1' (found)"
"runpath search paths missing from %0: '%1'"
'rvalue reference %diff{to type $ cannot bind to lvalue of type $|cannot bind to incompatible lvalue}0,1'
'rvalue reference type %0 is not allowed in exception specification'
'rvalue references are a C++11 extension'
'rvalue references are incompatible with C++98'
's'
'safe buffers debug: %0'
'safety buffer size'
'same map type modifier has been specified more than once'
'same motion modifier has been specified more than once'
'same pointer dereferenced in multiple different ways in map clause expressions'
'sampler initializer has invalid %0 bits'
'sampler type cannot be used with the __local and __global address space qualifiers'
'sampler_t initialization requires 32-bit integer, not %0'
'sampler_t variable required - got %0'
'sanstats Options'
'satisfaction of constraint %0 depends on itself'
'save recorded profile to a file'
'scalar initialized from empty initializer list is incompatible with C++98'
'scalar initializer cannot be empty'
'scalar operand type has greater rank than the type of the vector element. (%0 and %1)'
'scale argument must be 1, 2, 4, or 8'
'scale factor for the latch probability. Value should be greater than 1. Lower values are ignored'
'scale of asan shadow mapping'
'scale of memprof shadow mapping'
'scale to be applied while reporting dyno stats'
'scoped enumeration requires a name'
'scoped enumerations are a C++11 extension'
'scoped enumerations are incompatible with C++98'
'score expressions in the OpenMP context selector need to be constant; %0 is not and will be ignored'
"search path used: '%0'"
"second argument to 'va_arg' is of ARC ownership-qualified type %0"
"second argument to 'va_arg' is of abstract type %0"
"second argument to 'va_arg' is of array type %0; this va_arg has undefined behavior because arguments will never be compatible with array type"
"second argument to 'va_arg' is of incomplete type %0"
"second argument to 'va_arg' is of non-POD type %0"
"second argument to 'va_arg' is of promotable type %0; this va_arg has undefined behavior because arguments will be promoted to %1"
"second argument to 'va_start' is not the last non-variadic parameter"
'second argument to __builtin_alloca_with_align is supposed to be in bits'
'second argument to __builtin_annotation must be a non-wide string constant'
'second argument to __builtin_call_with_static_chain must be of pointer type'
"section argument to 'patchable_function_entry' attribute is not valid for this target: %0"
'section attribute is specified on redeclared variable'
'section length is evaluated to a negative value %0'
'section length is unspecified and cannot be inferred because subscripted value is %select{not an array|an array of unknown bound}0'
'section of pointer to function type %0'
'section of pointer to incomplete type %0'
'section stride is evaluated to a non-positive value %0'
'see attribute on parameter here'
'seed for randomization'
"selected '%select{begin|end}0' %select{function|template }1%2 with iterator type %3"
"selected 'operator<=>' for %select{|member|base class}0 %1 declared here"
'selector element is not a valid lvalue'
'selector element of type %0 cannot be a constant lvalue expression'
'selector element type %0 is not a valid object'
'semantic annotations must be present for all parameters of an entry function or patch constant function'
'semicolon before method body is ignored'
'semicolon terminating header import declaration cannot be produced by a macro'
'set format in which header info is emitted'
'set the flag that enables filtering header information'
'set the incremental array construction buffer size (default=32)'
'set verbosity level for diagnostic output'
'sets a boolean flag for every edge'
'setter and getter must both be synthesized, or both be user defined, or the property must be nonatomic'
'setter cannot be specified for a readonly property'
'setting the floating point evaluation method to `source` on a target without SSE is not supported'
'several methods with selector %0 of mismatched types are found for the @selector expression'
'share stubs across functions'
'shift count %0 >= width of type %1 (%2 bit%s2)'
'shift count >= width of type'
'shift count is negative'
'shifting a negative signed value is undefined'
'shorten instructions'
'show a graph.'
'show execution count of functions in binary 2 as a ratio of the total samples in binary 1 - make sure both profiles have equal collection time and sampling rate for this to make sense'
'show in text.'
'show profile density details'
'show section contents after fixups have been applied'
'signed bit-field %0 needs an extra bit to represent the largest positive enumerators of %1'
'signed bit-field %0 needs an extra bit to represent the largest positive enumerators of preferred type %1'
'signed left shift discards bits'
'signed shift result (%0) requires %1 bits to represent, but %2 only has %3 bits'
"signed shift result (%0) sets the sign bit of the shift expression's type (%1) and becomes negative"
"signedness of format specifier '%0' is incompatible with '%1'"
'signing a null pointer will yield a non-null pointer'
'silence by adding parentheses to mark code as explicitly dead'
'similar constraint expression here'
'similar constraint expressions not considered equivalent; constraint expressions cannot be considered equivalent unless they originate from the same concept'
"similar to '-lite-threshold-pct' but specify threshold using absolute function call count. I.e. limit processing to functions executed at least the specified number of times."
'simple ddg dot graph'
'simple-rename options'
'simplify conditional tail calls by removing unnecessary jumps'
'simplify loads from read-only sections by replacing the memory operand with the constant found in the corresponding section'
"single declaration is expected after 'declare %select{simd|variant}0' directive"
'single subscript expressions are not allowed for matrix values'
'size argument in %0 call appears to be size of the source; expected the size of the destination'
'size argument in %0 call is a comparison'
"size argument in 'strncat' call appears to be size of the source"
'size must be %select{1, 2, or 4|1, 2, 4, 12 or 16}0'
"size of '__builtin_bit_cast' source type %0 does not match destination type %1 (%2 vs %3 bytes)"
"size of array element of type %0 (%1 bytes) isn't a multiple of its alignment (%2 bytes)"
'size of array has non-integer type %0'
'size of feature field in .altinstructions'
"size of register '%0' does not match variable size"
'sizeof on array function parameter will return size of %0 instead of %1'
'sizeof on pointer operation will return size of %0 instead of %1'
'skip access specifiers'
'skip calling convention'
'skip member types'
'skip non-simple functions in reporting'
'skip perf and read data from a pre-aggregated file format'
'skip perf event collection by supplying a perf-script output in a textual format'
'skip processing of cold functions'
'skip return types'
'skip variable types'
"skipping '%0' because module declaration of '%1' lacks the 'framework' qualifier"
'skipping stray token'
'sort hot data by hot function usage and count'
'sort hot data by read counts'
'sort ordering'
'sort output by this field'
'sort stack allocations'
'sorted by all names'
'source file is not valid UTF-8'
'source manager location address space usage:'
'specialization of member %q0 does not specialize an instantiated member'
'specified %0 type tag requires a null pointer'
"specified the same parameter '%0' multiple times"
'specifies thread count for the multithreading for updating DWO debug info'
'specify a target CPU'
'specify a target triple'
'specify a tune CPU'
'specify path of the runtime hugify library'
'specify path of the runtime instrumentation library'
'specify that .altinstructions has padlen field'
'specify the target features'
"specifying 'uuid' as an ATL attribute is deprecated; use __declspec instead"
'specifying OpenMP directives with [[]] is an OpenMP 5.1 extension'
'specifying OpenMP directives with [[]] is incompatible with OpenMP standards before OpenMP 5.1'
'specifying an identifier within `#pragma pack` is not supported on this target'
"specifying both a name and alignment to 'pop' is undefined"
"specifying character '%0' with a universal character name is incompatible with C standards before C23"
"specifying character '%0' with a universal character name is incompatible with C++98"
"specifying vector types with the 'mode' attribute is deprecated; use the 'vector_size' attribute instead"
'speculative load hardening does not protect functions with asm goto'
'spirv.$TypedPointerType'
'split C++ exception handling code'
'split all basic blocks of each function into fragments such that each fragment contains exactly a single basic block'
'split each function into N fragments at a randomly chosen split points (ignoring any available profiling information)'
'split each function into a hot and cold fragment at a randomly chosen split point (ignoring any available profiling information)'
'split each function into a hot and cold fragment using profiling information'
'split each function into a hot, warm, and cold fragment using profiling information'
'split function only if its main size is reduced by more than given amount of bytes. Default value: 0, i.e. split iff the size is reduced. Note that on some architectures the size can increase after splitting.'
'split functions into fragments'
'split jump tables section into hot and cold based on function execution frequency'
'split-file Options'
"stack frame size (%0) exceeds limit (%1) in '%2'"
'stack nearly exhausted; compilation time may suffer, and crashes due to stack overflow are likely'
"standard library implementation of %0 is not supported; %select{member '%2' does not have expected form|member '%2' is missing|the type is not trivially copyable|the type does not have the expected form}1"
'standard library not linked and so no interrupt vector table or compiler runtime routines will be linked'
'star modifier used outside of function prototype'
"state of variable '%0' must match at the entry and exit of loop"
"statement after '#pragma omp dispatch' must be a direct call to a target function or an assignment to one"
"statement associated with OpenACC 'atomic%select{| %1}0' directive is invalid"
"statement attribute %0 has higher precedence than function attribute '%select{always_inline|flatten|noinline}1'"
'statement expression not allowed at file scope'
"statement in 'omp %0' directive must be enclosed into a section region"
'statement not allowed in %select{constexpr|consteval}1 %select{function|constructor}0'
'statement requires expression of integer type (%0 invalid)'
'statement requires expression of scalar type (%0 invalid)'
'static %0 runtime is not supported on darwin'
'static %select{function|variable}0 %1 is used in an inline function with external linkage'
'static and non-static member functions with the same parameter types cannot be overloaded'
'static assertion expression is not an integral constant expression'
"static assertion failed due to requirement '%0'%select{: %2|}1"
'static assertion failed%select{: %1|}0'
'static const volatile data member must be initialized out of line'
'static data member %0 already has an initializer'
'static data member %0 in union is a C++11 extension'
'static data member %0 in union is incompatible with C++98'
'static data member %0 not allowed in anonymous %select{struct|interface|union|class|enum}1'
'static data member %0 not allowed in local %select{struct|interface|union|class|enum}2 %1'
'static data member definition cannot specify a storage class'
'static data member of type %0 must be initialized out of line'
'static declaration of %0 follows non-static declaration'
'static lambdas are a C++23 extension'
'static lambdas are incompatible with C++ standards before C++23'
'static member %0 cannot be a bit-field'
'static members cannot be declared in an anonymous %select{struct|union}0'
'static variable %0 is suspiciously used within its own initialization'
'static_cast between pointer-to-function and pointer-to-object is a Microsoft extension'
'std::%0 must be a class template with a single type parameter'
"std::coroutine_handle isn't a class template"
"std::coroutine_handle must have a member named '%0'"
"std::coroutine_traits isn't a class template"
'std::nothrow must be a valid variable declaration'
'std::nothrow was not found; include <new> before defining a coroutine which uses get_return_object_on_allocation_failure()'
"step simple modifier is exclusive and cannot be use with 'val', 'uval' or 'ref' modifier"
'still within definition of %q0 here'
'stop processing once we have enough to compare two binaries'
'storage class specified for a member declaration'
'store PCHs in memory'
'store PCHs on disk'
'strategy used to partition blocks into fragments'
'stress rotate selection in aggressive ppc isel for bit permutations'
'strftime format attribute requires 3rd parameter to be 0'
'stride must be greater or equal to the number of rows'
'string is ill-formed as UTF-8 and will become a null %0 when boxed'
"string literal after 'operator' cannot have an encoding prefix"
'string literal after \'operator\' must be \'""\''
'string literal of length %0 exceeds maximum length %1 that %select{C90|ISO C99|C++}2 compilers are required to support'
'string literal operator templates are a GNU extension'
'string literal with user-defined suffix cannot be used here'
'string literals that exceed this length will use a hash value as their symbol name'
'string to set default kind values'
"strip 'repz' prefix from 'repz retq' sequence (on by default)"
'structured binding declaration in a condition is a C++2c extension'
'structured binding declaration in a condition is incompatible with C++ standards before C++2c'
'structured binding packs are a C++2c extension '
'structured binding packs are incompatible with C++ standards before C++2c'
'structurize SPIRV'
'style of printing regions'
'subcommand'
'subexpression not valid in a constant expression'
'submodule %0.%1 not declared in module map'
"submodule of top-level module '%0' implicitly imported here"
'subobject %select{of type |}0%1 is not initialized'
'subobject declared here'
'subscript of a pointer to void is a GNU extension'
'subscript of pointer to %select{incomplete|sizeless}0 type %1'
'subscript of pointer to function type %0'
'subscript of svbool_t is not allowed'
'subscript requires size of interface %0, which is not constant for this architecture and platform'
'subscripted value is not an array or pointer'
'subscripted value is not an array, pointer, or vector'
'substitution failure due to access control is incompatible with C++98'
'substitution into constraint expression resulted in a non-constant expression'
'subtracted pointers are not elements of the same array'
'subtraction of pointers to type %0 of zero size'
'subtraction of pointers to type %0 of zero size has undefined behavior'
'suffix with parentheses to turn this into a function call'
'suggest braces around initialization of subobject'
'sum of call durations'
"support for '/Yc' and '/Yu' with different filenames not implemented yet; flags ignored"
"support for '/Yc' with more than one source file not implemented yet; flag ignored"
'support for HLSL language version %0 is incomplete, recommend using %1 instead'
"support for linking stdlibs for microcontroller '%0' is not implemented"
"support for passing the data section address to the linker for microcontroller '%0' is not implemented"
'surrounding namespace with visibility attribute ends here'
'surrounding namespace with visibility attribute starts here'
'suspicious concatenation of string literals in an array initialization; did you mean to separate the elements with a comma?'
'switch condition has boolean value'
'switch condition has incomplete class type %0'
'switch condition type %0 requires explicit conversion to %1'
'switch statement has empty body'
"symbol exported in dynamic library, but marked hidden in declaration '%0'"
'symbol sort order'
'symbolize function ids from the input log'
'symbolize functions'
'synchronization scope argument to atomic operation is invalid'
'synthesized properties %0 and %1 both claim instance variable %2'
'synthesized properties %0 and %1 both claim setter %2 - use of this setter will cause unexpected behavior'
'synthesized property %0 must either be named the same as a compatible instance variable or must explicitly name an instance variable'
'synthesized property with variable size type %0 requires an existing instance variable'
'synthesized setter %0 for null_resettable property %1 does not handle nil'
'synthesizing __weak instance variable of type %0, which does not support weak references'
'system diff used by change reporters'
'system dot used by change reporters'
'tail blocks whose size (in bytes) exceeds the value are never duplicated'
'tail blocks with size (in bytes) not exceeding the value are always duplicated'
'tail call required by %0 attribute here'
'tail call requires that the return value, all parameters, and any temporaries created by the expression are trivially destructible'
'taking address of a capture is not allowed'
'taking address of function is not allowed'
'taking address of non-addressable standard library function'
'taking address of non-addressable standard library function is incompatible with C++20'
'taking address of packed member %0 of class or structure %q1 may result in an unaligned pointer value'
'taking the absolute value of %select{pointer|function|array}0 type %1 is suspicious'
'taking the absolute value of unsigned type %0 has no effect'
'taking the address of a destructor'
'taking the address of a temporary object of type %0'
'taking the max of %select{a value and unsigned zero|unsigned zero and a value}0 is always equal to the other value'
'target %select{constructor|destructor}0 is declared here'
"target '%0' does not support exception handling; 'catch' block is ignored"
"target '%0' does not support exception handling; 'throw' is assumed to be never reached"
"target '%0' is not a supported OpenMP host target"
"target '%0' is unsupported by -fsanitize-kcfi-arity"
'target construct with nested teams region contains statements outside of the teams construct'
"target does not support 'protected' visibility; using 'default'"
'target exception specification is not superset of source'
'target function %select{is a member of different class%diff{ (expected $ but has $)|}1,2|has different number of parameters (expected %1 but has %2)|has type mismatch at %ordinal3 parameter%diff{ (expected $ but has $)|}1,2|has different return type%diff{ ($ expected but has $)|}1,2}0'
'target function has calling convention %1 (expected %0)'
'target of using declaration'
'target of using declaration conflicts with declaration already in scope'
'target profile option (-T) is missing'
'target-attribute based function overloads are not supported by NVCC and will be treated as a function redeclaration:new declaration is %select{__device__|__global__|__host__|__host__ __device__}0 function, old declaration is %select{__device__|__global__|__host__|__host__ __device__}1 function'
'tbd'
'template %0 has no definition and no %select{|viable }1deduction guides for deduction of template arguments'
'template argument / label address difference / what did you expect?'
'template argument does not refer to a class or alias template, or template template parameter'
'template argument for non-type template parameter is treated as function type %0'
'template argument for non-type template parameter must be an expression'
'template argument for template template parameter must be a class template%select{| or type alias template}0'
'template argument for template type parameter must be a type'
"template argument for template type parameter must be a type; did you forget 'typename'?"
"template argument for template type parameter must be a type; omitted 'typename' is a Microsoft extension"
'template argument is the type of an unresolved overloaded function'
'template argument refers to function template %0, here'
'template argument uses local type %0'
'template argument uses unnamed type'
'template declaration from hidden source: %0'
'template is declared here'
'template name refers to non-type template %0'
'template non-type parameter has a different type %0 in template %select{|template parameter }1redeclaration'
'template non-type parameter has a different type %0 in template argument'
"template parameter '%0' is already documented"
"template parameter '%0' not found in the template declaration"
'template parameter declared here'
'template parameter default argument is inconsistent with previous definition'
'template parameter from hidden source: %0'
'template parameter has a different kind in template %select{|template parameter }0redeclaration'
'template parameter has a different kind in template argument'
'template parameter has different kinds in different translation units'
'template parameter is declared here'
'template parameter is used in default argument declared here'
'template parameter list also declared here'
"template parameter list for literal operator must be either 'char...' or 'typename T, T...'"
"template parameter list matching the non-templated nested type %0 should be empty ('template<>')"
'template parameter lists have a different number of parameters (%0 vs %1)'
'template parameter missing a default argument'
"template parameter of a function template with the 'sycl_kernel' attribute cannot be a non-type template parameter"
'template parameter pack cannot have a default argument'
'template parameter pack must be the last template parameter'
'template parameter redefines default argument'
'template specialization declaration cannot be a friend'
'template specialization or definition requires a template parameter list corresponding to the nested type %0'
"template specialization requires 'template<>'"
'template template argument %0 is more constrained than template template parameter %1'
'template template argument has different template parameters than its corresponding template template parameter'
'template template parameter must have its own template parameters'
"template template parameter requires 'class'%select{| or 'typename'}0 after the parameter list"
"template template parameter using 'typename' is a C++17 extension"
"template template parameter using 'typename' is incompatible with C++ standards before C++17"
'templates can only be declared in namespace or class scope'
'templates cannot be declared inside of a local class'
'templates must have C++ linkage'
'temporary bound to reference member of allocated object will be destroyed at the end of the full-expression'
'temporary created here'
'temporary of type %0 has %select{private|protected}1 destructor'
'tentative array definition assumed to have one element'
'tentative definition has type %0 that is never completed'
'tentative definition of variable with internal linkage has incomplete %select{non-array|array}0 type %1'
'tenths of percents of main entry frequency to use as a threshold when evaluating whether a basic block is cold (0 means it is only considered cold if the block has zero samples). Default: 0 '
"test module file extension '%0' has different version (%1.%2) than expected (%3.%4)"
'the #__include_macros directive is only for internal use by -imacros'
'the %0 sub-architecture does not support unaligned accesses'
'the %0 type cannot be used to declare a program scope variable'
'the %0 type cannot be used to declare a structure or union field'
'the %select{1st|2nd|3rd}1 template parameter of %0 needs to be %select{a type|an integer or enum value}2'
'the %select{function or variable|function}0 specified in an %select{alias|ifunc}1 must refer to its mangled name'
"the %select{message|string}0 object in %select{this static assertion|this asm operand}0 is missing %select{a 'size()' member function|a 'data()' member function|'data()' and 'size()' member functions}1"
"the '%0' unit is not supported with this instruction set"
"the '%select{&|*|->}0' operator is unsupported in HLSL"
"the '[[_Noreturn]]' attribute spelling is deprecated in C23; use '[[noreturn]]' instead"
"the 'copyprivate' clause must not be used with the 'nowait' clause"
"the 'static' modifier for the array size is not legal in new expressions"
"the ApplicationExtensionSafe flag does not match: '%0' (provided) vs '%1' (found)"
'the GNU address of label extension is not allowed in coroutines'
"the NotForDyldSharedCache flag does not match: '%0' (provided) vs '%1' (found)"
'the __block storage type is not permitted'
'the address of a declaration with unknown type can only be cast to a pointer type'
"the argument '%0' is not supported for option '%1'. Mapping to '%1%2'"
'the argument to vk::Literal must be a vk::integral_constant'
"the clang compiler does not support '%0'"
"the clang compiler does not support '%0' for C++ on Darwin/i386"
"the clang compiler does not support '%0', %1"
'the clang compiler does not support -pg option on %select{Darwin|versions of OS X 10.9 and later}0'
'the clustering algorithm to use'
"the combination of '%0' and '%1' is incompatible"
"the context %select{set|selector|property}0 '%1' was used already in the same 'omp declare variant' directive; %select{set|selector|property}0 ignored"
"the context property '%0' can be nested in the context selector '%1' which is nested in the context set '%2'; try 'match(%2={%1(%0)})'"
"the context property '%0' is not valid for the context selector '%1' and the context set '%2'; property ignored"
"the context selector '%0' can be nested in the context set '%1'; try 'match(%1={%0%select{|(property)}2})'"
"the context selector '%0' in context set '%1' requires a context property defined in parentheses; selector ignored"
"the context selector '%0' in the context set '%1' cannot have a score (%quoted2); score ignored"
"the context selector '%0' is not valid for the context set '%1'; selector ignored"
"the coroutine promise type %0 declares both 'return_value' and 'return_void'"
'the current #pragma pack alignment value is modified in the included file'
'the event_t type can only be used with __private address space qualifier'
'the experimental clang interpreter failed to evaluate an expression'
'the explicit object parameter cannot be a function parameter pack'
'the explicit object parameter cannot have a default argument'
"the expression 'co_await __promise.final_suspend()' is required to be non-throwing"
"the flag '%0' has been deprecated and will be ignored"
"the form '-fmodule-file=<BMI-path>' is deprecated for standard C++ named modules; consider to use '-fmodule-file=<module-name>=<BMI-path>' instead"
"the given MCU does not support hardware multiply, but '-mhwmult' is set to %0"
"the given MCU supports %0 hardware multiply, but '-mhwmult' is set to %1"
'the host cannot update a declare target variable that is not externally visible'
'the ignored %select{set|selector|property}0 spans until here'
'the ignored tokens spans until here'
'the implementation of header units is in an experimental phase'
"the implicit output of reduced BMI may be overrided by the output file specified by '--precompile'. please consider use '-fmodule-output=' to specify the output file for reduced BMI explicitly"
"the inscan reduction list item must appear as a list item in an 'inclusive' or 'exclusive' clause on an inner 'omp scan' directive"
"the last '/TC' or '/TP' option takes precedence over earlier instances"
"the library '%0=%1' is not supported, OpenMP will not be enabled"
"the list item must appear in 'reduction' clause with the 'inscan' modifier of the parent directive"
'the loop %select{initializer|condition}0 expression depends on the current loop control variable'
'the maximum number of instructions analyzed for may throw during attribute inference in inlined body'
'the mode to run'
'the name of the PDB file to write'
"the name of the construct must be specified in presence of 'hint' clause"
'the number of preprocessor source tokens (%0) exceeds this token limit (%1)'
'the object size sanitizer has no effect at -O0, but is explicitly enabled: %0'
"the option '-flto=thin' is a work in progress"
"the other acquisition of %0 '%1' is here"
'the parameter for an explicitly-defaulted %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}0 may not be volatile'
'the parameter for an explicitly-defaulted copy assignment operator must be an lvalue reference type'
'the parameter for an explicitly-defaulted move %select{constructor|assignment operator}0 may not be const'
'the parameter for this explicitly-defaulted copy %select{constructor|assignment operator}0 is const, but a member or base requires it to be non-const'
"the parameter of the 'ordered' clause must be greater than or equal to the parameter of the 'collapse' clause"
'the pointee of the 2nd argument must match the element type of the 1st argument (%0 != %1)'
'the pointer decremented by %0 refers before the beginning of the array'
'the pointer incremented by %0 refers past the end of the array (that has type %1)'
'the pointer incremented by %0 refers past the last possible element for an array in %1-bit address space containing %2-bit (%3-byte) elements (max possible %4 element%s5)'
"the previous context %select{set|selector|property}0 '%1' used here"
'the provided selection does not overlap with the AST nodes of interest'
'the referenced item is not found in any private clause on the same directive'
"the result of a delegate init call must be immediately returned or assigned to 'self'"
'the resulting value is always non-negative after implicit conversion'
"the second argument of '-fpatchable-function-entry' must be smaller than the first argument"
"the selected code is not a part of a function's / method's body"
'the selected expression cannot be extracted'
'the selected expression is too simple to extract'
'the semantics of this intrinsic changed with GCC version 4.4 - the newer semantics are provided here'
'the sign of a  flushed-to-zero number is preserved in the sign of 0'
'the specified comparator type does not provide a viable const call operator'
'the specified hash functor does not provide a viable const call operator'
"the statement for '#pragma omp %0' must be a compound statement"
"the statement for 'atomic capture' must be a compound statement of form '{v = x; x binop= expr;}', '{x binop= expr; v = x;}', '{v = x; x = x binop expr;}', '{v = x; x = expr binop x;}', '{x = x binop expr; v = x;}', '{x = expr binop x; v = x;}' or '{v = x; x = expr;}', '{v = x; x++;}', '{v = x; ++x;}', '{++x; v = x;}', '{x++; v = x;}', '{v = x; x--;}', '{v = x; --x;}', '{--x; v = x;}', '{x--; v = x;}' where x is an lvalue expression with scalar type"
"the statement for 'atomic capture' must be an expression statement of form 'v = ++x;', 'v = --x;', 'v = x++;', 'v = x--;', 'v = x binop= expr;', 'v = x = x binop expr' or 'v = x = expr binop x', where x and v are both lvalue expressions with scalar type"
"the statement for 'atomic compare capture' must be a compound statement of form '{v = x; cond-up-stmt}', ''{cond-up-stmt v = x;}', '{if(x == e) {x = d;} else {v = x;}}', '{r = x == e; if(r) {x = d;}}', or '{r = x == e; if(r) {x = d;} else {v = x;}}', where 'cond-update-stmt' can have one of the following forms: 'if(expr ordop x) {x = expr;}', 'if(x ordop expr) {x = expr;}', 'if(x == e) {x = d;}', or 'if(e == x) {x = d;}' where 'x', 'r', and 'v' are lvalue expressions with scalar type, 'expr', 'e', and 'd' are expressions with scalar type, and 'ordop' is one of '<' or '>'"
"the statement for 'atomic compare' must be a compound statement of form '{x = expr ordop x ? expr : x;}', '{x = x ordop expr? expr : x;}', '{x = x == e ? d : x;}', '{x = e == x ? d : x;}', or 'if(expr ordop x) {x = expr;}', 'if(x ordop expr) {x = expr;}', 'if(x == e) {x = d;}', 'if(e == x) {x = d;}' where 'x' is an lvalue expression with scalar type, 'expr', 'e', and 'd' are expressions with scalar type, and 'ordop' is one of '<' or '>'"
"the statement for 'atomic read' must be an expression statement of form 'v = x;', where v and x are both lvalue expressions with scalar type"
"the statement for 'atomic update' must be an expression statement of form '++x;', '--x;', 'x++;', 'x--;', 'x binop= expr;', 'x = x binop expr' or 'x = expr binop x', where x is an lvalue expression with scalar type"
"the statement for 'atomic write' must be an expression statement of form 'x = expr;', where x is a lvalue expression with scalar type"
"the statement for 'atomic' must be an expression statement of form '++x;', '--x;', 'x++;', 'x--;', 'x binop= expr;', 'x = x binop expr' or 'x = expr binop x', where x is an lvalue expression with scalar type"
"the target architecture '%0' is not supported by the target '%1'"
'the total number of preprocessor source tokens (%0) exceeds the token limit (%1)'
'the two-parameter std::span construction is unsafe as it can introduce mismatch between buffer size and the bound information'
'the type %0 is already explicitly ownership-qualified'
'the type %0 is not a pointer to a fast-enumerable object'
'the type of object expression %diff{($) does not match the type being destroyed ($)|does not match the type being destroyed}0,1 in pseudo-destructor expression'
'the type of the explicit object parameter of an explicitly-defaulted %select{copy|move}0 assignment operator should be reference to %1'
'the type of variable template specialization %0 declared with deduced type %1 depends on itself'
'the user condition in the OpenMP context selector needs to be constant; %0 is not'
"the value of 'simdlen' parameter must be less than or equal to the value of the 'safelen' parameter"
"the value of the size argument in 'strncat' is too large, might lead to a buffer overflow"
"the value of the size argument to 'strncat' is wrong"
'the vecreturn attribute can only be used on a POD (plain old data) class or structure (i.e. no virtual functions)'
'the vecreturn attribute can only be used on a class or structure with one member, which must be a vector'
"the warning option '-%0' is not supported"
'there is no external assembler that can be used on this platform'
'there is no symbol at the given location'
'this builtin is available only on AIX 7.2 and later operating systems'
'this builtin is only available on 32-bit targets'
'this builtin is only available on 64-bit targets'
'this builtin is only available on x86-64 and aarch64 targets'
"this builtin requires 'dsp r2' ASE, please use -mdspr2"
"this builtin requires 'dsp' ASE, please use -mdsp"
"this builtin requires 'msa' ASE, please use -mmsa"
'this builtin requires ABI -mabi=%0'
'this coroutine may be split into pieces; not every piece is guaranteed to be inlined'
"this declaration is not a prototype; add %select{'void'|parameter declarations}0 to make it %select{a prototype for a zero-parameter function|one}0"
'this expression will be parsed as explicit(bool) in C++20'
'this function cannot be a coroutine: %0 is an incomplete type'
'this function cannot be a coroutine: %0 is not a class'
"this function cannot be a coroutine: %q0 has no member named 'promise_type'"
'this function cannot be a coroutine: missing definition of specialization %0'
'this placement new expression is not supported in constant expressions %select{|before C++2c}0'
'this pragma cannot appear in %0 declaration'
'this style of line directive is a GNU extension'
'this target does not support pointer authentication'
'this type tag was not designed to be used with this function'
'this use of statement expressions is not supported in a constant expression'
'this value is too large for this fixed point type'
'this warning is no longer in use and will be removed in the next release'
'thread safety beta warning'
'thread safety verbose warning'
'thread warning in function %0'
'thread-local declaration of %0 follows non-thread-local declaration'
'thread-local declaration of %0 with %select{static|dynamic}1 initialization follows declaration with %select{dynamic|static}1 initialization'
'thread-local storage is not supported for the current target'
'thread-local variable has non-trivial ownership: type is %0'
'threadprivate variable with incomplete type %0'
"threadprivate variables are not allowed in '%0' clause"
'threadprivate variables cannot be used in target constructs'
'three-way comparison between pointer and zero'
'three-way comparison between vectors is not supported'
"three-way comparison cannot be synthesized because there is no viable function for %select{'=='|'<'}0 comparison"
'threshold (in percent) for selecting functions to process in lite mode. Higher threshold means fewer functions to process. E.g threshold of 90 means only top 10 percent of functions with profile will be processed.'
'tile arguments must refer to different tiles'
'time BOLT aggregator'
'time frame analysis steps'
'time icf steps'
"timed out waiting to acquire lock file for module '%0'"
'tls_model must be "global-dynamic", "local-dynamic", "initial-exec" or "local-exec"'
'to match this %0'
"to match this ']'"
"to match this '{'"
'token is not a valid binary operator in a preprocessor subexpression'
"token pasting of ',' and __VA_ARGS__ is a GNU extension"
'too %select{few|many}0 arguments in call to %1'
'too %select{few|many}0 initializers in list for type %1 (expected %2 but found %3)'
'too %select{few|many}0 parameters in the signature specified by the %1 attribute (expected %2; got %3)'
'too %select{many|few}0 type arguments for class %1 (have %2, expected %3)'
'too few %select{|||execution configuration }0%select{|non-object }2arguments to %select{function|block|method|kernel function}0 call, at least argument %1 must be specified'
'too few %select{|||execution configuration }0%select{|non-object }2arguments to %select{function|block|method|kernel function}0 call, single argument %1 was not specified'
'too few %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2'
'too few %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2; did you mean %4?'
'too few %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected at least %1, have %2'
'too few %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected at least %1, have %2; did you mean %4?'
'too few arguments provided to function-like macro invocation'
'too many %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2'
'too many %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected %1, have %2; did you mean %4?'
'too many %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected at most %1, have %2'
'too many %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected at most %1, have %2; did you mean %4?'
'too many %select{|||execution configuration }0%select{|non-object }3arguments to %select{function|block|method|kernel function}0 call, expected single argument %1, have %2 arguments'
'too many %select{|||execution configuration }0arguments to %select{function|block|method|kernel function}0 call, expected at most single %select{|non-object }3argument %1, have %2%select{|non-object}3 arguments'
'too many arguments provided to function-like macro invocation'
'too many braces around %select{scalar |}0initializer'
'too many errors emitted, stopping now'
'too many function parameters; subsequent parameters will be ignored'
"too many parameters (%0) for 'main': must be 0, 2, or 3"
'tool-template options'
'top-level comma expression in array subscript is deprecated in C++20 and unsupported in C++23'
'total number of threads cannot exceed %0'
'total token limit set here'
'toy compiler\n'
'trailing requires clause can only be used when declaring a function'
'trailing requires clause should be placed outside parentheses'
'trailing return type may not be nested within parentheses'
'trailing return type must appear before trailing requires clause'
'trailing return types are incompatible with C++98'
'translate addresses using BAT'
'translation unit contains multiple module declarations'
'translation unit is too large for Clang to process: ran out of source locations'
'transparent union definition must contain at least one field; transparent_union attribute ignored'
'transparent_union attribute can only be applied to a union definition; attribute ignored'
'trap on failure'
'treat the string as an argument to avoid this'
"treating #%select{include|import|include_next|__include_macros}0 as an import of module '%1'"
"treating '%0' input as '%1' when in C++ mode, this behavior is deprecated"
'treating Ctrl-Z as end-of-file is a Microsoft extension'
"treating Unicode character <U+%0> as an identifier character rather than as '%1' symbol"
'treating Unicode character as whitespace'
"trigraph converted to '%0' character"
'trigraph ends block comment'
'trigraph ignored'
'trust the input to be from a well-formed source'
"try 'match(%0={%1%2})'"
'try to preserve basic block alignment'
'trying to recursively use %0 as superclass of %1'
'turn on the stoke analysis'
'type %0 can only be used as a function parameter in OpenCL'
'type %0 cannot be decomposed'
'type %0 cannot be narrowed to %1 in initializer list'
'type %0 cannot be narrowed to %1 in initializer list in C++11'
"type %0 cannot be used prior to '::' because it has no members"
'type %0 decomposes into %3 %plural{1:element|:elements}2, but %select{%plural{0:no|:only %1}1|%1}4 %plural{1:name was|:names were}1 provided'
'type %0 does not provide a %select{subscript|call}1 operator'
'type %0 found by destructor name lookup'
'type %0 has %select{an attribute|a member with an attribute}1 which currently causes the types to be treated as though they are incompatible'
'type %0 has incompatible definitions%select{| in different translation units}1'
'type %0 has unexpected layout'
'type %0 in generic association compatible with previously specified type %1'
'type %0 in generic association is a variably modified type'
'type %0 in generic association not an object type'
"type %0 is already '__ptrauth'-qualified"
'type %0 is incomplete'
'type %0 is not a direct or virtual base of %1'
'type %0 is not trivially copyable and not guaranteed to be mapped correctly'
'type %0 of function parameter pack does not contain any unexpanded parameter packs'
'type %0 of non-type template parameter is not a structural type'
'type %0 requires %1 bytes of alignment and the default allocator only guarantees %2 bytes'
'type %2 of %select{explicit instantiation|explicit specialization|partial specialization|redeclaration}0 of %1 does not match expected type %3'
"type argument %0 cannot be qualified with '%1'"
'type argument %0 cannot explicitly specify nullability'
'type argument %0 does not satisfy the bound (%1) of type parameter %2'
'type argument %0 is neither an Objective-C object nor a block type'
"type argument %0 must be a pointer (requires a '*')"
'type argument of iboutletcollection attribute cannot be a builtin type'
'type arguments cannot be applied to already-specialized class type %0'
'type arguments cannot be applied to non-class type %0'
'type arguments cannot be applied to non-parameterized class %0'
'type aware %0 requires a matching type aware %select{|placement }1%2 to be declared in the same scope'
'type aware %0 will not be used for coroutine allocation'
'type aware allocators are a C++2c extension'
'type aware allocators are incompatible with C++ standards before C++2c'
'type bound %0 for type parameter %1 conflicts with %select{implicit|previous}2 bound %3%select{for type parameter %5|}4'
'type bound %0 for type parameter %1 is not an Objective-C pointer type'
"type bound %1 for type parameter %0 cannot be qualified with '%2'"
'type constraint differs in template redeclaration'
'type conversion function declared here'
'type declaration hidden'
'type definition in a constexpr %select{function|constructor}0 is a C++14 extension'
'type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14'
'type inference of a declaration other than a plain identifier with optional trailing attributes is a Clang extension'
'type is given name %0 for linkage purposes by this %select{typedef|alias}1 declaration'
'type is not C-compatible due to this %select{base class|default member initializer|lambda expression|friend declaration|member declaration}0'
'type name does not allow %select{<ERROR>|constexpr|consteval|constinit}0 specifier to be specified'
'type name does not allow function specifier to be specified'
'type name does not allow storage class to be specified'
'type name requires a specifier or qualifier'
'type nullability specifier %0 is a Clang extension'
'type of %ordinal0 parameter of local declaration does not match definition%diff{ ($ vs $)|}1,2'
'type of %ordinal0 parameter of member declaration does not match definition%diff{ ($ vs $)|}1,2'
'type of UTF-8 string literal will change from array of char to array of char8_t in C23'
'type of UTF-8 string literal will change from array of const char to array of const char8_t in C++20'
'type of machine mode does not match type of base type'
'type of machine mode does not support base vector types'
'type of property %0 (%1) does not match type of accessor %2 (%3)'
'type of property %0 (%1) does not match type of instance variable %2 (%3)'
'type of property %0 does not match type of accessor %1'
'type of property %0 in class extension does not match property type in primary class'
'type of setter must be void'
'type of specialized non-type template argument depends on a template parameter of the partial specialization'
'type of thread-local variable has non-trivial destruction'
"type operand %0 of 'typeid' cannot have '%1' qualifier"
'type parameter %0 bound %1 cannot explicitly specify nullability'
'type parameter %0 declared here'
"type specifier missing, defaults to 'int'"
"type specifier missing, defaults to 'int'; ISO C99 and later do not support implicit int"
'type trait requires %0%select{| or more}1 argument%select{|s}2; have %3 argument%s3'
'type was declared read-only here'
'type-id cannot have a name'
'type-less parameter names in function declaration'
'typedef declarator cannot be qualified'
'typedef member %0 cannot be a bit-field'
'typedef name must be an identifier'
'typedef requires a name'
'typeid applied to expression of polymorphic type %0 is not allowed in a constant expression in C++ standards before C++20'
'typeid will not work since RTTI data is disabled by %select{-fno-rtti-data|/GR-}0'
'typename is allowed for identifiers only'
'typename specifier refers to %select{class template|function template|variable template|alias template|template template parameter|template}0 member in %1; argument deduction not allowed here'
'typename specifier refers to %select{class template|function template|variable template|alias template|template template parameter|template}0; argument deduction not allowed here'
'typename specifier refers to a dependent using declaration for a value %0 in %1'
'typename specifier refers to a non-type template'
'typename specifier refers to non-type %0'
'typename specifier refers to non-type member %0 in %1'
'types cannot be declared in an anonymous %select{struct|union}0'
'types declared in an anonymous %select{struct|union}0 are a Microsoft extension'
'types may not be defined in a for range declaration'
"types with 'sycl_special_class' attribute must have one and only one '__init' method defined"
"umbrella directory '%0' not found"
"umbrella for module '%0' already covers this directory"
"umbrella header for module '%0' does not include header '%1'"
"unable to create target: '%0'"
'unable to execute command: %0'
"unable to find %0 directory, expected to be in '%1' found via %2"
"unable to find %select{'::operator new(size_t, nothrow_t)'|'::operator new(size_t, align_val_t, nothrow_t)'}1 for %0"
'unable to find a Visual Studio installation; try running Clang from a developer command prompt'
"unable to find module '%0'"
"unable to find plugin '%0'"
"unable to handle compilation, expected exactly one compiler job in '%0'"
'unable to interface with target machine'
'unable to load PCH file'
"unable to load basic block sections function list: '%0'"
"unable to load plugin '%0': '%1'"
'unable to make temporary file: %0'
"unable to merge a subprocess's serialized diagnostics"
'unable to open CC_LOG_DIAGNOSTICS file: %0 (using stderr)'
'unable to open CC_PRINT_HEADERS file: %0 (using stderr)'
'unable to open CC_PRINT_OPTIONS file: %0'
'unable to open file %0 for serializing diagnostics (%1)'
"unable to open output file '%0': '%1'"
"unable to open statistics output file '%0': '%1'"
'unable to overwrite file %0: %1'
'unable to protect inline asm that clobbers stack pointer against stack clash'
"unable to read PCH file %0: '%1'"
'unable to remove file: %0'
"unable to rename temporary '%0' to output file '%1': '%2'"
'unable to resolve declare reduction construct for type %0'
'unable to set working directory: %0'
'unannotated fall-through between switch labels'
'unannotated fall-through between switch labels in partly-annotated function'
"unary fold expression has empty expansion for operator '%0' with no fallback value"
'unary operator not supported, only increment and decrement operations permitted'
'undeclared identifier %0 in destructor name'
'undeclared selector %0'
'undeclared selector %0; did you mean %1?'
"undeclared variable %0 used as an argument for '#pragma unused'"
'undef all system defines'
'undefining builtin macro'
'under -fcoro-aligned-allocation, the non-aligned allocation function for the promise type %0 has higher precedence than the global aligned allocation function'
'underaligned exception object thrown'
"unelaborated friend declaration is a C++11 extension; specify '%select{struct|interface|union|class|enum}0' to befriend %1"
'unexpected %0 in function call; perhaps remove the %0?'
"unexpected %0, expected to see one of %select{|'best_case', 'full_generality', }1'single_inheritance', 'multiple_inheritance', or 'virtual_inheritance'"
"unexpected '#pragma acc ...' in program"
"unexpected '#pragma omp ...' in program"
"unexpected '%0' clause, '%1' is specified already"
"unexpected '%0' clause, only %select{'device_type'|'enter' or 'link'|'enter', 'link' or 'device_type'|'device_type', 'indirect'|'enter', 'link', 'device_type' or 'indirect'}1 clauses expected"
"unexpected '%0' clause, only %select{'device_type'|'to' or 'link'|'to', 'link' or 'device_type'|'device_type', 'indirect'|'to', 'link', 'device_type' or 'indirect'}1 clauses expected"
"unexpected '(', only 'to', 'link' or 'device_type' clauses expected for 'begin declare target' directive"
"unexpected ':' in nested name specifier; did you mean '::'?"
"unexpected ';' before %0"
"unexpected '@' in member specification"
"unexpected '@' in program"
"unexpected 'enter' clause, use 'to' instead"
"unexpected 'execution' modifier in non-executable context"
"unexpected 'to' clause, use 'enter' instead"
"unexpected OpenACC directive %select{|'#pragma acc %1'}0"
"unexpected OpenMP clause '%0' in directive '#pragma omp %1'"
"unexpected OpenMP directive %select{|'#pragma omp %1'}0"
"unexpected argument '%0' to '#pragma %1'%select{|; expected %3}2"
"unexpected argument '%0' to '#pragma clang attribute'; expected 'push' or 'pop'"
"unexpected argument '%0' to '#pragma clang fp %1'; expected %select{'fast' or 'on' or 'off'|'on' or 'off'|'on' or 'off'|'ignore', 'maytrap' or 'strict'|'source', 'double' or 'extended'}2"
"unexpected argument '%0' to '#pragma clang optimize'; expected 'on' or 'off'"
'unexpected argument to debug command'
'unexpected character <U+%0>'
"unexpected clause after an implicit 'enter' clause"
"unexpected clause after an implicit 'to' clause"
"unexpected debug command '%0'"
'unexpected end of default argument expression'
'unexpected end of exception specification'
'unexpected expression: number of expressions is larger than the number of associated loops'
"unexpected extra argument '%0' to '#pragma clang optimize'"
'unexpected extra tokens at end of @import declaration'
'unexpected interface name %0: expected expression'
'unexpected namespace name %0: expected expression'
'unexpected namespace scope prior to decltype'
"unexpected operation specified in 'append_args' clause, expected 'interop'"
"unexpected output symbol graph '%1'; please provide '--symbol-graph-dir=<directory>' instead"
"unexpected parameter '%0' in availability attribute, not permitted in %select{HLSL|C/C++}1"
'unexpected token after Objective-C string'
'unexpected token in pragma diagnostic'
'unexpected type name %0: expected expression'
'unexpected type name %0: expected identifier'
"unexpected value; use 'true' or 'false'"
'unguarded header; consider using #ifdef guards or #pragma once'
'unicode literals are incompatible with C standards before C23'
'unicode literals are incompatible with C++ standards before C++17'
'unicode literals are incompatible with C++98'
'unicode literals are incompatible with C99'
'unimplemented constexpr lambda feature: %0 (coming soon!)'
'unimplemented pure virtual method %0 in %1'
'uninitialized reference member is here'
'uninitialized variable in a constexpr %select{function|constructor}0 is a C++20 extension'
'uninitialized variable in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20'
'union member %0 has reference type %1'
'union member %0 has reference type %1, which is a Microsoft extension'
'unions cannot be base classes'
'unions cannot have base classes'
'unions cannot have virtual functions'
'universal character name referring to a control character is incompatible with C standards before C23'
'universal character name referring to a control character is incompatible with C++98'
'universal character name refers to a control character'
'universal character name refers to a surrogate character'
'universal character names are only valid in C99 or C++'
"universal character names are only valid in C99 or C++; treating as '\\' followed by identifier"
"unknown %0 warning specifier: '%1'"
'unknown %select{type|class}1 name %0; did you mean %2?'
"unknown %select{warning|remark}0 option '%1'%select{|; did you mean '%3'?}2"
"unknown '-mindirect-jump=' option '%0'"
"unknown FP unit '%0'"
'unknown HLSL semantic %0'
"unknown action '%1' for '#pragma %0' - ignored"
"unknown action for '#pragma %0' - ignored"
"unknown analyzer-config '%0'"
"unknown argument '%0'; did you mean '%1'?"
"unknown argument ignored in clang-cl '%0'; did you mean '%1'?"
"unknown argument ignored in clang-cl: '%0'"
"unknown argument: '%0'"
"unknown assumption string '%0' may be misspelled; attribute is potentially ignored, did you mean '%1'?"
"unknown assumption string '%0'; attribute is potentially ignored"
'unknown attribute %0 ignored'
"unknown attribute %0 ignored; did you mean '%1'?"
"unknown attribute '%0'"
"unknown attribute subject rule '%0'"
'unknown cast annotation __bridge_retain; did you mean __bridge_retained?'
'unknown command tag name'
"unknown command tag name '%0'; did you mean '%1'?"
'unknown diagnostic option'
'unknown environment %0 in availability macro'
"unknown escape sequence '\\%0'"
'unknown kind of pragma comment'
'unknown linkage language'
"unknown module '%0'"
"unknown or ill-formed Objective-C runtime '%0'"
'unknown platform %0 in availability macro'
'unknown platform, assuming -mfloat-abi=%0'
'unknown pragma ignored'
'unknown pragma in STDC namespace'
'unknown property attribute %0'
'unknown receiver %0; did you mean %1?'
"unknown register name '%0' in asm"
"unknown remark serializer format: '%0'"
"unknown sanitizer '%0' ignored"
"unknown state '%0'"
'unknown symbolic operand name in inline assembly string'
"unknown target ABI '%0'"
"unknown target CPU '%0'"
"unknown target triple '%0'"
'unknown template name %0'
'unknown type name %0'
'unknown type name %0; did you mean %1?'
'unknown visibility %0'
"unknown warning group '%0'"
"unknown warning group '%0', ignored"
"unknown%select{ | embed}0 preprocessor parameter '%1'"
'unmatched type aware %0 declared here'
'unnamed enumeration must be a definition'
'unnamed type as template argument is incompatible with C++98'
'unnamed type used in template argument was declared here'
'unnamed variable cannot be implicitly captured in a lambda expression'
'unparsed tokens following type'
'unqualified base initializer of class templates is a Microsoft extension'
"unqualified call to '%0'"
'unqualified friend declaration referring to type outside of the nearest enclosing namespace is a Microsoft extension; add a nested name specifier'
'unreachable declaration of template entity is here'
"unrecognized parameter passing direction, valid directions are '[in]', '[out]' and '[in,out]'"
'unrecognized platform name %0'
'unsequenced modification and access to %0'
'unsupported %0 gpu architecture: %1'
"unsupported '%0' value '%1'; use 'ios-macabi' instead"
'unsupported CUDA gpu architecture: %0'
'unsupported MC/DC boolean expression; contains an operation with a nested boolean expression. Expression will not be covered'
'unsupported MC/DC boolean expression; number of conditions (%0) exceeds max (%1). Expression will not be covered'
'unsupported MC/DC boolean expression; number of test vectors (%0) exceeds max (%1). Expression will not be covered'
'unsupported OpenACC extension clause %0'
'unsupported OpenCL extension %0 - ignoring'
"unsupported architecture '%0' for MS-style inline assembly"
"unsupported architecture '%0' for host compilation"
"unsupported argument '%1' to option '%0'"
"unsupported argument '%1' to option '%0' for target '%2'"
"unsupported branch protection specification '%0'"
'unsupported combination: -header-include-format=%0 and -header-include-filtering=%1'
'unsupported combination: CC_PRINT_HEADERS_FORMAT=%0 and CC_PRINT_HEADERS_FILTERING=%1'
'unsupported expression with unknown type'
'unsupported inline asm: input with type %diff{$ matching output with type $|}0,1'
'unsupported non-standard concatenation of string literals'
"unsupported option '%0'"
"unsupported option '%0' for language mode '%1'"
"unsupported option '%0' for target '%1'"
"unsupported option '%0'; did you mean '%1'?"
"unsupported runtime library '%0' for platform '%1'"
'unsupported signature for %q0'
"unsupported standard library implementation: 'std::%0' is not a class template"
'unsupported type for named register variable'
"unsupported unwind library '%0' for platform '%1'"
'unsupported vector cast from %0 to %1 in a constant expression'
'unsupported: anonymous type given name for linkage purposes by %select{typedef|alias}0 declaration after its linkage was computed; add a tag name here to establish linkage prior to definition'
"unterminated '#pragma clang attribute push' at end of file"
"unterminated '#pragma pack (push, ...)' at end of file"
'unterminated /* comment'
'unterminated conditional directive'
'unterminated function-like macro invocation'
'unterminated symbolic operand name in inline assembly string'
'unused %select{function|variable}0 template %1'
'unused %select{typedef|type alias}0 %1'
"unused attribute %0 in '#pragma clang attribute push' region"
'unused exception parameter %0'
'unused function %0'
'unused label %0'
'unused member function %0'
'unused parameter %0'
'unused variable %0'
'unwind clobber cannot be used with asm goto'
'update DWARF debug sections of the executable'
'update address2ProbesMap with output block address'
'use %select{__bridge_retained|CFBridgingRetain call}1 to make an ARC object available as a +1 %0'
'use %select{__bridge_transfer|CFBridgingRelease call}1 to transfer ownership of a +1 %0 into ARC'
'use %select{an alias declaration|a typedef declaration|a reference|a const variable|a constexpr variable}0 instead'
"use '!=' to turn this compound assignment into an inequality comparison"
"use '%0' for a bitwise operation"
"use '%0' instead"
"use '%0'%select{| or '%3'|, '%3', or '%4'|, '%3', '%4', or '%5'}2 for '%1' standard"
"use '--' to treat subsequent arguments as filenames"
"use '=' to turn this equality comparison into an assignment"
"use '==' to turn this assignment into an equality comparison"
"use 'framework module' to declare module '%0'"
"use 'isEqual:' instead"
"use 'static' to give inline function %0 internal linkage"
"use 'static_cast' to adjust the pointer correctly while %select{upcasting|downcasting}0"
"use 'template' keyword to treat '%0' as a dependent template name"
"use 'thread_local' to allow this"
"use '|=' to turn this inequality comparison into an or-assignment"
'use -analyzer-disable-all-checks to disable all static analyzer checkers'
'use -fbracket-depth=N to increase maximum nesting level'
"use -foperator-arrow-depth=N to increase 'operator->' limit"
'use -ftemplate-depth=N to increase recursive template instantiation depth'
'use /Tc or /Tp to set input type for standard input'
'use DBSCAN/OPTICS algorithm'
'use DFS order for YAML profile'
'use DFS ordering when using -icf option'
'use GNU_STACK program header for new segment (workaround for issues with strip/objcopy)'
'use Machine Branch Probability Info'
'use Pettis-Hansen algorithm'
'use __attribute__((visibility("hidden"))) attribute instead'
'use __bridge to convert directly (no change in ownership)'
'use __bridge with C-style cast to convert directly (no change in ownership)'
'use __bridge_retained with C-style cast to make an ARC object available as a +1 %0'
'use __bridge_transfer with C-style cast to transfer ownership of a +1 %0 into ARC'
"use a custom address at which new code will be put, bypassing BOLT's logic to detect where to put code"
"use a function's hot size when doing clustering"
'use a lock file so only one process in the system can run this pass at once. useful to avoid mangled debug output in multithreaded environments.'
'use a modified clustering algorithm geared towards minimizing branches'
'use absolute jump tables on ppc'
'use aggressive ppc isel for bit permutations'
'use array indexing to silence this warning'
'use ascending or descending order when printing functions ordered by dyno stats'
'use branch prediction data to control sctc'
'use cache-directed sort'
'use constraint modifier "%0"'
'use declarations are only allowed in top-level modules'
'use edge count data when doing clustering'
'use fast runtime behavior'
"use function '%0' instead"
'use function order specified by -function-order'
'use hfsort algorithm'
'use hot/cold data on basic blocks to determine hot sizes for call graph functions'
'use instrumentation with slow path for all accesses'
'use misprediction frequency for determining whether or not ICP should be applied at a callsite.  The -indirect-call-promotion-mispredict-threshold value will be used by this heuristic'
'use non-reference type %0'
'use non-reference type %0 to make construction explicit or type %1 to prevent copying'
'use nullability type specifier %0 to affect the innermost pointer type of %1'
'use of %0 with tag type that does not match previous declaration'
'use of %select{class template|function template|variable template|alias template|template template parameter|concept|template}0 %1 requires template arguments'
'use of %select{infinity|NaN}0%select{| via a macro}1 is undefined behavior due to the currently enabled floating-point options'
'use of %select{type|declaration}0 %1 requires %2 support'
"use of '@import' in framework header is discouraged, including this header requires -fmodules"
"use of '@import' when modules are disabled"
"use of '__int128' with '__vector bool' requires VSX support enabled (on POWER10 or later)"
"use of '__int128' with '__vector' requires extended Altivec support (available on POWER8 or later)"
"use of '__super' inside a lambda is unsupported"
"use of 'double' with '__vector' requires VSX support to be enabled (available on POWER7 or later)"
"use of 'long long' with '__vector' requires VSX support (available on POWER7 or later) to be enabled"
"use of 'long' with '__vector' is deprecated"
"use of 'operator->' on type %0 would invoke a sequence of more than %1 'operator->' calls"
"use of 'static_assert' without inclusion of <assert.h> is a Microsoft extension"
"use of 'template' keyword outside of a template is incompatible with C++98"
'use of @defs is not supported on this architecture and platform'
'use of C-style parameters in Objective-C method declarations is deprecated'
"use of GNU 'missing =' extension in designator"
'use of GNU ?: conditional expression extension, omitting middle operand'
'use of GNU address-of-label extension'
'use of GNU array range extension'
'use of GNU indirect-goto extension'
'use of GNU old-style field designator extension'
'use of GNU statement expression extension'
'use of GNU statement expression extension from macro expansion'
'use of NULL in arithmetic operation'
'use of Objective-C property in function nested in Objective-C container not supported, move function outside its container'
'use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated'
"use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is a C++23 extension"
"use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is a C23 extension"
"use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is incompatible with C standards before C23"
"use of a '#%select{<BUG IF SEEN>|elifdef|elifndef}0' directive is incompatible with C++ standards before C++23"
'use of address-of-label extension outside of a function body'
'use of an empty initializer is a C23 extension'
'use of an empty initializer is incompatible with C standards before C23'
"use of bitwise '%0' with boolean operands"
'use of default argument to function %0 that is declared later in class %1'
'use of dynamic_cast requires -frtti'
'use of empty enum'
'use of enumeration in a nested name specifier is a C++11 extension'
'use of function %0 is discouraged; there is no way to check for failure but failure may still occur, resulting in a possibly exploitable security vulnerability'
'use of function template name with no prior declaration in function call with explicit template arguments is a C++20 extension'
'use of function template name with no prior declaration in function call with explicit template arguments is incompatible with C++ standards before C++20'
"use of incomplete type %0 in a '_Generic' association is incompatible with C standards before C2y"
"use of logical '%0' with constant operand"
'use of member %0 before its declaration is a Microsoft extension'
'use of member %0 found via unqualified lookup into dependent bases of class templates is a Microsoft extension'
'use of multiple declarators in a single using declaration is a C++17 extension'
'use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17'
"use of non-standard escape character '\\%0'"
'use of non-static data member %0 in an unevaluated context is incompatible with C++98'
'use of null pointer as non-type template argument is incompatible with C++98'
'use of old-style cast'
'use of out-of-scope declaration of %0%select{| whose type is not compatible with that of an implicit declaration}1'
"use of overloaded operator '%0' is ambiguous (operand type %1)"
"use of overloaded operator '%0' is ambiguous (with operand types %1 and %2)"
'use of placement new requires explicit declaration'
"use of private header from outside its module: '%0'"
'use of reference outside its lifetime is not allowed in a constant expression'
'use of result of assignment to object of volatile-qualified type %0 is deprecated'
"use of right-shift operator ('>>') in template argument will require parentheses in C++11"
'use of the %0 attribute is a C++14 extension'
'use of the %0 attribute is a C++17 extension'
'use of the %0 attribute is a C++20 extension'
'use of the %0 attribute is a C++23 extension'
'use of this expression in an %0 attribute requires parentheses'
'use of this statement in a constexpr %select{function|constructor}0 is a C++14 extension'
'use of this statement in a constexpr %select{function|constructor}0 is a C++20 extension'
'use of this statement in a constexpr %select{function|constructor}0 is a C++23 extension'
'use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14'
'use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++20'
'use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++23'
'use of typeid requires -frtti'
'use of unary operator that may be intended as compound assignment (%0=)'
'use of undeclared %0'
'use of undeclared %0; did you mean %1?'
'use of undeclared identifier %0'
'use of undeclared identifier %0; did you mean %1?'
'use of undeclared identifier %0; unqualified lookup into dependent bases of class template %1 is a Microsoft extension'
'use of undeclared label %0'
"use of undefined marker '%0'"
'use of unknown builtin %0'
'use old code sequence for promoted calls'
'use perf data directly when constructing the call graph for stale functions'
'use precise runtime behavior'
'use reference type %0 to prevent copying'
'use register liveness analysis to try to find more opportunities for -reg-reassign optimization'
'use regular size pages for code alignment'
'use relaxed runtime behavior'
'use relocations in the binary (default=autodetect)'
'use same count for BBs that should have equivalent count (used in non-LBR and shrink wrapping)'
"use same version number separators '_' or '.'; as in 'major[.minor[.subminor]]'"
'use short granules in allocas and outlined checks'
'use strict dwarf'
'use stricter verifier for FIR operations with volatile types'
'use stricter verifier for HLFIR intrinsic operations'
"use the GNU '__attribute__' syntax"
'used here'
'used in initialization here'
'used type %0 where __hlsl_resource_t is required'
'used type %0 where arithmetic or pointer type is required'
'used type %0 where floating point type is not allowed'
'used type %0 where integer is required'
'used type %0 where integer or floating point type is required'
'used%select{| in pointer arithmetic| in buffer access}0 here'
"user-defined literal suffixes %select{<ERROR>|not starting with '_'|containing '__'}0 are reserved%select{; no literal will invoke this operator|}1"
'using'
'using %0 directive in %select{NSString|CFString}1 which is being passed as a formatting argument to the formatting %select{method|CFfunction}2'
'using %0 with a literal is redundant'
'using %select{integer|floating point|complex}1 absolute value function %0 when argument is of %select{integer|floating point|complex}2 type'
"using '%%P' format specifier with an Objective-C pointer results in dumping runtime object structure, not object value"
"using '%%P' format specifier without precision"
"using '%0' format specifier annotation outside of os_log()/os_trace()"
"using '%0' format specifier, but argument has boolean value"
"using declaration annotated with 'using_if_exists' here"
'using declaration cannot refer to a constructor'
'using declaration cannot refer to a destructor'
'using declaration cannot refer to a namespace'
'using declaration cannot refer to a template specialization'
'using declaration cannot refer to class member'
'using declaration in class refers into %0, which is not a class'
'using declaration naming a scoped enumerator is a C++20 extension'
'using declaration naming a scoped enumerator is incompatible with C++ standards before C++20'
'using declaration pack expansion at block scope produces multiple values'
'using declaration referring to %1 with %select{internal|module|unknown}0 linkage cannot be exported'
"using declaration referring to inaccessible member '%0' (which refers to accessible member '%1') is a Microsoft compatibility extension"
'using declaration refers into %0, which is not a base class of %1'
'using declaration refers to its own class'
'using declaration requires a qualified name'
"using directive refers to implicitly-defined namespace 'std'"
'using enum %select{requires an enum or typedef name|does not permit an elaborated enum specifier}0'
'using enum declaration is a C++20 extension'
'using enum declaration is incompatible with C++ standards before C++20'
"using length modifier '%0' with conversion specifier '%1' is not supported by ISO C"
'using namespace directive in global context in header'
"using sysroot for '%0' but targeting '%1'"
'using the result of an assignment as a condition without parentheses'
'using the undeclared type %0 as a default template argument is a Microsoft extension'
'using unversioned Android target directory %0 for target %1; unversioned directories will not be used in Clang 19 -- provide a versioned directory for the target version or lower instead'
'using-enum cannot name a dependent type'
'usual LSP protocol'
'uuid attribute contains a malformed GUID'
'uuid does not match previous declaration'
'valid %0 clauses start with %1; %select{token|tokens}2 will be ignored'
'valid target CPU values are: %0'
'value %0 is outside the range of representable values of type %1'
'value %1 cannot be represented in type %0'
"value '%0' out of range for constraint '%1'"
'value is not an integer: %0'
'value of #pragma pack(show) == %0'
'value of the aligned pointer (%0) is not a multiple of the asserted %1 %plural{1:byte|:bytes}1'
"value of type %0 is not contextually convertible to 'bool'"
'value of type %0 is not implicitly convertible to %1'
"value returned by '__builtin_counted_by_ref' cannot be %select{assigned to a variable|passed into a function|returned from a function}0"
"value returned by '__builtin_counted_by_ref' cannot be used in %select{an array subscript|a binary}0 expression"
'value size does not match register size specified by the constraint and modifier'
'varargs not allowed in requires expression'
"variable %0 cannot be declared both 'extern' and with the 'loader_uninitialized' attribute"
'variable %0 cannot be implicitly captured in a lambda with no capture-default specified'
'variable %0 cannot be threadprivate because it is %select{thread-local|a global named register variable}1'
'variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body'
"variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2"
'variable %0 is declared here'
'variable %0 is uninitialized when %select{used here|captured by block}1'
'variable %0 is uninitialized when passed as a const reference argument here'
'variable %0 is uninitialized when used within its own initialization'
'variable %0 is%select{| explicitly}1 captured here'
'variable %0 may be uninitialized when %select{used here|captured by block}1'
'variable %0 must have explicitly specified data sharing attributes'
'variable %0 must have explicitly specified data sharing attributes, data mapping attributes, or in an is_device_ptr clause'
'variable %0 set but not used'
'variable %0 with flexible array member cannot be captured in a lambda expression'
'variable %0 with type %1 has incompatible initializer of type %2'
'variable %0 with unknown type cannot be given a function type'
'variable %select{|in unary expression|on right hand side of assignment|on left hand side of assignment|on left hand side of compound assignment|on left hand side of assignment}2(%3) must match variable used %select{|in unary expression|on right hand side of assignment|<not possible>|on left hand side of compound assignment|on left hand side of assignment}0(%1) from the first statement'
'variable already marked as mapped in current construct'
"variable appearing in '%0' clause of OpenACC 'declare' directive must be in the same scope as the directive"
"variable can appear only once in OpenMP '%0' clause"
"variable can appear only once in OpenMP 'target update' construct"
'variable captured in declare target region must appear in a to clause'
'variable declaration in a constexpr %select{function|constructor}0 is a C++14 extension'
'variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14'
'variable declaration in condition cannot have a parenthesized initializer'
'variable declaration in condition must have an initializer'
'variable declaration in for loop is a C99-specific feature'
'variable declared constinit here'
"variable declared with 'objc_externally_retained' cannot be modified in ARC"
'variable does not have a constant initializer'
'variable has incomplete type %0'
'variable in constant address space must be initialized'
'variable is not assignable (missing __block type specifier)'
'variable length array cannot be formed during template argument deduction'
"variable length array declaration cannot have 'extern' linkage"
"variable length array declaration cannot have 'static' storage duration"
'variable length array declaration not allowed at file scope'
'variable length array folded to constant array as an extension'
'variable length array must be bound in function definition'
'variable length array used'
'variable length arrays are a C99 feature'
"variable length arrays are not supported %select{for the current target|in '%1'}0"
'variable length arrays are not supported for the current target'
'variable length arrays are not supported in OpenCL'
"variable length arrays are not supported in OpenMP tasking regions with 'untied' clause"
'variable length arrays in C++ are a Clang extension'
"variable length arrays in C++ are a Clang extension; did you mean to use 'static_assert'?"
'variable length arrays in a coroutine are not supported'
'variable must be of integer or %select{pointer|random access iterator}0 type'
"variable named 'main' with external linkage has undefined behavior"
'variable of non-literal type %1 cannot be defined in a constexpr %select{function|constructor}0 before C++23'
"variable of non-reference type %0 can be used only with 'val' modifier, but used with '%1'"
'variable of type %1 has %select{private|protected}2 destructor'
"variable referenced by 'link' clause not in global or namespace scope must be marked 'extern'"
"variable referenced in '%0' clause of OpenACC 'declare' directive was already referenced"
'variable template partial specialization %0 cannot be redefined'
'variable templates are a C++14 extension'
'variable templates are incompatible with C++ standards before C++14'
"variable with 'loader_uninitialized' attribute cannot have an initializer"
"variable with 'loader_uninitialized' attribute must have a trivial default constructor"
'variable with local storage in initial value of threadprivate variable'
'variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body'
'variable-sized object may not be initialized'
'variables in function scope cannot be declared static'
'variables in the %0 address space can only be declared in the outermost scope of a kernel function'
'variably modified type %0 cannot be used as a template argument'
"variably modified type declaration cannot have 'extern' linkage"
'variably modified type declaration not allowed at file scope'
'variably-modified type %0 cannot be used in a constexpr %select{function|constructor}1'
"variadic 'friend' declarations are a C++2c extension"
"variadic 'friend' declarations are incompatible with C++ standards before C++2c"
'variadic function cannot use %0 calling convention'
'variadic macros are a C99 feature'
'variadic macros are a Clang extension in OpenCL'
'variadic macros are incompatible with C++98'
'variadic templates are a C++11 extension'
'variadic templates are incompatible with C++98'
"variant function in '#pragma omp declare variant' is itself marked as '#pragma omp declare variant'"
"variant in '#pragma omp declare variant' is the same as the base function"
"variant in '#pragma omp declare variant' with type %0 is incompatible with type %1%select{| with appended arguments}2"
'vector component access exceeds type %0'
'vector component access has invalid length %0; supported lengths are: 1,2,3,4,8,16'
"vector component name '%0' is a feature from OpenCL version 3.0 onwards"
'vector condition type %0 and result type %1 do not have elements of the same size'
'vector condition type %0 and result type %1 do not have the same number of elements'
'vector initializers are not compatible with NEON intrinsics in big endian mode'
'vector is not assignable (contains duplicate components)'
'vector operands do not have the same elements sizes (%0 and %1)'
'vector operands do not have the same number of elements (%0 and %1)'
'vector operands to the vector conditional must be the same type %diff{($ and $)|}0,1}'
'vector size not an integral multiple of component size'
"vectorize_width loop hint malformed; use vectorize_width(X, fixed) or vectorize_width(X, scalable) where X is an integer, or vectorize_width('fixed' or 'scalable')"
"vendor '%0' is not supported: '%1'"
'verbose'
'verify structure of the log'
'verify the CFG after every pass'
'verify-uselistorder Options'
"version '%0' in target triple '%1' is invalid"
'version 1'
'version 2'
'version 3'
'version 4'
'version control conflict marker in file'
"version for '%0' already specified"
'version list contains duplicate entries'
"version list contains entries that don't impact code generation"
'version number must have non-zero major, minor, or sub-minor version'
'violations found for %0'
'virtual base class declared here'
'virtual constexpr functions are incompatible with C++ standards before C++20'
"virtual destructor requires an unambiguous, accessible 'operator delete'"
"virtual filesystem overlay file '%0' not found"
'virtual function %0 has a different return type %diff{($) than the function it overrides (which has return type $)|than the function it overrides}1,2'
'virtual function %0 has different attributes %diff{($) than the function it overrides (which has $)|than the function it overrides}1,2'
'virtual function %0 has different calling convention attributes %diff{($) than the function it overrides (which has calling convention $)|than the function it overrides}1,2'
'virtual function %q0 has more than one final overrider in %1'
'virtual function cannot be constexpr'
'virtual function cannot have a requires clause'
'virtual functions are not supported in C++ for OpenCL'
'virtual functions are unsupported in HLSL'
'virtual inheritance is unsupported in HLSL'
"virtual method %0 is inside a 'final' class and can never be overridden"
'visibility does not match previous declaration'
'void %select{function|method|block}1 %0 should not return void expression'
'void block should not return a value'
'volatile %select{temporary created|object declared|member declared}0 here'
'volatile qualifier in structured binding declaration is deprecated'
'volatile-qualified parameter type %0 is deprecated'
'volatile-qualified return type %0 is deprecated'
'warn on trailing characters'
'warnings are errors'
'was searched for in the directory: %0'
'wave good bye'
'weak %select{variable|property|implicit property|instance variable}0 %1 is accessed multiple times in this %select{function|method|block|lambda}2 but may be unpredictably set to nil; assign to a strong variable to keep the object alive'
'weak %select{variable|property|implicit property|instance variable}0 %1 may be accessed multiple times in this %select{function|method|block|lambda}2 and may be unpredictably set to nil; assign to a strong variable to keep the object alive'
'weak attribute declared on a __strong type property in GC mode'
'weak declaration cannot have internal linkage'
'weak identifier %0 never declared'
'weakref declaration must have internal linkage'
'weakref declaration of %0 must also have an alias attribute'
'weakref declaration of %0 must be in a global context'
'webassembly: disables the fix  irreducible control flow optimization pass'
'when a function is considered for merging into a partition that already contains some of its callees, do the merge if at least n% of the code it can reach is already present inside the partition; e.g. 0.7 means only merge >70%'
'when applied to this declaration'
'when deciding to split a function, apply this alignment while doing the size comparison (see -split-threshold). Default value: 2.'
'when emitting large string tables, prefer string literals over comma-separated char literals. This can be a readability and compile-time performance win, but upsets some compilers'
'when implemented by class %0'
"when looking up '%select{begin|end}0' function for range expression of type %1"
'when max depth is reached and we can no longer branch out, this value determines if a function is worth merging into an already existing partition to reduce code duplication. This is a factor of the ideal partition size, e.g. 2.0 means we consider the function for merging if its cost (including its callees) is 2x the size of an ideal partition.'
'when possible, poison scoped variables at the beginning of the scope (slower, but more precise)'
'when repeating the instruction snippet by looping over it, duplicate the snippet until the loop body contains at least this many instruction'
'when type is in parentheses, array cannot have dynamic size'
'which delegates to'
'which gadget scanners to run'
'while building implicit deduction guide first needed here'
'while calculating associated constraint of template %0 here'
'while checking a default template argument used here'
"while checking constraint satisfaction for class template partial specialization '%0' required here"
"while checking constraint satisfaction for function '%0' required here"
"while checking constraint satisfaction for template '%0' required here"
"while checking constraint satisfaction for variable template partial specialization '%0' required here"
"while checking implicit 'delete this' for virtual destructor"
"while checking the satisfaction of concept '%0' requested here"
'while checking the satisfaction of nested requirement requested here'
"while declaring the corresponding implicit 'operator==' for this defaulted 'operator<=>'"
'while declaring the implicit %select{default constructor|copy constructor|move constructor|copy assignment operator|move assignment operator|destructor}1 for %0'
'while loop has empty body'
'while loop outside of a function'
'while printing functions output dyno-stats and skip instructions'
"while rewriting comparison as call to 'operator<=>' declared here"
'while substituting deduced template arguments into function template %0 %1'
'while substituting explicitly-specified template arguments into function template %0 %1'
'while substituting into a lambda expression here'
'while substituting into concept arguments here; substitution failures not allowed in concept arguments'
'while substituting prior template arguments into %select{non-type|template}0 template parameter%1 %2'
'while substituting template arguments into constraint expression here'
'whitespace is not allowed in parameter passing direction'
'whitespace recommended after macro name'
'whitespace required after macro name'
'widen this field to %0 bits to store all values of %1'
'width of bit-field %0 (%1 bits) exceeds the width of its type; value will be truncated to %2 bit%s2'
'width of%select{ anonymous|}0 bit-field%select{| %1}0 (%2 bits) exceeds the %select{width|size}3 of its type (%4 bit%s4)'
'with jt-footprint-reduction, only process PIC jumptables and turn off other transformations that increase code size'
'within field of type %0 declared here'
'writable atomic property %0 cannot pair a synthesized %select{getter|setter}1 with a user defined %select{getter|setter}2'
'write BOLT Address Translation tables'
'write bolt info section in the output binary'
'wrong argument format for hlsl attribute, use %0 instead'
'wrong fpu width; %select{LSX|LASX}0 depends on 64-bit FPU'
'yaml2obj Options'
"you need to include <typeinfo> before using the 'typeid' operator"
'z/OS target level "%0" is discontinued'
'z/OS target level "%0" is invalid'
'zero %0 size'
'zero as null pointer constant'
'zero field width in scanf format string is unused'
'zero linear step (%0 %select{|and other variables in clause }1should probably be const)'
'zero size arrays are an extension'
"zero-length array section is not allowed in 'depend' clause"
'zero-length arrays are not permitted in %select{C++|SYCL device code|HIP device code}0'
